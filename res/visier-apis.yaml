# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
  title: API Reference
  description: Detailed API reference documentation for Visier APIs. Includes all endpoints, headers, path parameters, query parameters, request body schema, response schema, JSON request samples, and JSON response samples.
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 22222222.99200.21550
paths:
  /v1/admin/calculation-concepts:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve all calculation concepts
      description: Retrieve the calculation concepts available in production.
      operationId: ObjectConfiguration_GetCalculationConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.api.CalculationConceptListDTO'
  /v1/admin/calculation-concepts/{conceptId}:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve the configuration of a calculation concept
      description: Retrieve the configuration details of a calculation concept in production.
      operationId: ObjectConfiguration_GetCalculationConcept
      parameters:
        - name: conceptId
          in: path
          description: The ID of the concept to retrieve the configuration for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.api.CalculationConceptDTO'
  /v1/admin/calculation-concepts/{conceptId}/configure:
    put:
      tags:
        - ObjectConfiguration
      summary: Map dimension members to nodes in a calculation concept
      description: |-
        Map dimension members to nodes in a calculation concept.
         The changes are applied in a new project and published to production.

         The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in
         the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
      operationId: ObjectConfiguration_MapCalculationConcept
      parameters:
        - name: conceptId
          in: path
          description: The UUID of the concept to configure.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.api.CalculationConceptConfigurationMapDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.api.ConceptConfigurationResultDTO'
  /v1/admin/capabilities:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all permission capabilities
      description: |-
        Retrieve all the permission capabilities in your tenant.
         You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.

         To specify the project in which to retrieve the permission capabilities, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetCapabilities
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the capabilities from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetCapabilitiesAPIResponseDTO'
  /v1/admin/capabilities/{capabilityId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a permission capability's details
      description: |-
        Retrieve the details of a specific capability.

         To specify the project in which to retrieve the permission capability, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetCapability
      parameters:
        - name: capabilityId
          in: path
          description: The unique identifier of the capability you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a capability from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.CapabilityDTO'
  /v1/admin/content-packages:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all content packages
      description: |-
        Retrieve the list of available content packages.
         You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.

         To specify the project in which to retrieve the available content packages, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetContentPackages
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the content packages from.
          schema:
            type: string
        - name: searchString
          in: query
          description: |-
            Optional search string to return only content packages whose display name or description contains that search string.
             If searchString is empty or not provided, the response returns a list of all content packages.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetContentPackagesAPIResponseDTO'
  /v1/admin/content-packages/{contentPackageId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a content package's details
      description: |-
        Retrieve the details of a specific content package.

         To specify the project in which to retrieve a content package, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetContentPackage
      parameters:
        - name: contentPackageId
          in: path
          description: The unique identifier of the content package you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a content package from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ContentPackageDTO'
  /v1/admin/data-access-sets:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all data access sets
      description: |-
        Retrieve a list of all shareable data access sets. Data access sets define the level of access that users have to properties and property values for the analytic object in a permission. Data access sets also grant access to properties of subjects that are referenced by the analytic object in the permission.
         You can assign data access sets to a permission when creating or updating permissions.

         To specify the project in which to retrieve the shareable data access sets, provide a project UUID in the `ProjectID` request header.

         **Note:** If the number of valid data access sets exceeds the default limit of 100, the response status code is 206. To retrieve more than 100 data access sets, set `limit` to a higher number.
      operationId: Permissions_GetDataAccessSets
      parameters:
        - name: analyticObjectId
          in: query
          description: Specify the analytic object ID to retrieve the shareable data access sets for. Default is all analytic objects.
          schema:
            type: string
        - name: with
          in: query
          description: |-
            The information about the data access set to include in the request response.
             * If empty, returns basic information for the data access set, including its unique ID, display name, description, and analytic object ID.
             * If `details`, returns basic information and property data access information (`propertyAccessConfigs`).
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: The maximum number of data access sets to return. Default is 100. Maximum is 1000.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetDataAccessSetsAPIResponseDTO'
    put:
      tags:
        - Permissions
      summary: Update shareable data access sets
      description: |-
        Update shareable data access sets. Shareable data access sets let you reuse common data access configurations in multiple permissions.

         To specify the project in which to update shareable data access sets, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_UpdateDataAccessSets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.BulkDataAccessSetRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.BulkDataAccessSetResponseDTO'
    post:
      tags:
        - Permissions
      summary: Create shareable data access sets
      description: |-
        Create shareable data access sets. Shareable data access sets let you reuse common data access configurations in multiple permissions.

         To specify the project in which to create shareable data access sets, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_CreateDataAccessSets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.BulkDataAccessSetRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.BulkDataAccessSetResponseDTO'
  /v1/admin/data-access-sets/{dataAccessSetId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a data access set's details
      description: |-
        Retrieve the details of a specific shareable data access set. You must know the ID of the data access set to retrieve its details. To retrieve data access set IDs, see `GET v1/admin/data-access-sets`.

         To specify the project in which to retrieve the shareable data access set, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetDataAccessSet
      parameters:
        - name: dataAccessSetId
          in: path
          description: The unique identifier of the data access set you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DataAccessSetDTO'
  /v1/admin/data-security-objects:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of data security objects
      description: |-
        Retrieve the list of available data security objects.
         Data security objects are analytic objects and their related objects that are available to define
         permissions' data security profiles.

         To specify the project in which to retrieve the available data security objects, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetDataSecurityObjects
      parameters:
        - name: id
          in: query
          description: |-
            The unique identifiers of the data security objects (analytic objects) to retrieve.
             Default is all data security objects.
          schema:
            type: array
            items:
              type: string
        - name: includeDetails
          in: query
          description: |-
            If `true`, the response includes the analytic objects (display name, ID, and object type), related objects,
             securable properties, and securable dimensions. If `false`, the response only includes analytic objects
             (display name, ID, and object type). Default is `false`.
          schema:
            type: boolean
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve data security objects from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetDataSecurityObjectsAPIResponseDTO'
  /v1/admin/permissions:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all permissions
      description: |-
        Retrieve the full list of user permissions in your tenant.

         To specify the project in which to retrieve permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetPermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the permissions from.
          schema:
            type: string
        - name: includeDetails
          in: query
          description: |-
            If `true`, returns the permission's details. If `false`, only returns the permissions' ID, display name,
             and description. Default is `false`.
          schema:
            type: boolean
        - name: includeDetailsWithStatus
          in: query
          description: |-
            If `true`, returns the validity statuses for the permission's properties in data access sets and the
             permission's dimensions, dimension members, and hierarchy properties in member filters. If `false`,
             doesn't return validity status information. Default is `false`.
          schema:
            type: boolean
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetPermissionsAPIResponseDTO'
    put:
      tags:
        - Permissions
      summary: Update permissions
      description: |-
        Update existing permissions.

         To specify the project in which to update permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_UpdatePermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to update permissions in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsListDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionBulkOperationResponseDTO'
    post:
      tags:
        - Permissions
      summary: Create permissions
      description: |-
        Create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.

         To specify the project in which to create permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_CreatePermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to create permissions in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsListDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionBulkOperationResponseDTO'
    delete:
      tags:
        - Permissions
      summary: Delete permissions
      description: |-
        Delete existing permissions.

         To specify the project in which to delete permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_DeletePermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to delete permissions from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.DeletePermissionsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionBulkOperationResponseDTO'
  /v1/admin/permissions/users:
    put:
      tags:
        - UsersV1
      summary: Assign permissions to users
      description: |-
        This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions
         to users in the administrating tenant and in the analytic tenants those users belong to.

         To assign permissions to users in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can assign permissions to users in analytic tenants by providing a tenant code and project ID in the request body.
      operationId: UsersV1_AssignPermissions
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AssignRevokePermissionsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AssignRevokePermissionsResponseDTO'
    delete:
      tags:
        - UsersV1
      summary: Remove permissions from users
      description: |-
        This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions
         from users in the administrating tenant and in the analytic tenants those users belong to.

         To remove permission from users in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can remove permissions from users in analytic tenants by providing a tenant code and project ID in the request body.
      operationId: UsersV1_RemovePermissions
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AssignRevokePermissionsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AssignRevokePermissionsResponseDTO'
  /v1/admin/permissions/{permissionId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a permission's details
      description: |-
        Retrieve the details for a specified permission.

         To specify the project in which to retrieve the permission, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetPermission
      parameters:
        - name: permissionId
          in: path
          description: The unique identifier of the permission you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a permission from.
          schema:
            type: string
        - name: includeDetailsWithStatus
          in: query
          description: |-
            If `true`, returns the validity statuses for the permission's properties in data access sets and the
             permission's dimensions, dimension members, and hierarchy properties in member filters. If `false`,
             doesn't return validity status information. Default is `false`.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionDTO'
  /v1/admin/permissions/{permissionId}/users:
    get:
      tags:
        - UsersV1
      summary: Retrieve users that are assigned a specific permission
      description: |-
        This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID
         of the permission you want to retrieve users for.

         To specify the project in which to retrieve users assigned to a specific permission for the login tenant, provide
         a project UUID in the `ProjectID` request header. If omitted, the request retrieves users assigned to a specific permission from production.
      operationId: UsersV1_GetPermissionAssignedUsers
      parameters:
        - name: permissionId
          in: path
          description: The unique identifier of the permission you want to retrieve users for.
          required: true
          schema:
            type: string
        - name: includeUserGroups
          in: query
          description: |-
            If `true`, the response returns a list of all users that are assigned the permission, including users that are
             assigned the permission through a user group.
             If `false`, the response returns a list of the users that are directly assigned the permission.
          schema:
            type: boolean
        - name: tenantFilter
          in: query
          description: Specify the tenant to retrieve the list of users from.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return. The maximum number of tenants to retrieve is 100.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionAssignedUsersDTO'
  /v1/admin/production-versions:
    get:
      tags:
        - ProductionVersions
      summary: Retrieve a list of all production versions
      description: Retrieve a list of all projects that were published to production, ordered from latest published to earliest published.
      operationId: ProductionVersions_GetProductionVersions
      parameters:
        - name: limit
          in: query
          description: The maximum number of production versions to return. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first production version to return. Default is 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetProductionVersionsAPIResponseDTO'
    post:
      tags:
        - ProductionVersions
      summary: Perform an operation on production versions
      description: "Perform operations on production versions, such as exporting a production project's committed changes. \n \n If exporting, please specify `Accept: application/zip, application/json` in the header. The API returns exported changes in ZIP format and error messages in JSON format. If your request returns an error and it doesn't accept `application/json`, you will receive an HTTP 406 status code instead of the appropriate error response body."
      operationId: ProductionVersions_PostProductionVersions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProductionVersionsAPIOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProductionVersionsAPIOperationResponseDTO'
  /v1/admin/production-versions/{productionVersionId}:
    post:
      tags:
        - ProductionVersions
      summary: Perform an operation on a production version
      description: |-
        Perform operations on a specific production version. The following operations are supported:
         * `rollBackTo`: Create a project that rolls back the production version to the specified version. The project contains uncommitted changes that reverse the published versions after the target production version.
      operationId: ProductionVersions_PostProductionVersion
      parameters:
        - name: productionVersionId
          in: path
          description: The production version to use as the target of the operation; for example, the production version to roll back to for the `rollBackTo` operation.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProductionVersionAPIOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProductionVersionAPIOperationResponseDTO'
  /v1/admin/profiles:
    get:
      tags:
        - Profiles
      summary: Retrieve a list of all profiles
      description: |-
        Get a list of all available profiles. For administrating tenants,
         this retrieves all administrating tenant profiles.
      operationId: Profiles_GetAllProfiles
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfilesGetAPIResponseDTO'
  /v1/admin/profiles/accessible-tenants:
    get:
      tags:
        - Profiles
      summary: Retrieve a list of analytic tenant profiles
      description: |-
        Retrieve a list of profiles available for analytic tenants.

         **Note:** Administrating tenants only.
      operationId: Profiles_GetAnalyticProfiles
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfilesGetAPIResponseDTO'
  /v1/admin/profiles/accessible-tenants/{profileId}:
    get:
      tags:
        - Profiles
      summary: Retrieve the details of an analytic tenant profile
      description: |-
        Get the details of an analytic tenant profile.

         **Note:** Administrating tenants only.
      operationId: Profiles_GetAnalyticProfileDetail
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to retrieve details for.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfileGetAPIResponseDTO'
  /v1/admin/profiles/accessible-tenants/{profileId}/assign:
    put:
      tags:
        - Profiles
      summary: Assign an analytic tenant profile to administrating tenant users
      description: |-
        Assign an analytic tenant profile to a list of administrating tenant users
         for a list of analytic tenants.

         **Note:**
          - Administrating tenants only.
          - You can revoke a profile from a user with this request by updating the validityEndTime to be
            "less than" the current time (that is, in the past).
      operationId: Profiles_AssignAnalyticProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to assign.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AccessibleTenantProfileAssignmentRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AccessibleTenantProfileAssignmentResponseDTO'
  /v1/admin/profiles/accessible-tenants/{profileId}/remove:
    delete:
      tags:
        - Profiles
      summary: Remove an analytic tenant profile from administrating tenant users
      description: |-
        Remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.

         **Note:** Administrating tenants only.
      operationId: Profiles_RemoveAnalyticProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to remove.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AccessibleTenantProfileRevokeRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AccessibleTenantProfileRevokeResponseDTO'
  /v1/admin/profiles/{profileId}:
    get:
      tags:
        - Profiles
      summary: Retrieve the details of a profile
      description: |-
        Get the details of a specific profile. For administrating tenants, this retrieves
         the details of administrating tenant profiles.
      operationId: Profiles_GetProfileDetail
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to retrieve details for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfileGetAPIResponseDTO'
  /v1/admin/profiles/{profileId}/assign:
    put:
      tags:
        - Profiles
      summary: Assign a profile to a list of users
      description: |-
        Assign a profile to a list of users. For administrating tenants,
         this assigns an administrating tenant profile to a list of users.
      operationId: Profiles_AssignProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to assign to a list of users.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.LocalTenantProfileAssignmentRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.LocalTenantProfileAssignmentResponseDTO'
  /v1/admin/profiles/{profileId}/remove:
    delete:
      tags:
        - Profiles
      summary: Remove a profile from a list of users
      description: |-
        Remove a profile from a list of users. For administrating tenants, this
         removes an administrating tenant profile from a list of users.
      operationId: Profiles_RemoveProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to remove to a list of users.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.LocalTenantProfileRevokeRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.LocalTenantProfileRevokeResponseDTO'
  /v1/admin/projects:
    get:
      tags:
        - Projects
      summary: Retrieve a list of draft projects accessible to the user
      description: |-
        Get a list of draft projects accessible to the requesting user in the tenant.

         A project is accessible if it is owned by the user or shared to the user.
      operationId: Projects_GetProjects
      parameters:
        - name: with
          in: query
          description: |-
            The types of draft projects to include in the request response.
             * If empty, returns all the `Open` draft projects.
             * If `Open`, returns all Open draft projects.
             * If `Approval`, returns all draft projects in the approval stage. Changes cannot made in Approval projects.
             * If `Rejected`, returns all draft projects that have been rejected. Changes cannot be committed in Rejected projects.
             * If `Archived`, returns all draft projects that have been archived. Changes cannot be committed in Archived projects.
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: The number of projects to return per type. The maximum number of projects to retrieve per type is 1000. The default is 100.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetProjectsAPIResponseDTO'
    post:
      tags:
        - Projects
      summary: Create a new draft project
      description: Create a new draft project in the tenant.
      operationId: Projects_CreateProject
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProjectDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectDTO'
  /v1/admin/projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Retrieve a draft project's information
      description: |-
        Retrieve the details of an accessible draft project. You must know the ID of the project to retrieve its details. To retrieve draft project IDs, see `GET /v1/admin/projects`.

         A project is accessible if it is owned by the user or shared to the user.
      operationId: Projects_GetProject
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the draft project you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectDTO'
    post:
      tags:
        - Projects
      summary: Perform an operation on a draft project
      description: |-
        Perform operations on a draft project. The following operations are supported:
         * `commitAndPublish`: Commits project changes and publishes the project to production.
      operationId: Projects_RunProjectOperation
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProjectOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectOperationResponseDTO'
    delete:
      tags:
        - Projects
      summary: Delete a draft project
      description: Delete a draft project in the tenant. The project will first be archived if applicable.
      operationId: Projects_DeleteProject
      parameters:
        - name: projectId
          in: path
          description: The unique ID of the draft project to be deleted.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectDTO'
  /v1/admin/projects/{projectId}/commits:
    get:
      tags:
        - Projects
      summary: Retrieve a list of all committed changes in a project
      description: Retrieve the full list of all committed changes in a project.
      operationId: Projects_GetProjectCommits
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the draft project you want to retrieve the committed changes for.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of committed changes to return. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first committed change to return. Default is 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectCommitsAPIResponseDTO'
    put:
      tags:
        - Projects
      summary: Import committed changes into a project
      description: Import a ZIP file that contains a list of committed changes into a draft project. The file must be an export from `POST /v1/admin/production-versions`. Use this API after making changes in a development environment to copy the changes to a draft project in your production environment.
      operationId: Projects_PutProjectCommits
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the draft project you want to import committed changes into.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PutProjectCommitsRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectCommitsAPIResponseDTO'
  /v1/admin/selection-concepts:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve all selection concepts
      description: Retrieve the selection concepts available in production.
      operationId: ObjectConfiguration_GetSelectionConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.api.SelectionConceptListDTO'
  /v1/admin/selection-concepts/{conceptId}:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve the configuration of a selection concept
      description: Retrieve the configuration details of a selection concept in production.
      operationId: ObjectConfiguration_GetSelectionConcept
      parameters:
        - name: conceptId
          in: path
          description: The ID of the concept to retrieve the configuration for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.api.SelectionConceptDTO'
  /v1/admin/selection-concepts/{conceptId}/configure:
    put:
      tags:
        - ObjectConfiguration
      summary: Map dimension members to a selection concept
      description: |-
        Map dimension members to a selection concept.
         The changes are applied to a new project and published to production.

         The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in
         the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
      operationId: ObjectConfiguration_MapSelectionConcept
      parameters:
        - name: conceptId
          in: path
          description: The UUID of the concept to configure.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.api.SelectionConceptConfigurationMapDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.api.ConceptConfigurationResultDTO'
  /v1/admin/system-status:
    get:
      tags:
        - SystemStatus
      summary: Check the overall current status of Visier's systems
      description: |-
        Check the current overall status of Visier's systems.

         The overall status is one of:
         * ``UP`` : All systems are operational.
         * `DOWN`: At least one system is not fully operational.
      operationId: SystemStatus_SystemStatus
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemstatus.SystemStatusDTO'
    post:
      tags:
        - SystemStatus
      summary: Check the overall current status of Visier's systems
      description: |-
        Check the current overall status of Visier's systems.

         The overall status is one of:
         * ``UP`` : All systems are operational.
         * `DOWN`: At least one system is not fully operational.
      operationId: SystemStatus_PostSystemStatus
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemstatus.SystemStatusDTO'
  /v1/admin/tenants:
    get:
      tags:
        - TenantsV1
      summary: Retrieve a list of all analytic tenants
      description: |-
        Retrieve the full list of analytic tenants managed by you with their current states and the
         content modules assigned to them, and all other relevant details for the tenants if requested.
      operationId: TenantsV1_GetTenants
      parameters:
        - name: limit
          in: query
          description: The limit of analytic tenant details to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: details
          in: query
          description: If `true`, the response returns information about the data version and modules.
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.AllTenantsStatusAPIDTO'
    post:
      tags:
        - TenantsV1
      summary: Add an analytic tenant
      description: |-
        Prior to processing and loading an analytic tenant's data files, you must provision, or create, that tenant.
         A provisioned analytic tenant is automatically enabled. If the tenant's data is loaded after provisioning, that
         data is immediately accessible by their users.

         Create an analytic tenant and identify the applications assigned to the tenant. Visier
         organizes content under a set of modules.

         Contact Visier Support to determine the list of modules allocated to you.
      operationId: TenantsV1_AddTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
  /v1/admin/tenants/batch:
    post:
      tags:
        - TenantsV1
      summary: Add analytic tenants
      description: |-
        Prior to processing and loading an analytic tenant's data files, you must provision, or create, that tenant.
         A provisioned analytic tenant is automatically enabled. If the tenant's data is loaded after provisioning, that
         data is immediately accessible by their users.

         Create one or more analytic tenants and identify the applications assigned to the tenants. The maximum number of tenants to create in one request is 200.

         Contact Visier Support to determine the list of modules allocated to you.
      operationId: TenantsV1_AddTenants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.BatchTenantProvisionAPIDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.BatchTenantProvisionAPIDTO'
  /v1/admin/tenants/{tenantId}:
    get:
      tags:
        - TenantsV1
      summary: Retrieve an analytic tenant's details
      description: |-
        Retrieve all details for a specified analytic tenant. Doing so allows you to see the current state
         of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
      operationId: TenantsV1_GetTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantDetailAPIDTO'
    put:
      tags:
        - TenantsV1
      summary: Update an analytic tenant
      description: |-
        You may need to update analytic tenants as they grow and as your organization upgrades the content available to
         them. You may also encounter a scenario where an analytic tenant transitions across different industries.

         To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their
         industry code in the Visier system.

         You can use this API to update any field on an analytic tenant, except `tenantCode`.
      operationId: TenantsV1_UpdateTenant
      parameters:
        - name: tenantId
          in: path
          description: The ID of the tenant to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UpdateTenantModel'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
    delete:
      tags:
        - TenantsV1
      summary: Deprovision an analytic tenant
      description: |-
        Warning! Deprovisioning an analytic tenant is not reversible.
         Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/{tenantId}/disable`**.

         This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant
         may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.

         If successful, the response returns the status "Deprovisioned". This indicates that the tenant is scheduled for
         deprovisioning, which may take several days to complete.
      operationId: TenantsV1_DeleteTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v1/admin/tenants/{tenantId}/disable:
    put:
      tags:
        - TenantsV1
      summary: Disable an analytic tenant
      description: |-
        Disable an analytic tenant and remove access to Visier visualizations for the tenant's users.

         You must disable an analytic tenant before deprovisioning, or removing, it from the system.
      operationId: TenantsV1_DisableTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v1/admin/tenants/{tenantId}/enable:
    put:
      tags:
        - TenantsV1
      summary: Enable an analytic tenant
      description: |-
        An analytic tenant is enabled when you provision or create the tenant.

         Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not
         want that tenant to have access to Visier visualizations, but now do.
      operationId: TenantsV1_EnableTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v1/admin/user-groups:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of all user groups
      description: |-
        This API allows you to retrieve the full list of user groups in a tenant.

         To specify the project in which to retrieve user groups for a tenant, provide a project UUID in the `ProjectID` request header. If omitted, the request retrieves user information from production.
      operationId: UsersV1_GetAllUserGroups
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the list of user groups from.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          schema:
            type: integer
            format: uint32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset.
          schema:
            type: integer
            format: uint32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupsGetAPIResponseDTO'
  /v1/admin/user-groups/permissions:
    put:
      tags:
        - UsersV1
      summary: Assign permissions to user groups
      description: |-
        This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.

         To assign permissions to user groups in a project, provide a project UUID in the `ProjectID` request header.
      operationId: UsersV1_AssignPermissionsToUserGroups
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.PermissionsToUserGroupForTenantDTO'
    delete:
      tags:
        - UsersV1
      summary: Remove permissions from user groups
      description: |-
        This API allows you to remove a permission from specific user groups.

         To remove permissions from user groups in a project, provide a project UUID in the `ProjectID` request header.
      operationId: UsersV1_RevokePermissionsFromUserGroups
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.PermissionsToUserGroupForTenantDTO'
  /v1/admin/user-groups/users:
    put:
      tags:
        - UsersV1
      summary: Assign users to user groups
      description: |-
        This API allows you to assign users to specific user groups.

         To assign users to user groups in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can assign users to user groups in multiple analytic tenants by providing a tenant code and project ID in the request body.

         We recommend that administrating tenants set the analytic tenant in which to execute the API call using the `TargetTenantID` request header.
      operationId: UsersV1_AddUsersToUserGroup
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UsersToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.SecurityAssignmentResponseDTO'
    delete:
      tags:
        - UsersV1
      summary: Remove users from user groups
      description: |-
        This API allows you to remove users from specific user groups.

         To remove users from user groups in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can remove users to user groups in multiple analytic tenants by providing a tenant code and project ID in the request body.

         We recommend that administrating tenants set the analytic tenant in which to execute the API call using the `TargetTenantID` request header.
      operationId: UsersV1_RemoveUsersFromUserGroup
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UsersToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.SecurityAssignmentResponseDTO'
  /v1/admin/user-groups/{userGroupId}/users:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of user group users
      description: |-
        This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly
         included in the user group through the user group's dynamic filters are not returned by this endpoint.

         To specify the project in which to retrieve user group users for the login tenant, provide
         a project UUID in the `ProjectID` request header. If omitted, the request retrieves user group users from production.
      operationId: UsersV1_GetUserGroupUsers
      parameters:
        - name: userGroupId
          in: path
          description: The ID of user group.
          required: true
          schema:
            type: string
        - name: tenantFilter
          in: query
          description: Specifies the tenant to retrieve the list of users from.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return. The maximum number of tenants to retrieve is 100.
          schema:
            type: integer
            format: uint32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: uint32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupsUsersDTO'
  /v1/admin/users:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of all users
      description: |-
        This API allows you to retrieve the full list of users and their current states.

         To specify the project in which to retrieve user information, provide a project UUID in the `ProjectID` request header. If omitted, the request retrieves user information from production.
      operationId: UsersV1_GetAllUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a list of users from.
          schema:
            type: string
        - name: assignedProfiles
          in: query
          description: If true, the response returns a list of the user's assigned profiles.
          schema:
            type: boolean
        - name: assignedPermissions
          in: query
          description: If true, the response returns the user's assigned permissions.
          schema:
            type: boolean
        - name: assignedUserGroups
          in: query
          description: If true, the response returns the user's assigned user groups.
          schema:
            type: boolean
        - name: limit
          in: query
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          schema:
            type: integer
            format: uint32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: uint32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AllUsersGetAPIResponseDTO'
    post:
      tags:
        - UsersV1
      summary: Add a user
      description: Create a new user. Administrating tenant users can specify the tenant in which to add a user.
      operationId: UsersV1_AddUser
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to create a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UserCreationAPIRequestDTO'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreationAPIResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/{userId}:
    get:
      tags:
        - UsersV1
      summary: Retrieve a user's details
      description: |-
        This API allows you to retrieve all details for a specified user.

         To specify the project in which to retrieve user information, provide a project UUID in the `ProjectID` request header. If omitted, the request retrieves user information from production.
      operationId: UsersV1_GetUserDetail
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a user from.
          schema:
            type: string
        - name: assignedProfiles
          in: query
          description: If true, the response returns a list of the user's assigned profiles.
          schema:
            type: boolean
        - name: assignedPermissions
          in: query
          description: If true, the response returns the user's assigned permissions.
          schema:
            type: boolean
        - name: assignedUserGroups
          in: query
          description: If true, the response returns the user's assigned user groups.
          schema:
            type: boolean
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UserGetAPIResponseDTO'
    put:
      tags:
        - UsersV1
      summary: Update a user
      description: Update an existing user's information, such as their display name or if the user is enabled in Visier.
      operationId: UsersV1_UpdateUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to update.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to update a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UserUpdateAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UserUpdateAPIRequestDTO'
    delete:
      tags:
        - UsersV1
      summary: Delete a user
      description: Delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
      operationId: UsersV1_DeleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to delete.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to delete a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.DeleteUserResponse'
  /v1/admin/users/{userId}/accessible-tenant-profiles:
    get:
      tags:
        - Profiles
      summary: Retrieve an administrating tenant user's analytic tenant profiles
      description: |-
        Retrieve a specified user's assigned profiles for analytic tenants.

         **Note:** Administrating tenants only.
      operationId: Profiles_GetAnalyticUserProfile
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AllProfileAssignedForAccessibleTenantDTO'
  /v1/admin/users/{userId}/profiles:
    get:
      tags:
        - Profiles
      summary: Retrieve a user's profiles
      description: |-
        Retrieve a specified user's assigned profiles. For administrating tenants,
         this retrieves a user's administrating tenant profiles.
      operationId: Profiles_GetUserProfile
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AllProfileAssignedForLocalTenantDTO'
  /v1/api/pgp-keys:
    get:
      tags:
        - PGPKeys
      summary: Retrieve all PGP public keys
      description: Retrieve a list of all PGP public keys in your tenant.
      operationId: PGPKeys_GetAllPGPPublicKeys
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.PublicKeysDTO'
    post:
      tags:
        - PGPKeys
      summary: Download a public encryption key
      description: "Generate a key pair and retrieve the public key that you can use to encrypt your data to send to Visier. \n \n In the request body, optionally set the UTC expiration date for the key pair in ISO-8601 format. Must be between 2 and 10 years. Default is 2 years."
      operationId: PGPKeys_GeneratePGPKeyPair
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.crypto.KeyPairGenerateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.PublicKeyDTO'
  /v1/api/pgp-keys/{keyID}:
    get:
      tags:
        - PGPKeys
      summary: Retrieve a PGP public key using the key ID
      description: If you know your PGP key ID, use it to retrieve the PGP public key. To get a list of all key IDs, see `Retrieve all PGP public keys`.
      operationId: PGPKeys_GetPGPPublicKey
      parameters:
        - name: keyID
          in: path
          description: The key ID of the generated key pair in 16-letter hexadecimal format, including leading zeros.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.PublicKeyDTO'
    delete:
      tags:
        - PGPKeys
      summary: Delete a PGP key pair
      description: Delete a PGP key pair using a key ID.
      operationId: PGPKeys_DeletePGPKeyPair
      parameters:
        - name: keyID
          in: path
          description: The key ID of the generated key pair in 16-letter hexadecimal format, including leading zeros.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.KeyPairDeleteResponseDTO'
  /v1/auth/oauth2/userinfo:
    get:
      tags:
        - OAuth2
      summary: Retrieve user-specific metadata
      description: Retrieve user-specific metadata, such as a user's ID, username, and profile capabilities.
      operationId: OAuth2_UserInfo
      parameters:
        - name: includeTenantDetails
          in: query
          description: If `true`, includes tenant details in the response. Default is `false`.
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authentication.OAuth2UserInfoDTO'
      security:
        - BearerAuth: []
  /v1/data/directloads/{draftId}/configs:
    get:
      tags:
        - DirectDataIntake
      summary: Get the direct data intake configuration
      description: Get the direct data intake configuration.
      operationId: DirectDataIntake_GetConfig
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataLoadConfigDTO'
    put:
      tags:
        - DirectDataIntake
      summary: Update the direct data intake configuration
      description: |-
        Configure the data intake settings, such as the direct data intake job type. Only provide values for the configuration options that should change.

         Configuration options that are not present in the PUT request are ignored and left unchanged.
      operationId: DirectDataIntake_PutConfig
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.DirectDataLoadConfigDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataLoadConfigDTO'
  /v1/data/directloads/{draftId}/schemas/{objectName}:
    get:
      tags:
        - DirectDataIntake
      summary: Retrieve an object's data load schema
      description: |-
        Gets the load schema for a specified object. The object's load schema represents the structure that the data upload file must follow to upload data to the object.

         In the load schema, the listed columns must be present in the data file as column headers and exactly match the load schema (case sensitive), however,  only the columns whose `isMandatory` field is `true` must contain values in the data file.
      operationId: DirectDataIntake_ObjectSchema
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          description: The name of the object to return the load schema for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataSchemaDTO'
  /v1/data/directloads/{draftId}/transactions:
    get:
      tags:
        - DirectDataIntake
      summary: Retrieve a list of open transactions
      description: Get a list of all open transactions. Doesn't return committed transactions or rolled back transactions.
      operationId: DirectDataIntake_ListTransactions
      parameters:
        - name: draftId
          in: path
          description: Optionally specify the unique identifier of a project to retrieve open transactions from. Currently, the only supported value is `prod` to retrieve open transactions for the production version.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataListTransactionsResponseDTO'
    post:
      tags:
        - DirectDataIntake
      summary: Start a direct data intake transaction
      description: |-
        Create a transaction to contain your data files. To upload files to objects in Visier, you must first start a transaction.

         After starting a transaction and uploading files to the transaction, you can commit the transaction to process the uploaded files or roll back the transaction to discard the uploaded files.
      operationId: DirectDataIntake_StartTransaction
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataTransactionStartResponseDTO'
  /v1/data/directloads/{draftId}/transactions/{transactionId}:
    get:
      tags:
        - DirectDataIntake
      summary: Check transaction status
      description: Retrieve the status of a committed transaction's processing job.
      operationId: DirectDataIntake_JobStatus
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          description: The unique identifier of the transaction.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataJobStatusResponseDTO'
    post:
      tags:
        - DirectDataIntake
      summary: Commit a transaction
      description: |-
        Process a transaction and its uploaded data files. This starts a processing job to load the data files into Visier.

         After committing a transaction, you cannot upload additional files to the transaction. Use the `Check transaction status` endpoint to monitor the progress of the processing job.
      operationId: DirectDataIntake_CommitTransaction
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          description: The unique identifier of the transaction.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataUploadFileResponseDTO'
    delete:
      tags:
        - DirectDataIntake
      summary: Roll back a transaction
      description: |-
        Rolls back the specified transaction. This discards all files uploaded within the transaction and deletes the transaction.

         After rolling back a transaction, you cannot use the transaction to upload data files.
      operationId: DirectDataIntake_RollbackTransaction
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          description: The unique identifier of the transaction.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataUploadFileResponseDTO'
  /v1/data/directloads/{draftId}/transactions/{transactionId}/{objectName}/sample-data:
    post:
      tags:
        - DirectDataIntake
      summary: Load sample data
      description: Load sample data in a previously-created transaction. The data is not processed in Visier until you commit the transaction. Sample data is available for `employee`, `employee_exit`, `employment_start`, and `organization_hierarchy`.
      operationId: DirectDataIntake_LoadSampleData
      parameters:
        - name: draftId
          in: path
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          required: true
          schema:
            type: string
        - name: sampleName
          in: query
          description: |-
            The name of the target object to load sample data. Sample data is available for:
             * `employee`: The Employee subject.
             * `employee_exit`: The Employee Exit event.
             * `employment_start`: The Employment Start event.
             * `organization_hierarchy`: The Organization Hierarchy dimension.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DirectDataUploadFileResponseDTO'
  /v1/data/model/analytic-objects:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of analytic objects
      description: Retrieve all the analytic objects in your Visier solution.
      operationId: DataModel_AnalyticObjects
      parameters:
        - name: id
          in: query
          description: The IDs of the analytic objects to retrieve. Default is all analytic objects.
          schema:
            type: array
            items:
              type: string
        - name: objectType
          in: query
          description: The object type to filter the returned analytic objects by.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.AnalyticObjectsDTO'
  /v1/data/model/analytic-objects/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object by ID
      description: If you know the ID of an analytic object, use this API to retrieve that object specifically.
      operationId: DataModel_AnalyticObject
      parameters:
        - name: id
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.AnalyticObjectDTO'
  /v1/data/model/analytic-objects/{id}/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of metrics for an analytic object by ID
      description: If you know the ID of an analytic object, use this API to retrieve metrics for that object specifically.
      operationId: DataModel_AnalyticMetrics
      parameters:
        - name: id
          in: path
          description: The ID of the analytic object to retrieve metrics for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.MetricsDTO'
  /v1/data/model/analytic-objects/{objectId}/dimensions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of dimensions
      description: Retrieve a list of dimensions for a specific analytic object.
      operationId: DataModel_Dimensions
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the dimensions to retrieve. Default is all dimensions.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.DimensionsDTO'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/mappings/validate:
    post:
      tags:
        - DataModel
      summary: Validate a member map's unmapped dimension members by ID
      description: "If you know the ID of a member map, use this API to validate one of the member map's dimensions. \n You must also know the dimension's ID and the analytic object's ID. \n The response returns the member map ID, the requested dimension ID, a list of the dimension's unmapped members, and a list of errors found."
      operationId: DataModel_DimensionMemberMapValidation
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object.
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of a dimension of the member map.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataservices.datamodel.DimensionMappingValidationExecutionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.DimensionMappingValidationDTO'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/members:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of dimension members
      description: |-
        If you know the ID of a dimension, use this API to retrieve the members of that dimension specifically. You must
         also know the analytic object's ID. Dimension members exist in a hierarchy. The levels in the hierarchy may be
         fixed or non-uniform. Leveled dimensions have fixed hierarchies, while parent-child dimensions have non-uniform
         levels. When you retrieve dimension members with this API, the response returns the level of the dimension and the
         path to get to that level. For example, in a Location dimension, Vancouver is 3 levels deep:

         - All > Canada > British Columbia > Vancouver

         Parent-child hierarchies are non-uniform and exhibit distinct characteristics such as time dependence and data
         attributes. These traits reflect the dynamic nature of hierarchies, for example, organizational hierarchies. The API
         response includes elements that express the validity ranges for retrieved members.
      operationId: DataModel_Members
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object.
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of the dimension.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the members to retrieve. Default is all members.
          schema:
            type: array
            items:
              type: string
        - name: maxLevel
          in: query
          description: The maximum level in the hierarchy to fetch. The top level of the hierarchy is 0. Default is all levels.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: A regular expression that members must match to be retrieved. Default is to retrieve all members.
          schema:
            type: string
        - name: field
          in: query
          description: |-
            Indicates the aspect of the member to apply the filter to. Possible values are:
             - **id**: Match the filter to the member ID.
             - **display**: Match the filter to the member's display name.
             - **either**: Match the filter to the member ID or display name.

             Default is `id`.
          schema:
            type: string
        - name: includeDataMembers
          in: query
          description: Indicates whether data members are included in the response. Parent-child dimensions only. Default is `false`.
          schema:
            type: boolean
        - name: offset
          in: query
          description: For paginated member requests against high-cardinality dimensions, the offset of the first member to retrieve. Default is 0. If the `offset` value is specified to a non-default value, all other non-pagination parameters are ignored.
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: For paginated member requests against high-cardinality dimensions, the maximum number of members to retrieve. Default is -1, meaning no limit. If the `limit` value is specified to a non-default value, all other non-pagination parameters are ignored.
          schema:
            type: integer
            format: int32
        - name: sortType
          in: query
          description: |-
            The order of the members in the response. Valid values:
             - `configured`: Sorts the members according to their configuration. For parent-child dimensions, sorts members by name in ascending order. For other dimensions, sorts members by their configured order in Studio.
             - `natural`: Does not sort the members. This is the default.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.MembersDTO'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/members/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a dimension member
      description: If you know the ID of a dimension member, use this API to retrieve that dimension member specifically. You must also know the dimension's ID and the analytic object's ID.
      operationId: DataModel_Member
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object.
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of the dimension.
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Id
          in: query
          description: The ID of the member to retrieve.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.MembersDTO'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a dimension by ID
      description: If you know the ID of a dimension, use this API to retrieve that dimension specifically. You must also know the analytic object's ID.
      operationId: DataModel_Dimension
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the dimension to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.DimensionDTO'
  /v1/data/model/analytic-objects/{objectId}/properties:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of properties
      description: Retrieve a list of properties for a specific analytic object.
      operationId: DataModel_Properties
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the properties to retrieve. Default is all properties.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PropertiesDTO'
  /v1/data/model/analytic-objects/{objectId}/properties/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a property by ID
      description: If you know the ID of a property, use this API to retrieve that property specifically. You must also know the analytic object's ID..
      operationId: DataModel_Property
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the property to retrieve.
          required: true
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PropertyDTO'
  /v1/data/model/analytic-objects/{objectId}/selection-concepts:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object's selection concepts
      description: Retrieve a list of selection concepts for a specific analytic object.
      operationId: DataModel_SelectionConcepts
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the selection concepts to retrieve. Default is all selection concepts.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptsDTO'
  /v1/data/model/analytic-objects/{objectId}/selection-concepts/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object's selection concept by ID
      description: If you know the ID of a selection concept, use this API to retrieve that selection concept specifically. You must also know the analytic object's ID.
      operationId: DataModel_SelectionConcept
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the selection concept to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptDTO'
  /v1/data/model/currencies:
    get:
      tags:
        - DataModel
      summary: Retrieve all currencies
      description: Retrieve all the available currencies in your Visier solution.
      operationId: DataModel_Currencies
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.CurrenciesDTO'
  /v1/data/model/currencies/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a currency
      description: Retrieve a specific currency if you know the currency code.
      operationId: DataModel_Currency
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.CurrencyDTO'
  /v1/data/model/currencies/{id}/rates:
    get:
      tags:
        - DataModel
      summary: Retrieve all exchange rates for a currency
      description: |-
        Retrieve exchange rates for a specific currency from Visier.
         You can optionally specify query parameter options for the returned rates, such as the number of decimals to round the exchange rate to.
      operationId: DataModel_CurrencyRates
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency to get rates for.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: The earliest time instant to retrieve exchange rates from. Default is to use 0 milliseconds.
          schema:
            type: string
        - name: endTime
          in: query
          description: The latest time instant to retrieve exchange rates from. Default is to use the time of this request in milliseconds.
          schema:
            type: string
        - name: decimals
          in: query
          description: The number of decimals to round exchange rates to. Default is to round to 2 decimal places.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.CurrencyRatesDTO'
  /v1/data/model/currencies/{id}/rates/{toId}:
    get:
      tags:
        - DataModel
      summary: Retrieve exchange rates from one currency to another currency
      description: |-
        Retrieve exchange rates from a specific currency to another specific currency.
         You can optionally specify query parameter options for the returned rates, such as the number of decimals to round the exchange rate to.
      operationId: DataModel_CurrencyRatesWithToCurrency
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency to convert from.
          required: true
          schema:
            type: string
        - name: toId
          in: path
          description: The ISO 4217 3-letter code for the currency to convert to.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: The earliest time instant to retrieve exchange rates from. Default is to use 0 milliseconds.
          schema:
            type: string
        - name: endTime
          in: query
          description: The latest time instant to retrieve exchange rates from. Default is to use the time of this request in milliseconds.
          schema:
            type: string
        - name: decimals
          in: query
          description: The number of decimals to round exchange rates to. Default is to round to 2 decimal places.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.CurrencyRatesDTO'
  /v1/data/model/dimensions:
    patch:
      tags:
        - DataModel
      summary: Update dimensions
      description: |-
        Change the display name, short display name, and description of one or more dimensions. This API supports updating leveled dimensions.
         In each API request, update up to 10 dimensions per tenant with a maximum of 500 tenants.
      operationId: DataModel_UpdateDimensions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.objectconfiguration.DimensionsChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.objectconfiguration.ObjectsBulkChangeResponseDTO'
  /v1/data/model/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of metrics
      description: Retrieve all the metrics in your Visier solution.
      operationId: DataModel_Metrics
      parameters:
        - name: id
          in: query
          description: The IDs of the metrics to retrieve. Default is all metrics.
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          description: The category to filter the returned metrics by.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.MetricsDTO'
  /v1/data/model/metrics/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric by ID
      description: If you know the ID of a metric, use this API to retrieve that metric specifically.
      operationId: DataModel_Metric
      parameters:
        - name: id
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.MetricDTO'
  /v1/data/model/metrics/{metricId}/dimensions:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric's dimensions
      description: Retrieve a list of dimensions for a specific metric.
      operationId: DataModel_MetricDimensions
      parameters:
        - name: metricId
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the dimensions to retrieve. Default is all dimensions.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.DimensionsDTO'
  /v1/data/model/metrics/{metricId}/selection-concepts:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric's selection concepts
      description: Retrieve a list of selection concepts for a specific metric.
      operationId: DataModel_MetricSelectionConcepts
      parameters:
        - name: metricId
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the selection concepts to retrieve. Default is all selection concepts.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptsDTO'
  /v1/data/model/plan-models:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of planning models
      description: Retrieve all the planning models you have access to.
      operationId: DataModel_PlanningModels
      parameters:
        - name: id
          in: query
          description: The IDs of the planning models to retrieve. Default is all models.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PlanningModelsDTO'
  /v1/data/model/plan-models/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a planning model by ID
      description: Retrieve a specific planning model you have access to.
      operationId: DataModel_PlanningModel
      parameters:
        - name: id
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PlanningModelDTO'
  /v1/data/model/plan-models/{id}/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve metrics by planning model ID
      description: Retrieve all the metrics you have access to for a planning model.
      operationId: DataModel_PlanningMetrics
      parameters:
        - name: id
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.MetricsDTO'
  /v1/data/model/plan-models/{modelId}/plans:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of plans by planning model ID
      description: Retrieve all the plans you have access to for a planning model.
      operationId: DataModel_PlanningPlans
      parameters:
        - name: modelId
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the plans to retrieve. Default is all plans.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PlanningPlansDTO'
  /v1/data/model/plan-models/{modelId}/plans/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a plan by planning model ID and plan ID
      description: Retrieve a specific plan that you have access to in a planning model.
      operationId: DataModel_PlanningPlan
      parameters:
        - name: modelId
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the plan to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PlanningPlanDTO'
  /v1/data/model/predictions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of predictions
      description: Retrieve all the predictions in your Visier solution.
      operationId: DataModel_Predictions
      parameters:
        - name: id
          in: query
          description: The IDs of the predictions to retrieve. Default is all predictions.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PredictionsDTO'
  /v1/data/model/predictions/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a prediction by ID
      description: If you know the ID of a prediction, use this API to retrieve that prediction specifically.
      operationId: DataModel_Prediction
      parameters:
        - name: id
          in: path
          description: The ID of the prediction to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.datamodel.PredictionDTO'
  /v1/data/model/properties:
    put:
      tags:
        - DataModel
      summary: Replace properties
      description: |-
        Update existing properties by replacing their entire definition. The definition in your API call replaces the property's prior definition. You must provide the entire definition in the PUT call. If you omit values from the update request, those values are removed from the property. We recommend that you retrieve a property's details before you update the property with new values. This operation does not create new properties if they do not exist.
         In each API request, update up to 10 properties per tenant with a maximum of 500 tenants.
         To specify the tenant in which to update a property, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header or `tenantCode` for each property in the request body.
         To specify the project in which to update properties, provide a project UUID in the `ProjectID` request header or `projectId` for each property in the request body.
      operationId: DataModel_PutProperties
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.objectconfiguration.PropertiesChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.objectconfiguration.ObjectsBulkChangeResponseDTO'
    post:
      tags:
        - DataModel
      summary: Create properties
      description: Create new properties. Administrating tenant users can specify the tenant in which to add these properties.
      operationId: DataModel_CreateProperties
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.objectconfiguration.PropertiesChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.objectconfiguration.ObjectsBulkChangeResponseDTO'
    delete:
      tags:
        - DataModel
      summary: Delete properties
      description: |-
        Delete existing properties. Administrating tenant users can specify the tenant in which to delete the properties.
         In each API request, delete up to 10 properties per tenant with a maximum of 500 tenants.
      operationId: DataModel_DeleteProperties
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.objectconfiguration.PropertiesDeleteDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.objectconfiguration.PropertyBulkDeleteResponseDTO'
    patch:
      tags:
        - DataModel
      summary: Update properties
      description: Change the display name, short display name, and description of one or more properties. In each API request, update up to 10 properties per tenant with a maximum of 500 tenants.
      operationId: DataModel_UpdateProperties
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.objectconfiguration.PropertiesChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.objectconfiguration.ObjectsBulkChangeResponseDTO'
  /v1/data/query/aggregate:
    post:
      tags:
        - DataQuery
      summary: Query aggregate data
      description: |-
        To retrieve aggregated values from your data in Visier, you can perform an aggregation. Usually, an aggregation
         retrieves values over a period of time, such as multiple months. You can also group and filter your data in an
         aggregation query to retrieve detailed information.
      operationId: DataQuery_Aggregate
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataservices.query.AggregationQueryExecutionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: Aggregate query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataservices.query.CellSetOrErrorDTO'
            application/jsonlines:
              schema:
                type: string
            text/csv:
              schema:
                type: string
  /v1/data/query/list:
    post:
      tags:
        - DataQuery
      summary: Query a list of details
      description: |-
        To retrieve a list of values for specific objects, you can perform a list query. A list query provides information
         about values for selected data points, and is not an aggregated value. In Visier's interface, a list query is
         comparable to View Details for a specific data point in a visualization.
      operationId: DataQuery_List
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataservices.query.ListQueryExecutionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: List query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_out.ListResponse'
            application/jsonlines:
              schema:
                type: string
            text/csv:
              schema:
                type: string
  /v1/data/query/snapshot:
    post:
      tags:
        - DataQuery
      summary: Query a series of detailed snapshots
      description: |-
        To retrieve a collection of `list` query-style snapshots taken at the defined intervals, execute a `snapshot` query.
         Each snapshot in the result is associated with a timestamp, or the "effective date" at which date snapshot data was valid.
         This API allows you to request a detailed time series from Visier.

         Structurally, a `snapshot` query is similar to a `list` query, but has the following differences:
         * The `snapshot` query may contain a column, `effectiveDateProperty`, that specifies the time for each snapshot. To include the `effectiveDateProperty` column, add the following object to the columns array:
            ```json
            {
                "columnName": "Snapshot_Date",
                "columnDefinition": {
                    "effectiveDateProperty": {}
                }
            }
            ```
         * The `snapshot` query uses `timeIntervals` (like an `aggregate` query) instead of `timeInterval` (like a `list` query) because the `snapshot` query
            must specify the number of snapshots to generate. To specify the number of snapshots to generate, use the `intervalCount` property in the `timeIntervals` object, as shown next.
            ```json
            {
                "timeIntervals": {
                "fromDateTime": "2022-01-01",
                "intervalPeriodType": "MONTH",
                "intervalPeriodCount": 6,
                "intervalCount": 4
            }
            ```
      operationId: Query_Snapshot
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataservices.query.SnapshotQueryExecutionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: List query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_out.ListResponse'
            application/jsonlines:
              schema:
                type: string
            text/csv:
              schema:
                type: string
  /v1/data/query/sql:
    post:
      tags:
        - DataQuery
      summary: Query aggregate or list data using SQL-like syntax
      description: |-
        To retrieve a list of values for specific objects or aggregate values from metrics, you can write queries using SQL-like syntax.
         The response format matches the query type whether aggregate or list. If requested, aggregate query results may be flattened into tabular format.

         A SQL-like query is an aggregate if it contains at least one metric. Aggregate queries must specify a time interval divided into periods; for example:
         ```sql
         SELECT
           employeeCount() AS "Employee Count",
           level(Gender, "Gender") AS Gender
         FROM
           Employee
         WHERE
          Visier_Time IN periods(date("2023-01-01"), 4, period(3, Month));
         ```

         A SQL-like query is a list if it does not contain any metrics. List queries define time intervals as simple intervals; for example:
         ```sql
         SELECT
           EmployeeID AS "Employee ID",
           level(Gender, "Gender") AS Gender
         FROM
           Employee
         WHERE
          Visier_Time BETWEEN date("2022-01-01") AND date("2023-01-01");
         ```
      operationId: DataQuery_SqlLike
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataservices.query.SqlLikeQueryExecutionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: List query response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TableResponseDTO'
                  - $ref: '#/components/schemas/dataservices.query.CellSetDTO'
            application/jsonlines:
              schema:
                type: string
            text/csv:
              schema:
                type: string
  /v1/op/data-connector-credentials:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a list of all data connector credentials
      description: |-
        Retrieve a list of the connector credentials in a specified tenant. Connector credentials allow
         Visier to retrieve data from your source systems through an integration user in the source system.
      operationId: DataAndJobHandling_DataConnectorCredentials
      parameters:
        - name: tenantCode
          in: query
          description: The tenant code of a specific analytic tenant that you want to retrieve for.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.ExtractorCredentialsAPIDTO'
    post:
      tags:
        - DataAndJobHandling
      summary: Create a connector credential
      description: "Create credentials for a data connector. Connector credentials allow Visier to retrieve data from your source systems through an integration user in the source system. \n \n In the request body, specify one data provider in the `dataProviderAuthParams` parameter. For example, to create connector credentials for a UKG data connector, your request body might look like the following sample.\n ```json\n {\n   model={\n     \"dataProviderAuthParams\": {\n        \"provider\": \"UKG\",\n        \"ultimateAuthParams\": {\n           \"hostDomainName\": \"exampleHostDomain\",\n           \"apiKey\": \"apiKey1234\",\n           \"username\": \"username1234\",\n           \"password\": \"password1234\",\n           \"userAccessKey\": \"accessKey1234\"\n        }\n     },\n     \"dataProviderBasicInformation\": {\n        \"displayName\": \"exampleDisplayName\",\n        \"description\": \"exampleDescription\"\n     }\n }\n ```"
      operationId: DataAndJobHandling_CreateConnectorCredential
      parameters:
        - name: tenantCode
          in: query
          description: The tenant code of a specific analytic tenant that you want to create the credential for.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.DataProviderAuthInformationDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.CredentialCreationAPIResponseDTO'
  /v1/op/data-connectors:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a list of all data connectors
      description: |-
        Retrieve a list of the data connectors in a specified tenant. Data connectors are an alternative
         to generating flat files and transferring them to Visier via SFTP.
      operationId: DataAndJobHandling_DataConnectors
      parameters:
        - name: tenantCode
          in: query
          description: The tenant code of a specific analytic tenant that you want to retrieve for.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.data.ImportDefinitionsAPIDTO'
  /v1/op/data-connectors/assignCredentials:
    post:
      tags:
        - DataAndJobHandling
      summary: Assign connector credentials to data connectors
      description: Assign a connector credential to a data connector.
      operationId: DataAndJobHandling_AssignConnectorCredential
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/data_in.AssignConnectorCredentialRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.AssignConnectorCredentialsResponseDTO'
  /v1/op/data-connectors/connector-settings:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve data connector settings
      description: Get a list of settings for all data connectors. This request retrieves data connectors from the production environment. The response returns a list of settings, if available, for each data connector in the tenant.
      operationId: DataAndJobHandling_ListConnectorSettings
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ExtractorSettingsAPIDTO'
    put:
      tags:
        - DataAndJobHandling
      summary: Update data connector settings
      description: Define the settings for one or more data connectors. To find the available settings, see `Retrieve data connector settings`.
      operationId: DataAndJobHandling_SetConnectorSetting
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.SetConnectorSettingsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.SetConnectorSettingsResponseDTO'
  /v1/op/data-sources:
    get:
      tags:
        - DataIntake
      summary: Retrieve a list of sources
      description: |-
        Prior to transferring data to Visier, you must identify the sources you want to target. Sources store data for
         the solution and are used to map data to Visier's data model.

         **Note:** To set up sources in your tenant, contact Visier Customer Success.
         This API allows you to query the list of available sources, and identify the source schema and required fields.
      operationId: DataIntake_GetSources
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.PushDataSourceDefinitionsDTO'
  /v1/op/data-transfer-sessions:
    post:
      tags:
        - DataIntake
      summary: Start a transfer session
      description: |-
        Start a new transfer session. A transfer session can include one or more batches of records to be
         sent to Visier. Batches of records may be transferred as JSON or file payloads.

         Recommended: For optimal performance, please include all batches of records in a single transfer session.
      operationId: DataIntake_StartTransfer
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.StartTransferResponse'
  /v1/op/data-transfer-sessions/{transferSessionId}/add:
    put:
      tags:
        - DataIntake
      summary: Transfer data to sources via JSON
      description: |-
        Transfer data to Visier in batches of records. Each request includes a batch of records
         formatted as a comma separated array with the first row containing the column headers in the request body. Each
         subsequent request should also include the first row as a header.

         Each request transfers a batch of records to a single source. Transfer sessions may include one or more batches before completion.

         Each batch is identified by a sequence number. Sequence numbers help identify any batches  that were delivered incorrectly.

         Each batch is limited to the following request size:
         - Batch size limit: 10 MB
         - Record count limit: 300,000 rows
      operationId: DataIntake_PushData
      parameters:
        - name: transferSessionId
          in: path
          description: The transfer session ID returned after the data transfer session starts.
          required: true
          schema:
            type: string
        - name: sourceId
          in: query
          description: The unique identifier associated with the source you want to transfer data to.
          schema:
            type: string
        - name: sequence
          in: query
          description: The unique sequence number associated with a batch of records.
          schema:
            type: integer
            format: uint32
        - name: tenantCode
          in: query
          description: The code of the tenant you want to transfer data to. For example, WFF_j1r or WFF_j1r~c7o.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.PushDataResponse'
  /v1/op/data-transfer-sessions/{transferSessionId}/cancel:
    put:
      tags:
        - DataIntake
      summary: Cancel a transfer session
      description: |-
        Cancel a transfer session after starting it. If a transfer session is cancelled, all
         records within the transfer session do not persist in Visier's data store.

         If you cancel a transfer session, please start a new transfer session and resend the complete data set.

         You might cancel a transfer session if:
         - A request to send a batch of records failed.
         - The original set of records is incomplete.
         - An infrastructure error occurs.
      operationId: DataIntake_PushDataCancel
      parameters:
        - name: transferSessionId
          in: path
          description: The transfer session ID to cancel.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.PushDataCancelResponse'
  /v1/op/data-versions:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve the latest enabled data versions for all analytic tenants
      description: |-
        If you discover any inconsistencies after running metric value validation, you may want to find the data versions
         causing inconsistencies so you can later disable them.

         Retrieve up to five (5) of the latest enabled data versions for all your analytic tenants or a
         single specified analytic tenant.
      operationId: DataAndJobHandling_LatestEnabledDV
      parameters:
        - name: tenantCode
          in: query
          description: |-
            The tenant code of a specific analytic tenant that you want to retrieve data versions for.
             Use this if you are only interested in the results for one analytic tenant.
          schema:
            type: string
        - name: limit
          in: query
          description: |-
            The limit of analytic tenants to retrieve data versions for.
             This parameter is not used if the tenantCode parameter is specified.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: numberOfVersions
          in: query
          description: The number of latest enabled data versions to retrieve. The maximum value is 5.
          schema:
            type: integer
            format: int32
        - name: dataCategory
          in: query
          description: |-
            The object name of the data category. Default is the primary data category.
             For administrating tenants, the data category must exist in the requesting tenant; that is, the administrating tenant or the tenant specified in `TargetTenantID`.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.MultipleTenantDataVersionsListDTO'
  /v1/op/data-versions/disable:
    put:
      tags:
        - DataAndJobHandling
      summary: Disable data versions for a list of analytic tenants
      description: |-
        If you discover that a data version is not what is expected after running metric value validation on a data load,
         you may want to disable the data version for that processing job.

         Disable the latest enabled data versions for affected analytic tenants or to disable a particular
         data version for each analytic tenant.

         **Note:** Disabling an older data version may not have an effect on the state of the solution.
      operationId: DataAndJobHandling_DisableDV
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/data_in.DisableDVRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.DisableDVResponse'
  /v1/op/data/categories:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a list of all data categories
      description: Retrieve a list of all available data categories.
      operationId: DataAndJobHandling_RetrieveDataCategories
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DataCategoriesResponseDTO'
  /v1/op/data/startExtractAndLoad:
    post:
      tags:
        - DataAndJobHandling
      summary: Trigger data connector extraction jobs
      description: "Run data connector extraction jobs for the administrating tenant or a list of analytic tenants.\n \n This API creates a dispatching job that generates one extraction job per tenant. The dispatching job is the \"parent\" of the extraction jobs and the dispatching job ID is returned in the response. Use that ID to monitor the extraction job statuses by calling `GET /v1/op/jobs/dispatching-jobs/{jobId}/extraction-jobs`.\n\n The extraction job generates receiving jobs to validate the data and processing jobs to populate data in the analytic tenants. Use the dispatching job ID to monitor the receiving and processing job statuses by calling `GET /v1/op/jobs/dispatching-jobs/{jobId}/receiving-jobs` or `GET /v1/op/jobs/dispatching-jobs/{jobId}/processing-jobs`."
      operationId: DataAndJobHandling_StartExtraction
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.jobs.ExtractDataAndLoadDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.StartExtractionResponse'
  /v1/op/data/startload:
    post:
      tags:
        - DataAndJobHandling
      summary: Start the data load for analytic tenants
      description: |-
        This API starts the data load process for all analytic tenants included in the specified data files uploaded
         to the Visier SFTP server. On success, you receive a job ID that can be filtered and searched for within the
         Jobs room in Visier. This job ID is associated with the receiving job, and related to all processing jobs that
         spawn for each analytic tenant.

         With the job ID, you can also call the next two APIs to retrieve the status of the receiving job and the status
         list of all related processing jobs.

         **Prerequisite:** You must first obtain a PGP public encryption key and upload the source data files to Visier's
         SFTP server. Files must have a .zip.gpg extension, meaning the files are encrypted using the PGP protocol and compressed.

         Visier provides ways to generate PGP key pairs and download the public key to encrypt your data files. You can either use
         the PGP Keys API or, in Visier, navigate to **Settings > Manage PGP Keys**.

         **Note:**
          - To see the full status of all analytic tenant data loads, navigate to the Jobs room in a project.
          - For performance and efficiency, Visier requires that the uncompressed batch file size is below 5 GB and that no
            more than 5000 tenants are included in a batch.
      operationId: DataAndJobHandling_StartLoad
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/data_in.DataLoadRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.DataLoadResponse'
  /v1/op/data/uploads:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve data uploads
      description: |-
        Retrieve the data uploads and whether they're included in one of:
         - A list of analytic tenants managed by you.
         - A single specified analytic tenant.
         - A receiving job.
      operationId: DataAndJobHandling_RetrieveDataUploads
      parameters:
        - name: uploadJobId
          in: query
          description: The job ID of an upload job. Use this if you are interested in the data uploads for a specific upload job.
          schema:
            type: string
        - name: tenantCode
          in: query
          description: The tenant code of a specific analytic tenant that you want to retrieve the data uploads for.
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: The limit of analytic tenants to retrieve data uploads for. This parameter is not used if the tenantCode parameter is specified. Default is 1000.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: numberOfDataUploads
          in: query
          description: The maximum number of latest enabled data uploads to retrieve for each analytic tenant. The maximum value is 5. Default is 1.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.TenantDataUploadsListResponseDTO'
  /v1/op/data/uploads/exclude:
    put:
      tags:
        - DataAndJobHandling
      summary: Exclude data uploads
      description: Exclude either a specified list of data uploads or all data uploads for each analytic tenant.
      operationId: DataAndJobHandling_ExcludeDataUplaods
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/data_in.ExcludeDataUploadsRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.TenantDataUploadsUpdateResponseDTO'
  /v1/op/data/uploads/include:
    put:
      tags:
        - DataAndJobHandling
      summary: Include data uploads
      description: Include either the specified list of data uploads or all data uploads for each analytic tenant.
      operationId: DataAndJobHandling_IncludeDataUploads
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/data_in.IncludeDataUploadsRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.TenantDataUploadsUpdateResponseDTO'
  /v1/op/job-status/jobs:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve the statuses of all jobs
      description: Retrieve the list of statuses for all jobs.
      operationId: DataAndJobHandling_JobStatus
      parameters:
        - name: startTime
          in: query
          description: The start time from which to retrieve job statuses.
          schema:
            type: string
        - name: endTime
          in: query
          description: The end time from which to retrieve job statuses.
          schema:
            type: string
        - name: status
          in: query
          description: The specific status to restrict the list of jobs to.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.JobStatusListResponse'
  /v1/op/jobs/cancel:
    post:
      tags:
        - DataAndJobHandling
      summary: Cancel a list of jobs
      description: |-
        Cancel a list of processing jobs, receiving jobs, and extraction jobs.

         **Note:** Receiving jobs with the Running status cannot be cancelled.
      operationId: DataAndJobHandling_CancelJobs
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dp.CancelJobBatchFromJobIdDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dp.JobCancellationResultsDTO'
  /v1/op/jobs/dispatching-jobs/{jobId}:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a dispatching job's status
      description: Retrieve the status of a dispatching job, including its job ID and the number of jobs it generated.
      operationId: DataAndJobHandling_DispatchingJobStatus
      parameters:
        - name: jobId
          in: path
          description: The ID of the job you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.DispatchingJobStatusResponse'
  /v1/op/jobs/dispatching-jobs/{jobId}/extraction-jobs:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a dispatching job's extraction jobs with their statuses
      description: |-
        Retrieve the statuses of extraction jobs associated with a dispatching job. The dispatching job
         is a "parent" to extraction jobs, which retrieve data from your source systems through data connectors.
      operationId: DataAndJobHandling_ExtractionJobAndStatus
      parameters:
        - name: jobId
          in: path
          description: The ID of the dispatching job you want to retrieve.
          required: true
          schema:
            type: string
        - name: dispatchingJobId
          in: query
          description: The ID of the dispatching job that generated the extraction jobs.
          schema:
            type: string
        - name: tenantCode
          in: query
          description: |-
            The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.
             Use this if you are only interested in the results for one analytic tenant.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of extraction job statuses to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.ExtractionJobAndStatusResponse'
  /v1/op/jobs/dispatching-jobs/{jobId}/processing-jobs:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a dispatching job's processing jobs with their statuses
      description: |-
        Retrieve the statuses of processing jobs associated with a dispatching job. The dispatching job
         is a "parent" to extraction jobs, which in turn generate processing jobs and receiving jobs.
      operationId: DataAndJobHandling_ProcessingJobAndStatus
      parameters:
        - name: jobId
          in: path
          description: The ID of the dispatching job you want to retrieve.
          required: true
          schema:
            type: string
        - name: dispatchingJobId
          in: query
          description: The ID of the dispatching job that generated the extraction jobs.
          schema:
            type: string
        - name: tenantCode
          in: query
          description: |-
            The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.
             Use this if you are only interested in the results for one analytic tenant.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of extraction job statuses to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.ProcessingJobAndStatusResponse'
  /v1/op/jobs/dispatching-jobs/{jobId}/receiving-jobs:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a dispatching job's receiving jobs with their statuses
      description: |-
        Retrieve the statuses of receiving jobs associated with a dispatching job. The dispatching job
         is a "parent" to extraction jobs, which in turn generate processing jobs and receiving jobs.
      operationId: DataAndJobHandling_ReceivingJobAndStatus
      parameters:
        - name: jobId
          in: path
          description: The ID of the dispatching job you want to retrieve.
          required: true
          schema:
            type: string
        - name: dispatchingJobId
          in: query
          description: The ID of the dispatching job that generated the extraction jobs.
          schema:
            type: string
        - name: tenantCode
          in: query
          description: |-
            The tenant code of a specific analytic tenant that you want to retrieve the extraction job status for.
             Use this if you are only interested in the results for one analytic tenant.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of extraction job statuses to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.ReceivingJobAndStatusResponse'
  /v1/op/jobs/processing-jobs/{receivingJobId}:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve processing job statuses by receiving job ID
      description: |-
        Retrieve a list of statuses for all processing jobs associated with the given receiving job ID.
         Processing jobs deal with an individual analytic tenant's data load. A processing job is either triggered through
         the UI or is one of many processing jobs spawned from a receiving job. When a processing job is triggered as part
         of a set from an receiving job, it is associated to the receiving job through a Parent ID.
      operationId: DataAndJobHandling_ProcessingJobStatus
      parameters:
        - name: receivingJobId
          in: path
          description: The receiving job ID
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: |-
            The tenant code of the tenant you want to retrieve the processing jobs for.
             Use this if you are only interested in the results for one analytic tenant.
          schema:
            type: string
        - name: limit
          in: query
          description: The limit of processing jobs to retrieve per page.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.ProcessingJobStatusResponse'
  /v1/op/jobs/receiving-jobs:
    post:
      tags:
        - DataIntake
      summary: Complete a transfer session
      description: |-
        Complete the specified transfer session by triggering a receiving job. A receiving job
         validates the transferred data and adds the transferred data to Visier's data store.

         You can set an optional parameter to generate a data version through a processing job immediately after the receiving job completes.
      operationId: DataIntake_PushDataComplete
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/data_in.PushDataCompleteRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.PushDataCompleteResponse'
  /v1/op/jobs/receiving-jobs/{receivingJobId}:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a receiving job's status
      description: "After sending data to Visier, you may want to know the status of the receiving job and the associated tenant\n receiving jobs. A receiving job validates the transferred data and adds the transferred data to Visier's data\n store. \n\n A successful response indicates that the receiving job was successful. To get the status of the jobs spawned by the receiving job, set the `jobs` parameter to `true`."
      operationId: DataAndJobHandling_ReceivingJobStatus
      parameters:
        - name: receivingJobId
          in: path
          description: The jobId provided after sending data to Visier.
          required: true
          schema:
            type: string
        - name: jobs
          in: query
          description: If `true`, returns the status of receiving jobs spawned by the receiving job specified by `jobId`.
          schema:
            type: boolean
        - name: tenantCode
          in: query
          description: |-
            The tenant code of the tenant you want to retrieve the receiving jobs for. Use this if you are only interested
             in the results for one analytic tenant.
          schema:
            type: string
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: The number of job statuses to return per page.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.ReceivingJobStatusResponse'
  /v1/op/validation/tenants:
    get:
      tags:
        - TenantsV1
      summary: Validate metric values for all analytic tenants
      description: |-
        As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the
         source systems from which it was exported and that it matches what your expectations are for this data.

         The metric values included in the response are the tenant's configured summary metrics. Administrators can
         configure summary metrics in a project:
         - Sign in to Visier as an administrator.
         - In a project, on the navigation bar, click the **Home** button.
         - Click **Dashboard**, and then click **Edit Summary Metrics**.
         - Select the metrics that you want to validate, and then close the **Summary Metrics** dialog.
         - Publish the project to production.
      operationId: TenantsV1_ValidateTenants
      parameters:
        - name: limit
          in: query
          description: The limit of analytic tenant details to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dp_automation.TenantPreviewEntriesSummaryListDTO'
  /v1/op/validation/tenants/{tenantId}:
    get:
      tags:
        - TenantsV1
      summary: Validate an analytic tenant's metric values
      description: |-
        Retrieve the metric values for an individual analytic tenant. The metric values included in the
         response are the tenant's configured summary metrics. Administrators can configure summary metrics in a project:
         - Sign in to Visier as an administrator.
         - In a project, on the navigation bar, click the **Home button**.
         - Click **Dashboard**, and then click **Edit Summary Metrics**.
         - Select the metrics that you want to validate, and then close the **Summary Metrics** dialog.
         - Publish the project to production.
      operationId: TenantsV1_ValidateTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dp_automation.TenantPreviewEntriesSummaryDTO'
  /v1/vee/status:
    get:
      tags:
        - Vee
      summary: Check the overall current status of Vee
      description: |-
        Check the current overall status of Vee.

         The overall status is one of:
         * `UP` :  Vee is operational.
         * `DOWN`: Vee is not operational.
      operationId: Vee_VeeStatus
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemstatus.VeeStatusDTO'
  /v1alpha/admin/api-network-subnets:
    get:
      tags:
        - NetworkSubnets
      summary: Retrieve a list of API network subnets
      description: |-
        Retrieve a list of all IP addresses that can call Visier APIs.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_GetApiSubnets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
    put:
      tags:
        - NetworkSubnets
      summary: Update API network subnets
      description: |-
        Overwrite the existing list of IP addresses that can call Visier APIs with a new list. IP addresses must use the Classless Inter-Domain Routing (CIDR) format: xxx.xxx.xxx.xxx/xx.

         When updating allowed network subnets, the definition in your API call replaces the prior definition. You must provide the entire definition in the PUT call. If you omit IP addresses from the update request, those IP addresses are removed from the allowlist We recommend that you retrieve the current list of allowed network subnets before you update the list.

         **Note**: By updating the allowed network subnets, you may remove your current IP address from the allowlist. If this happens, you will lock yourself out from making additional API calls. Visier does not allow lock outs unless you set `confirmLockout` to `true`. Default is `false`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_SetApiSubnets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.NetworkSubnetsMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
    post:
      tags:
        - NetworkSubnets
      summary: Add API network subnets
      description: |-
        Add IP addresses to the list of allowed network subnets that can call Visier APIs. IP addresses must use the Classless Inter-Domain Routing (CIDR) format: xxx.xxx.xxx.xxx/xx.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_AddApiSubnets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.NetworkSubnetsMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
    delete:
      tags:
        - NetworkSubnets
      summary: Delete API network subnets
      description: |-
        Remove IP addresses from the list of allowed network subnets that can call Visier APIs. IP addresses must use the Classless Inter-Domain Routing (CIDR) format: xxx.xxx.xxx.xxx/xx.

         When updating allowed network subnets, the definition in your API call replaces the prior definition. You must provide the entire definition in the PUT call. If you omit IP addresses from the update request, those IP addresses are removed from the allowlist We recommend that you retrieve the current list of allowed network subnets before you update the list.

         **Note**: By deleting the allowed network subnets, you may remove your current IP address from the allowlist. If this happens, you will lock yourself out from making additional API calls. Visier does not allow lock outs unless you set `confirmLockout` to `true`. Default is `false`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_DeleteApiSubnets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.NetworkSubnetsMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
  /v1alpha/admin/consolidated-analytics/tenants:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve a list of all consolidated analytics tenants
      description: |-
        Retrieve the full list of consolidated analytics tenants in your administrating tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListTenants
      parameters:
        - name: limit
          in: query
          description: The maximum number of tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantListResponseDTO'
    post:
      tags:
        - ConsolidatedAnalytics
      summary: Create a consolidated analytics tenant
      description: |-
        Create a consolidated analytics tenant.

         A new CA tenant has no source tenants and no excluded sources.

         **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
         is the consolidated analytic tenant code.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_CreateTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantCreateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantCreateRequestDTO'
  /v1alpha/admin/consolidated-analytics/tenants-with-details:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve the details of all consolidated analytics tenants
      description: |-
        Retrieve the full list of consolidated analytics tenants and their details in your administrating tenant.

         **Note:** If your consolidated analytics tenants have thousands of source tenants, we recommend that you use the `GET /admin/consolidated-analytics/tenants` endpoint to get all CA tenants and then use the `GET /admin/consolidated-analytics/tenants/{tenantId}/source-tenants` and `GET /admin/consolidated-analytics/tenants/{tenantId}/excluded-sources` endpoints to retrieve information about specific CA tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListTenantsWithDetails
      parameters:
        - name: limit
          in: query
          description: The maximum number of tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantWithDetailsListResponseDTO'
  /v1alpha/admin/consolidated-analytics/tenants/{tenantId}/excluded-sources:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve a consolidated analytics tenant's excluded sources
      description: |-
        Retrieve a CA tenant's excluded sources.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
    put:
      tags:
        - ConsolidatedAnalytics
      summary: Set a consolidated analytics tenant's excluded sources
      description: |-
        Define the excluded sources for a consolidated analytics tenant.

         After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.
         You can also use this API to replace the list of excluded sources for an existing CA tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_SetExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ExcludedSourcesBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
    delete:
      tags:
        - ConsolidatedAnalytics
      summary: Remove excluded sources from a consolidated analytics tenants
      description: |-
        Remove excluded sources from the list of excluded sources for a consolidated analytics tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_RemoveExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ExcludedSourcesBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
    patch:
      tags:
        - ConsolidatedAnalytics
      summary: Add excluded sources to a consolidated analytics tenant
      description: |-
        Add excluded sources to the list of excluded sources for a consolidated analytics tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_AddExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ExcludedSourcesBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
  /v1alpha/admin/consolidated-analytics/tenants/{tenantId}/source-tenants:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve a consolidated analytics tenant's source tenants
      description: |-
        Retrieve a CA tenant's source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first source tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
    put:
      tags:
        - ConsolidatedAnalytics
      summary: Set a consolidated analytics tenant's source tenants
      description: |-
        Define the source tenants for a consolidated analytics tenant.

         After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.
         You can also use this API to replace the list of source tenants for an existing CA tenant.

         If successful, the response returns an updated list of source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_SetSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantCodeBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
    delete:
      tags:
        - ConsolidatedAnalytics
      summary: Remove source tenants from a consolidated analytics tenants
      description: |-
        Remove source tenants from the list of source tenants for a consolidated analytics tenant.

         If successful, the response returns an updated list of source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_RemoveSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantCodeBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
    patch:
      tags:
        - ConsolidatedAnalytics
      summary: Add source tenants to a consolidated analytics tenant
      description: |-
        Add source tenants to the list of source tenants for a consolidated analytics tenant.

         If successful, the response returns an updated list of source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_AddSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantCodeBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
  /v1alpha/admin/email-domains:
    get:
      tags:
        - EmailDomains
      summary: Retrieve a list of allowed email domains
      description: |-
        Retrieve the full list of allowed email domains.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EmailDomains_ListAllowedEmailDomains
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.EmailDomainsDTO'
    put:
      tags:
        - EmailDomains
      summary: Add domains to the list of allowed domains
      description: |-
        Add email address domains to the allowed domains list. The response returns an updated list of allowed email domains.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EmailDomains_AddAllowedEmailDomains
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.EmailDomainsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.EmailDomainsDTO'
    delete:
      tags:
        - EmailDomains
      summary: Remove domains from the list of allowed domains
      description: |-
        Delete email address domains from the allowed domains list. The response returns an updated list of allowed email domains.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EmailDomains_DeleteAllowedEmailDomains
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.EmailDomainsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.EmailDomainsDTO'
  /v1alpha/admin/encryption-keys:
    get:
      tags:
        - EncryptionKeys
      summary: Retrieve a list of all encryption keys
      description: |-
        Retrieve a list of all encryption keys. The response returns information about each key, including the key name, algorithm, user who generated the key, the generation date, and expiration date.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EncryptionKeys_ListAllEncryptionKeysMetadata
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.TenantEncryptionKeyDetailsDTO'
    post:
      tags:
        - EncryptionKeys
      summary: Generate an encryption key
      description: "Create an encryption key using a specific algorithm. The algorithm must be one of `HmacSHA224`, `HmacSHA256`, `HmacSHA384`, or `HmacSHA512`.\n \n In the request body, set the algorithm, give the key a display name and, optionally, set the UTC expiration date for the key pair in ISO-8601 format. Must be between 2 and 10 years. Default is 2 years.\n \n The maximum number of encryption keys per tenant is 5.\n\n <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.\n If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>"
      operationId: EncryptionKeys_GenerateEncryptionKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.crypto.GenerateKeyRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.TenantEncryptionKeyDTO'
  /v1alpha/admin/encryption-keys/{keyName}:
    delete:
      tags:
        - EncryptionKeys
      summary: Delete an encryption key
      description: |-
        Delete a specific encryption key.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EncryptionKeys_DeleteEncryptionKeys
      parameters:
        - name: keyName
          in: path
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 3 and 36 characters long.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.KeyName'
  /v1alpha/admin/product/releases:
    get:
      tags:
        - ReleaseVersionConfiguration
      summary: Retrieve available product releases
      description: |-
        Retrieve a list of release versions available for each product. The response returns information such as the unique ID of the product, the latest release version, and when the latest release version of the product will automatically be activated. Sometimes, the previous and latest versions are the same.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ReleaseVersionConfiguration_GetAvailableReleases
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ProductReleasesDTO'
  /v1alpha/admin/product/versions:
    get:
      tags:
        - ReleaseVersionConfiguration
      summary: Retrieve active product release versions
      description: |-
        Retrieve the currently active product release versions for a tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ReleaseVersionConfiguration_GetReleaseVersions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ProductVersionsDTO'
    patch:
      tags:
        - ReleaseVersionConfiguration
      summary: Activate product release versions
      description: |-
        Set the product release version to activate it on the selected tenants. Analytic tenants will automatically inherit the release version from the administrating tenant. You cannot rollback to a previous version.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ReleaseVersionConfiguration_SetReleaseVersions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ProductVersionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ProductVersionsUpdateResponseDTO'
  /v1alpha/data/data-version-exports/data-versions:
    get:
      tags:
        - DataVersionExport
      summary: Retrieve a list of all data versions
      description: |-
        Retrieve a list of all data versions in the tenant.

         **Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataVersionExport_GetAvailableDataVersions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvExportStatus'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DataVersionExportDataVersionsDTO'
  /v1alpha/data/data-version-exports/exports:
    get:
      tags:
        - DataVersionExport
      summary: Retrieve the details of all data version exports
      description: |-
        Retrieve the information for all available data version exports.
         **Note:** Data version exports are available for 14 days after export job completes.

         **Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataVersionExport_GetAvailableExports
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvExportStatus'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DataVersionExportsDTO'
  /v1alpha/data/data-version-exports/exports/{exportUuid}:
    get:
      tags:
        - DataVersionExport
      summary: Retrieve the details of a data version export
      description: |-
        Retrieve information for a specific data version export.
         **Note:** Data version exports are available for 14 days after export job completes.

         **Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataVersionExport_GetExport
      parameters:
        - name: exportUuid
          in: path
          description: The unique identifier of the data version export.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvExportStatus'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DataVersionExportDTO'
  /v1alpha/data/data-version-exports/jobs:
    post:
      tags:
        - DataVersionExport
      summary: Schedule a data version export job
      description: |-
        Schedule a data version export job. The job schedules immediately and will begin when resources are available. The response returns a `jobUuid` that you can use to check the export job status.

         **Note:** There is a limit of 10 export jobs per tenant per day.

         **Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataVersionExport_ScheduleExportJob
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.DataVersionExportScheduleJobRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvExportStatus'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DataVersionExportScheduleJobResponseDTO'
  /v1alpha/data/data-version-exports/jobs/{jobUuid}:
    get:
      tags:
        - DataVersionExport
      summary: Retrieve a data version export job's status
      description: |-
        Retrieve the status of a data version export job. After the job completes successfully, this endpoint returns an `exportUuid` that you can use to retrieve the export information and download export files.

         **Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataVersionExport_GetExportJobStatus
      parameters:
        - name: jobUuid
          in: path
          description: The unique identifier of the data version export job.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvExportStatus'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DataVersionExportJobStatusDTO'
  /v1alpha/data/model/vee/sample-question-categories:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of all Vee question categories
      description: |-
        Get a list of all categories for Vee sample questions. Administrating tenants can specify the tenant from which to retrieve categories using the `TargetTenantID` header.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_GetVeeSampleQuestionCategories
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.QuestionCategoriesAPIResponseDTO'
  /v1alpha/data/model/vee/sample-question-categories/{questionCategoryId}:
    get:
      tags:
        - DataModel
      summary: Retrieve a Vee question category's details
      description: |-
        Get the details of a specific Vee sample question category where the ID is the `categoryID` returned by `GET /v1alpha/data/model/vee/sample-question-categories`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_GetVeeSampleQuestionCategory
      parameters:
        - name: questionCategoryId
          in: path
          description: The ID of the Vee sample question category to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.QuestionCategoryAPIResponseDTO'
  /v1alpha/data/model/vee/sample-questions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of all Vee sample questions
      description: |-
        Get a list of all Vee sample questions for a tenant, including sample questions that are not available to end users. Administrating tenants can specify the tenant from which to retrieve sample questions using the `TargetTenantID` header.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_GetVeeSampleQuestions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.SampleQuestionsAPIResponseDTO'
    put:
      tags:
        - DataModel
      summary: Update Vee sample questions
      description: |-
        Update existing sample questions, such as its question category or whether the question is visible in Vee. Administrating tenants can specify the tenant in which to update sample questions using the `TargetTenantID` header.
         When updating sample questions, the question definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values for optional fields from the update request, the values reset to their respective default value. We recommend that you retrieve a question's details before you update the question with new values.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_PutVeeSampleQuestions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.VeeQuestionsChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.VeeQuestionsBulkChangeResponseDTO'
    post:
      tags:
        - DataModel
      summary: Add Vee sample questions
      description: "Create new sample questions that your users can ask Vee. Administrating tenants can specify the tenant in which to add sample questions using the `TargetTenantID` header.\n \n <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.\n If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>"
      operationId: DataModel_CreateVeeSampleQuestions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.VeeQuestionsChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.VeeQuestionsBulkChangeResponseDTO'
    delete:
      tags:
        - DataModel
      summary: Delete Vee sample questions
      description: |-
        Delete existing sample questions. Administrating tenants can specify the tenant in which to delete questions using the `TargetTenantID` header.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_DeleteVeeSampleQuestions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.VeeQuestionsDeleteDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.VeeQuestionsBulkChangeResponseDTO'
    patch:
      tags:
        - DataModel
      summary: Patch Vee sample questions
      description: |-
        Make partial changes to Vee sample questions. Administrating tenants can specify the tenant in which to patch questions using the `TargetTenantID` header.
         Unlike a `PUT` call, which completely replaces the sample question definition, use `PATCH` to change specific fields in the question without affecting omitted fields.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_UpdateVeeSampleQuestions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.VeeQuestionsChangeDefinitionsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.VeeQuestionsBulkChangeResponseDTO'
  /v1alpha/data/model/vee/sample-questions/{questionId}:
    get:
      tags:
        - DataModel
      summary: Retrieve a Vee sample question's details
      description: |-
        Get the details of a specific Vee sample question where the ID is the `questionID` returned by `GET /v1alpha/data/model/vee/sample-questions`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_GetVeeSampleQuestion
      parameters:
        - name: questionId
          in: path
          description: The ID of the Vee sample question to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.SampleQuestionAPIResponseDTO'
  /v1alpha/op/data/source-files:
    get:
      tags:
        - SourceFilesDownload
      summary: Download source files
      description: |-
        Download a tenant's source files. You can download all included source files or specify a list of sources to download. Use object names or unique identifiers to specify the list of sources. Excluded source files will not be downloaded.

         If `minTimestamp` and `maxTimestamp` are defined, downloads the source files uploaded within the specified time range for all sources or the specified sources.

         Administrating tenants can specify the tenant from which to download sources using the `TargetTenantID` header.

         **Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: SourceFilesDownload_DownloadSourceFiles
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.DownloadSourceFilesDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DownloadSourceFilesResponseDTO'
        "200":
          description: File contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.DownloadSourceFilesResponseDTO'
            application/zip:
              schema:
                type: string
                format: binary
  /v1alpha/op/jobs/consolidated-analytics-jobs:
    post:
      tags:
        - DataAndJobHandling
      summary: Run a consolidated analytics job
      description: Run a job for a consolidated analytics tenant. This request retrieves data for all source tenants in a consolidated analytics tenant. After the job completes, you can run a processing job to generate a data version for the consolidated analytics tenant. To run a processing job, see `POST /v1alpha/op/jobs/processing-jobs`.
      operationId: DataAndJobHandling_AdhocConsolidatedAnalyticsJob
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.jobs.ConsolidatedAnalyticsJobRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.JobIdResponse'
  /v1alpha/op/jobs/extraction-jobs:
    post:
      tags:
        - DataAndJobHandling
      summary: Run a data connector extraction job
      description: |-
        Run an extraction job to retrieve data through a Visier data connector and generate a new data version. Administrating tenants can run extraction jobs for all analytic tenants, a list of analytic tenants, or the administrating tenant.
         If running extraction jobs for an administrating tenant or their analytic tenants, this request starts a dispatching job that generates one extraction job per tenant. The response returns the job ID of the extraction job or dispatching job.
      operationId: DataAndJobHandling_AdhocExtractionJob
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.jobs.ExtractDataAndLoadDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.JobIdResponse'
  /v1alpha/op/jobs/processing-jobs:
    post:
      tags:
        - DataAndJobHandling
      summary: Run a processing job
      description: |-
        Run a processing job to generate a new data version. Administrating tenants can run processing jobs for all analytic tenants, a list of analytic tenants, or the administrating tenant.
         If running processing jobs for an administrating tenant or their analytic tenants, this request starts a dispatching job that generates one processing job per tenant. The response returns the job ID of the processing job or dispatching job.
      operationId: DataAndJobHandling_AdhocProcessingJobs
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.jobs.ProcessingJobRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.JobIdResponse'
  /v1alpha/planning/model/plans:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of plans
      description: |-
        Retrieve all the plans you have access to. The response returns plan information you can use to call the Planning Data Load API.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_PlanDataLoadlList
      parameters:
        - name: displayName
          in: query
          description: Returns plans that match the specified display name. Ignores text case and includes partial matches. For example, `displayName=WFP Plan` returns plans named "WFP Plan 2024", "WFP plan v1", and "WFP plan - Product".
          schema:
            type: string
        - name: model
          in: query
          description: Returns plans that belong to the specified planning model ID.
          schema:
            type: string
        - name: planStatus
          in: query
          description: |-
            Returns plans with the specified plan status. Valid values:
             - **ASSIGNED**: The subplan has been assigned to a subplanner.
             - **IN_PROGRESS**: The subplanner has opened the subplan.
             - **OVERDUE**: The subplan was not completed on time.
             - **SUBMITTED**: The subplan has been submitted for review.
             - **SENT_BACK**: The subplan was rejected and returned to the subplanner for editing.
             - **CONSOLIDATED**: The subplan has been accepted and combined into the primary plan.
          schema:
            type: string
        - name: createdStart
          in: query
          description: Returns plans created on or after this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: createdEnd
          in: query
          description: Return plans created on or before this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: editedStart
          in: query
          description: Returns plans edited on or after this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: editedEnd
          in: query
          description: Returns plans edited on or before this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: orderBy
          in: query
          description: |-
            Orders plan results by the specified value. Valid values:
             - **LAST_EDITED_DATE**: Orders plans by the last edited date. This is the default.
             - **CREATED_DATE**: Orders plans by the creation date.
             - **PLAN_MODEL**: Orders plans alphabetically by planning model.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sorts plan results by the specified value. Valid values are `ASCENDING` or `DESCENDING`. Default is `DESCENDING`.
          schema:
            type: string
        - name: excludeSubplans
          in: query
          description: If `true`, the response doesn't return subplans. Default is `true`.
          schema:
            type: boolean
        - name: maxResults
          in: query
          description: Sets the maximum number of results to return per page. Default is 50.
          schema:
            type: string
        - name: page
          in: query
          description: Sets the results page to return. If undefined, returns the first 50 results. To get the next 50 results, specify `page=2`.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/planning.GetPlanListResponseDTO'
  /v1alpha/planning/model/plans/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a plan's details
      description: |-
        Retrieve the details of a specific plan. The response returns plan information you can use to call the Planning Data Load API.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_PlanInfoWithSchema
      parameters:
        - name: id
          in: path
          description: The unique identifier of the plan.
          required: true
          schema:
            type: string
        - name: withSchema
          in: query
          description: If `true`, the response returns the plan's schema. Default is `false`.
          schema:
            type: boolean
        - name: segmentIdFilter
          in: query
          description: If defined, returns segment levels and members for the specified segment.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/planning.PlanWithSchemaDTO'
  /v1alpha/reporting/reports:
    get:
      tags:
        - Reporting
      summary: Retrieve a list of reports
      description: |-
        Retrieve a list of reports. The response returns information such as the unique ID, title, description, owner, and the allowed actions you can take on the report.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Reporting_GetReports
      parameters:
        - name: limit
          in: query
          description: Optionally, specify the number of reports to return. If omitted, the request uses the default value of 100.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: Optionally, specify the zero-based index of the report to start fetching from. If omitted, the request uses the default value of 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.ReportListResponseDTO'
    post:
      tags:
        - Reporting
      summary: Create a report
      description: |-
        Create a new report with a title and description. To edit other contents of the report, such as columns and group bys, navigate to the Reports room in Visier.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Reporting_CreateReport
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis.common.ReportCreateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.ReportDTO'
  /v1alpha/reporting/reports/{reportId}:
    get:
      tags:
        - Reporting
      summary: Retrieve a report's details
      description: |-
        Retrieve the details of a specific report. The response returns information such as title, description, owner, and the allowed actions you can take on the report. You must know the ID of the report to retrieve its details. To retrieve report IDs, see `GET /v1alpha/reporting/reports`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Reporting_GetReport
      parameters:
        - name: reportId
          in: path
          description: The unique identifier of the report you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.ReportDTO'
    post:
      tags:
        - Reporting
      summary: Duplicate a report
      description: |-
        Make a copy of an existing report. You must know the ID of the report to copy it. To retrieve report IDs, see `GET /v1alpha/reporting/reports`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Reporting_DuplicateReport
      parameters:
        - name: reportId
          in: path
          description: The unique identifier of the report you want to duplicate.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.ReportDTO'
    delete:
      tags:
        - Reporting
      summary: Delete a report
      description: |-
        Delete a report in the tenant. You must know the ID of the report to delete it. To retrieve report IDs, see `GET /v1alpha/reporting/reports`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Reporting_DeleteReport
      parameters:
        - name: reportId
          in: path
          description: The unique identifier of the report you want to delete.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.ReportDeleteSuccessDTO'
  /v1alpha/search/simple/document-headers:
    get:
      tags:
        - Search
      summary: Perform a simple search for Visier document headers
      description: |-
        Perform a simple search for Visier document headers, such as analysis titles. Simple search doesn't support keywords, Boolean expressions, or any other advanced search features.
         Example: `GET /v1alpha/search/simple/document-headers?q=My+Query&limit=10` returns the first 10 document headers that best match the query string `My Query`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Search_SimpleSearchDocumentHeaders
      parameters:
        - name: q
          in: query
          description: The search query string.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to return. Defaults to 100.
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: The index to start retrieving results from, also known as offset. Defaults to 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.SimpleDocumentHeaderSearchResponseDTO'
  /v1alpha/vee/feedback:
    post:
      tags:
        - Vee
      summary: Submit Vee feedback
      description: |-
        Give Vee feedback for a previous answer. To submit feedback, include:
         * The conversation details from the `/question` response.
         * A rating of Vee's answer. If `isApproved` is `true`, Vee answered the question correctly. If `isApproved` is `false`, Vee's answer was incorrect or lacked details.
         * A description of how Vee should have answered the question or how Vee can improve the answer, such as "Expected Headcount metric, but Vee returned Average Headcount".

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Vee_VeeFeedback
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis.common.VeeFeedbackDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.VeeStatusCodeDTO'
  /v1alpha/vee/question:
    post:
      tags:
        - Vee
      summary: Ask Vee a question
      description: |-
        Use plain language to ask Vee a people question. Use body parameters to specify how Vee should respond, such as returning a visualization, data, or rewording the question.

         The response always returns a `conversationState` object containing a unique ID for the conversation. To ask a follow-up question or continue the conversation with Vee, include the `conversationState` from the response in your next `/question` call. To submit feedback about Vee's answer, copy the entire response into your `/feedback` call.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Vee_VeeQuestionRequest
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/analysis.common.VeeQuestionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.VeeResponseDTO'
  /v1alpha/vee/sample-questions:
    get:
      tags:
        - Vee
      summary: Retrieve a list of sample questions to ask Vee
      description: |-
        Get a list of sample questions to help you start using Vee. The response returns a list of questions that you can ask Vee, such as "What is the turnover rate?".
         You may occasionally encounter a sample question that can't be answered due to data availability or your data access

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Vee_VeeSampleQuestions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/analysis.common.VeeSampleQuestionLibraryDTO'
  /v1beta/admin/sources:
    post:
      tags:
        - Sources
      summary: Perform an operation on all sources
      description: |-
        Perform operations on all sources. The following operations are supported:
         * `exportSources`: Export a ZIP file that contains a list of all sources in the application.
         * `cloneFilesIntoSource`: Clone a source's files into a different source.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Sources_RunSourcesOperation
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.SourcesAPIOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ExportSourcesAPIOperationResponseDTO'
    put:
      tags:
        - Sources
      summary: Import a list of sources
      description: |-
        Import a list of sources in ZIP format. The file must be an export from `POST /v1alpha/admin/sources`. Use this API after making changes in a development environment to copy the changes to a draft project in your production environment.

        <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
        If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Sources_PutSources
      parameters:
        - name: replaceAllExistingSources
          in: query
          description: If `false`, adds the sources from the ZIP to the sources in the target tenant. If `true`, removes all sources in the target tenant and adds the sources from the ZIP. Default is `false`.
          schema:
            type: boolean
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourcesAPIPutResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1beta/op/webhooks:
    get:
      tags:
        - Webhooks
      summary: Retrieve a list of webhooks
      description: |-
        Retrieve a list of all webhooks. The response returns each webhook's definition, such as its endpoint URL, active status, and event types.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_GetAllWebhooks
      parameters:
        - name: event
          in: query
          description: Retrieve all webhooks listening for the specified event type. Default is to retrieve all webhooks.
          schema:
            type: string
        - name: isActive
          in: query
          description: If `true`, retrieve active webhooks only. If `false`, retrieve active and inactive webhooks. Default is `false`.
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhooksDTO'
    post:
      tags:
        - Webhooks
      summary: Create a webhook
      description: |-
        Create a new webhook with Visier. You must specify the webhook's endpoint URL, its active status, the event types to listen for, and the credentials to authenticate calls to the webhook endpoint.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_CreateWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.webhook.WebhookRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookDTO'
  /v1beta/op/webhooks/{webhookId}:
    get:
      tags:
        - Webhooks
      summary: Retrieve a webhook's details
      description: |-
        Retrieve the details of a specific webhook. You must know the ID of the webhook to retrieve its details. To retrieve webhook IDs, see `GET /v1beta/op/webhooks`.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_GetWebhook
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookDTO'
    put:
      tags:
        - Webhooks
      summary: Update a webhook's details
      description: |-
        Update the details of an existing webhook, such as its URL and active status. You must know the ID of the webhook to update it. To retrieve webhook IDs, see `GET /v1beta/op/webhooks`. To update a webhook's credentials, see `PUT /v1beta/op/webhooks/{webhookId}/credentials`.

         When updating a webhook, the webhook definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values from the update request, those values are removed from the webhook. We recommend that you retrieve a webhook's details before you update the webhook with new values.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_UpdateWebhook
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.webhook.WebhookDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookDTO'
    delete:
      tags:
        - Webhooks
      summary: Delete a webhook
      description: |-
        Delete a specific webhook. You must know the ID of the webhook to delete it. To retrieve webhook IDs, see `GET /v1beta/op/webhooks`.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_DeleteWebhook
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookDTO'
  /v1beta/op/webhooks/{webhookId}/credentials:
    put:
      tags:
        - Webhooks
      summary: Update a webhook's credentials
      description: |-
        Update the credentials to authenticate calls to the webhook endpoint. You must know the ID of the webhook to update it. To retrieve webhook IDs, see `GET /v1beta/op/webhooks`. To update a webhook's details, see `PUT /v1beta/op/webhooks/{webhookId}`.

         When updating a webhook, the webhook definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values from the update request, those values are removed from the webhook. We recommend that you retrieve a webhook's details before you update the webhook with new values.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_UpdateWebhookCredentials
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.webhook.WebhookCredentialsDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookDTO'
    delete:
      tags:
        - Webhooks
      summary: Delete a webhook's credentials
      description: |-
        Delete the credentials for a webhook. You must know the ID of the webhook to delete its credentials. To retrieve webhook IDs, see `GET /v1beta/op/webhooks`.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_DeleteWebhookCredentials
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookDTO'
  /v1beta/op/webhooks/{webhookId}/testEvent:
    post:
      tags:
        - Webhooks
      summary: Test a webhook
      description: |-
        Send a test event to an existing webhook. This validates whether the webhook works. You must specify the webhook ID and an event type.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Webhooks_SendTestEvent
      parameters:
        - name: webhookId
          in: path
          description: The unique identifier of the webhook.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.webhook.WebhookEventTypeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.webhook.WebhookMessageResponseDTO'
  /v2/admin/tenants:
    get:
      tags:
        - TenantsV2
      summary: Retrieve a list of all analytic tenants
      description: |-
        Retrieve the full list of analytic tenants managed by you with their current states and the content
         modules assigned to them, and all other relevant details for the tenants if requested.
      operationId: TenantsV2_ListTenants
      parameters:
        - name: limit
          in: query
          description: The maximum number of tenants to return. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
        - name: mask
          in: query
          description: A list of fields to include in the response, separated by commas. E.g., "displayName,purchasedModules"
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.MaskMessage'
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIListResponseDTO'
    post:
      tags:
        - TenantsV2
      summary: Add an analytic tenant
      description: |-
        Prior to processing and loading an analytic tenant's data files, you must provision, or create, that tenant. A
         provisioned analytic tenant is automatically enabled. If the tenant's data is loaded after provisioning, that data
         is immediately accessible by their users.

         Create an analytic tenant and identify the
         applications assigned to the tenant. Visier organizes content under a set of modules.

         Contact Visier Support to determine the list of modules allocated to you.

         **Note:** API requests that contain `homeAnalysisId`, `homeAnalysisByUserGroup`, `clickThroughLink`, or
         `defaultCurrency` take longer to run because they require publishing a project to production.
      operationId: TenantsV2_CreateTenant
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantManagementAPIUpdateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIUpdateResponseDTO'
  /v2/admin/tenants/{tenantId}:
    get:
      tags:
        - TenantsV2
      summary: Retrieve an analytic tenant's details
      description: |-
        Retrieve the details for a specified analytic tenant. Doing so allows you to see the current state
         of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
      operationId: TenantsV2_TenantInfo
      parameters:
        - name: tenantId
          in: path
          description: The ID of the tenant to retrieve.
          required: true
          schema:
            type: string
        - name: mask
          in: query
          description: A list of fields to include in the response, separated by commas. E.g., "displayName,purchasedModules"
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIGetResponseDTO'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.MaskMessage'
    put:
      tags:
        - TenantsV2
      summary: Update an analytic tenant
      description: |-
        You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.
         You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates
         to your tenants, use this API.

         * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.
         * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.

         You can use this API to update any field on an analytic tenant, except `tenantCode`.

         **Note:** API requests that contain `homeAnalysisId`, `homeAnalysisByUserGroup`, `clickThroughLink`, or
         `defaultCurrency` take longer to run because they require publishing a project to production.
      operationId: TenantsV2_UpdateTenant
      parameters:
        - name: tenantId
          in: path
          description: The ID of the tenant to update.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantManagementAPIUpdateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIUpdateResponseDTO'
    delete:
      tags:
        - TenantsV2
      summary: Deprovision an analytic tenant
      description: |-
        <em>Warning! Deprovisioning an analytic tenant is not reversible.</em>
         Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/{tenantId}/disable`**.

         This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant
         may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.

         If successful, the response returns the status "Deprovisioned". This indicates that the tenant is scheduled for
         deprovisioning, which may take several days to complete.
      operationId: TenantsV2_DeleteTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v2/admin/user-groups:
    get:
      tags:
        - UserGroupsV2
      summary: Retrieve a list of user groups
      description: |-
        Retrieve a collection of user groups. Use `with` to control the amount of detail returned in the response.
         `with` supports these values:
         * **permissions**: Include the user group's permissions.
         * **users**: Include the users in the user group.
         * **details**: Include all available information.

         This API can return a maximum of 1000 user groups. The default number of user groups to return is 100.

         To specify the project in which to return user groups, provide a project UUID in the `ProjectID` request header.

         <br>To specify the tenant in which to retrieve user groups, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.
      operationId: UserGroupsV2_GetUserGroups
      parameters:
        - name: with
          in: query
          description: |-
            Controls the amount of detail to return in the response. Omit to return basic information.
             * **permissions**: Include the user group's permissions.
             * **users**: Include the users in the user group.
             * **details**: Include all available information.
          schema:
            enum:
              - permissions
              - users
              - details
            type: string
            format: enum
        - name: limit
          in: query
          description: The number of results to return. The maximum number of user groups to retrieve is 1000. The default is 100.
          schema:
            type: integer
            format: uint32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
    put:
      tags:
        - UserGroupsV2
      summary: Update multiple user groups
      description: "Update existing user groups. To specify the tenant in which to update a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header or `tenantCode` for each user group in the request body.\n\n When updating user groups, the user group definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values from the update request, those values are removed from the user group. We recommend that you retrieve a user group's details before you update the user group with new values. \n\n To specify the project in which to update user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body."
      operationId: UserGroupsV2_PutUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeResponseDTO'
    post:
      tags:
        - UserGroupsV2
      summary: Create multiple user groups
      description: |-
        Create new user groups. To specify the tenant in which to add new user groups, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.

         To specify the project in which to create new user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body.
      operationId: UserGroupsV2_CreateUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeResponseDTO'
    delete:
      tags:
        - UserGroupsV2
      summary: Delete multiple user groups
      description: |-
        Delete user groups in bulk. To specify the tenant in which to delete user groups, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.

         To specify the project in which to delete user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body.
      operationId: UserGroupsV2_DeleteUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsDeleteRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupDeleteResponseDTO'
    patch:
      tags:
        - UserGroupsV2
      summary: Patch multiple user groups
      description: |-
        Make partial changes to user groups. To specify the tenant in which to patch a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header or `tenantCode` for each user group in the request body.

         Unlike `PUT`, which completely replaces the user group definition, use `PATCH` to change specific fields in the user group without affecting omitted fields.

         To specify the project in which to patch user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body.
      operationId: UserGroupsV2_PatchUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeResponseDTO'
  /v2/admin/user-groups/{userGroupId}:
    get:
      tags:
        - UserGroupsV2
      summary: Retrieve the details of a user group
      description: "Retrieve all available information about a specific user group.\n \n <br>To specify the tenant in which to retrieve a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.\n\n To specify the project in which to return a user group, provide a project UUID in the `ProjectID` request header."
      operationId: UserGroupsV2_GetUserGroup
      parameters:
        - name: userGroupId
          in: path
          description: The ID of user group.
          required: true
          schema:
            type: string
        - name: with
          in: query
          description: |-
            Controls the amount of detail to return in the response. Omit to return detailed information.
             * **permissions**: Include the user group's permissions.
             * **users**: Include the users in the user group.
             * **details**: Include all available information.
          schema:
            enum:
              - permissions
              - users
              - details
            type: string
            format: enum
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeDefinitionDTO'
    delete:
      tags:
        - UserGroupsV2
      summary: Delete a user group
      description: |-
        Delete a specific user group. To specify the tenant in which to delete a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.

         To specify the project in which to delete a user group, provide a project UUID in the `ProjectID` request header.
      operationId: UserGroupsV2_DeleteUserGroup
      parameters:
        - name: userGroupId
          in: path
          description: The ID of user group to delete.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.DeleteUserGroupV2Request'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupSingleDeleteResponseDTO'
  /v2/admin/users:
    put:
      tags:
        - UsersV2
      summary: Update users
      description: Update an existing user's information, such as their display name or if the user is enabled in Visier.
      operationId: UsersV2_UpdateUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to update a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UsersUpdateAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UsersAPIResponseDTO'
    post:
      tags:
        - UsersV2
      summary: Add users
      description: Create new users. Administrating tenant users can specify the tenant in which to add these users.
      operationId: UsersV2_AddUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to create a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UsersCreationAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UsersAPIResponseDTO'
    delete:
      tags:
        - UsersV2
      summary: Delete users
      description: Delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
      operationId: UsersV2_DeleteUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to delete a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UsersDeleteAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UsersAPIResponseDTO'
  /v2alpha/data/model/analytic-objects:
    put:
      tags:
        - DataModel
      summary: Update analytic objects
      description: |-
        Update the details of an analytic object. Supports reverting subjects, events, and internal comparisons to Blueprint.

         You can revert tenant override objects to Blueprint. If you execute the `revertToBP` operation on a:
         - Blueprint object: Nothing happens. The object is already the Blueprint version!
         - Tenant override object: The object reverts to the Blueprint version or, for administrating tenants who revert an analytic tenant's object, the administrating tenant's object version.
         - Tenant object: The API request fails. The object is unique to your tenant and no Blueprint version exists.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DataModel_UpdateAnalyticObjects
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
  /v2alpha/data/model/analytic-objects/{analyticObjectId}/dimensions:
    get:
      tags:
        - DimensionsV2
      summary: Retrieve a list of dimensions by analytic object
      description: |-
        Retrieve all the dimensions for a specific analytic object. The response returns the details of all dimensions for the analytic object, including object names, dimension types, and descriptions.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_GetAnalyticObjectDimensions
      parameters:
        - name: analyticObjectId
          in: path
          description: The object name or UUID of the analytic object from which to retrieve dimensions.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: |-
            The type of the dimension to retrieve. Valid values:
             - `leveled`: Retrieves leveled dimensions.
             - `parentChild`: Retrieves parent-child dimensions.
          schema:
            type: array
            items:
              enum:
                - leveled
                - parentChild
              type: string
              format: enum
        - name: with
          in: query
          description: |-
            The level of information to retrieve for the dimension. Valid values:
             - `basic`: Retrieves the dimension's UUID, object name, and basic information. This is the default.
             - `details`: Retrieves the `basic` details and additional configurations, such as levels and settings.
             - `version`: Retrieves the object's version information, such as version type and last edited details.
          schema:
            type: array
            items:
              enum:
                - basic
                - details
                - version
              type: string
              format: enum
        - name: objectName
          in: query
          description: The dimension object names to return in the response. When combined with `uuid`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: uuid
          in: query
          description: The dimension UUIDs to return in the response. When combined with `objectName`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionResponseDTO'
  /v2alpha/data/model/analytic-objects/{analyticObjectName}/concepts:
    get:
      tags:
        - ConceptsV2
      summary: Retrieve a list of concepts by analytic object
      description: |-
        Retrieve all the concepts for a specific analytic object. The response returns the details of all concepts for the analytic object, including object names, concept types, and descriptions.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_GetAnalyticObjectConcepts
      parameters:
        - name: analyticObjectName
          in: path
          description: The object name of the analytic object from which to retrieve concepts.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: |-
            The type of the concept to retrieve. Omit to retrieve all supported concept types. Valid values:
             - `process`: Retrieves all process concepts.
             - `selection`: Retrieves all member selection concepts and calculated selection concepts.
          schema:
            type: array
            items:
              enum:
                - process
                - selection
              type: string
              format: enum
        - name: with
          in: query
          description: |-
            The level of information to retrieve for the concept. Valid values:
             - `basic`: Retrieves the concept's UUID, object name, and basic information. This is the default.
             - `details`: Retrieves the `basic` details and additional configurations, such as `visibleInApp`.
             - `version`: Retrieves the object's version information, such as version type and last edited details.
          schema:
            type: array
            items:
              enum:
                - basic
                - details
                - version
              type: string
              format: enum
        - name: objectName
          in: query
          description: The concept object names to return in the response. When combined with `uuid`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: uuid
          in: query
          description: The concept UUIDs to return in the response. When combined with `objectName`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptResponseDTO'
  /v2alpha/data/model/concepts:
    get:
      tags:
        - ConceptsV2
      summary: Retrieve a list of concepts
      description: |-
        Retrieve a list of all concepts in your Visier tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_GetAllConcepts
      parameters:
        - name: type
          in: query
          description: |-
            The type of the concept to retrieve. Omit to retrieve all supported concept types. Valid values:
             - `process`: Retrieves all process concepts.
             - `selection`: Retrieves all member selection concepts and calculated selection concepts.
          schema:
            type: array
            items:
              enum:
                - process
                - selection
              type: string
              format: enum
        - name: with
          in: query
          description: |-
            The level of information to retrieve for the concept. Valid values:
             - `basic`: Retrieves the concept's UUID, object name, and basic information. This is the default.
             - `details`: Retrieves the `basic` details and additional configurations, such as `visibleInApp`.
             - `version`: Retrieves the object's version information, such as version type and last edited details.
          schema:
            type: array
            items:
              enum:
                - basic
                - details
                - version
              type: string
              format: enum
        - name: objectName
          in: query
          description: The concept object names to return in the response. When combined with `uuid`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: uuid
          in: query
          description: The concept UUIDs to return in the response. When combined with `objectName`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptResponseDTO'
    put:
      tags:
        - ConceptsV2
      summary: Update concepts
      description: |-
        Update existing concepts. The response returns whether each concept was successfully updated or not. When updating objects, we recommend that you first retrieve the object definition using `GET`. You can use the `GET` response in your `PUT` request definition.

         In `PUT` calls, the definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values from the update request, those values are removed from the concept. To partially update a concept, see the `PATCH` method.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_PutConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
    post:
      tags:
        - ConceptsV2
      summary: Create concepts
      description: |-
        Create new concepts. The response returns whether each concept was successfully created or not.
         When creating objects, assign a unique object name but don't set a UUID. Visier generates UUIDs for new objects.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_CreateConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
    delete:
      tags:
        - ConceptsV2
      summary: Delete concepts
      description: |-
        Delete existing concepts. The response returns whether each concept was successfully deleted or not.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_DeleteConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptDeleteRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
    patch:
      tags:
        - ConceptsV2
      summary: Partially update concepts
      description: |-
        Make partial changes to existing concepts. The response returns whether each concept was successfully patched or not. When patching objects, we recommend that you first retrieve the object definition using `GET`. You can use the `GET` response in your `PATCH` request definition.

         Unlike `PUT`, which completely replaces the concept definition, use `PATCH` to change specific fields in the concept without affecting omitted fields. To replace a concept's entire definition, see the `PUT` method.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_PatchConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
  /v2alpha/data/model/concepts/{conceptId}:
    get:
      tags:
        - ConceptsV2
      summary: Retrieve a concept's details
      description: |-
        Retrieve the details of a specific concept, such as its concept type and description.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConceptsV2_GetOneConcept
      parameters:
        - name: conceptId
          in: path
          description: The object name or UUID of the concept to retrieve.
          required: true
          schema:
            type: string
        - name: with
          in: query
          description: |-
            The level of information to retrieve for the concept. Valid values:
             - `basic`: Retrieves the concept's UUID, object name, and basic information.
             - `details`: Retrieves the `basic` details and additional configurations, such as `visibleInApp`. This is the default.
             - `version`: Retrieves the object's version information, such as version type and last edited details.
          schema:
            type: array
            items:
              enum:
                - basic
                - details
                - version
              type: string
              format: enum
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptResponseDTO'
  /v2alpha/data/model/dimensions:
    get:
      tags:
        - DimensionsV2
      summary: Retrieve a list of dimensions
      description: |-
        Retrieve a list of all dimensions in your Visier tenant. You can optionally filter dimensions by dimension type or analytic object.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_GetAllDimensions
      parameters:
        - name: type
          in: query
          description: |-
            The type of the dimension to retrieve. If undefined, retrieves all dimension types. Valid values:
             - `leveled`: Retrieves leveled dimensions.
             - `parentChild`: Retrieves parent-child dimensions.
          schema:
            type: array
            items:
              enum:
                - leveled
                - parentChild
              type: string
              format: enum
        - name: with
          in: query
          description: |-
            The level of information to retrieve for the dimension. Valid values:
             - `basic`: Retrieves the dimension's UUID, object name, and basic information. This is the default.
             - `details`: Retrieves the `basic` details and additional configurations, such as levels and settings.
             - `version`: Retrieves the object's version information, such as version type and last edited details.
          schema:
            type: array
            items:
              enum:
                - basic
                - details
                - version
              type: string
              format: enum
        - name: analyticObjectName
          in: query
          description: The object names of the analytic objects from which to retrieve dimensions. Default is to return dimensions from all analytic objects.
          schema:
            type: array
            items:
              type: string
        - name: analyticObjectUuid
          in: query
          description: The UUIDs of the analytic objects from which to retrieve dimensions. Default is to return dimensions from all analytic objects.
          schema:
            type: array
            items:
              type: string
        - name: objectName
          in: query
          description: The dimension object names to return in the response. When combined with `uuid`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: uuid
          in: query
          description: The dimension UUIDs to return in the response. When combined with `objectName`, the results return objects that match either the `objectName` or `uuid`.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionResponseDTO'
    put:
      tags:
        - DimensionsV2
      summary: Update dimensions
      description: |-
        Update existing dimensions. The response returns whether each dimension was successfully updated or not. When updating objects, we recommend that you first retrieve the object definition using `GET`. You can use the `GET` response in your `PUT` request definition.

         In `PUT` calls, the definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values from the update request, those values are removed from the dimension. To partially update a dimension, see the `PATCH` method.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_PutDimensions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
    post:
      tags:
        - DimensionsV2
      summary: Create dimensions
      description: |-
        Create new dimensions. The response returns whether each dimension was successfully created or not.
         When creating objects, assign a unique object name but don't set a UUID. Visier generates UUIDs for new objects.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_CreateDimensions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
    delete:
      tags:
        - DimensionsV2
      summary: Delete dimensions
      description: |-
        Delete existing dimensions. The response returns whether each dimension was successfully deleted or not.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_DeleteDimensions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionDeleteRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
    patch:
      tags:
        - DimensionsV2
      summary: Partially update dimensions
      description: |-
        Make partial changes to existing dimensions. The response returns whether each dimension was successfully patched or not. When patching objects, we recommend that you first retrieve the object definition using `GET`. You can use the `GET` response in your `PATCH` request definition.

         Unlike `PUT`, which completely replaces the dimension definition, use `PATCH` to change specific fields in the dimension without affecting omitted fields. To replace a dimension's entire definition, see the `PUT` method.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_PatchDimensions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.BulkChangeResponseDTO'
  /v2alpha/data/model/dimensions/{dimensionId}:
    get:
      tags:
        - DimensionsV2
      summary: Retrieve a dimension's details
      description: |-
        Retrieve the details of a specific dimension, such as its dimension type and description.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: DimensionsV2_GetOneDimension
      parameters:
        - name: dimensionId
          in: path
          description: The object name or UUID of the dimension to retrieve.
          required: true
          schema:
            type: string
        - name: with
          in: query
          description: |-
            The level of information to retrieve for the dimension. Valid values:
             - `basic`: Retrieves the dimension's UUID, object name, and basic information.
             - `details`: Retrieves the `basic` details and additional configurations, such as levels and settings. This is the default.
             - `version`: Retrieves the object's version information, such as version type and last edited details.
          schema:
            type: array
            items:
              enum:
                - basic
                - details
                - version
              type: string
              format: enum
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionWithContextDTO'
  /v1/admin/users/reports/application-logs:
    get:
      tags:
        - UsersV1
      summary: Retrieve the Application Logs
      description: "This API allows you to export the Application Logs for a tenant. The Application Logs track information about your\n users and how they are using the application. Performing regular audits will help you identify potential security\n issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity\n and logon events to ensure your users are performing authorized activities. \n\n Application logs are retained in the system for 180 days.\n\n Administrating tenant users can export application logs for the administrating tenant and the analytic tenants\n those users belong to."
      operationId: UsersV1_GetApplicationLogsXLSX
      parameters:
        - name: startTime
          in: query
          description: An inclusive date-time in milliseconds to start retrieving Application Logs from.
          schema:
            type: string
          examples:
            startTime:
              value: 1738368000000
              description: The start time 2025-02-01:00:00:00 GTM in milliseconds.
        - name: endTime
          in: query
          description: An exclusive date-time in milliseconds to stop retrieving Application Logs from.
          schema:
            type: string
          examples:
            endTime:
              value: 1740787200000
              description: The end time 2025-03-01:00:00:00 GTM in milliseconds.
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve Application Logs from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/{userId}/reports/data-security:
    get:
      tags:
        - UsersV1
      summary: Retrieve the Data Security Report
      description: |-
        This API allows you to export the data security report of a user. The Data Security Report provides information
         about a specific user to see which populations and properties that user has access to as a result of the
         permissions assigned to them.

         Administrating tenant users can export the report for users in the administrating tenant and the analytic
         tenants those users belong to.
      operationId: UsersV1_GetDataSecurityReportXLSX
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve the report for.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the Data Security Report from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/reports/profile-assignments:
    get:
      tags:
        - UsersV1
      summary: Retrieve user profile assignments in XLSX format
      description: |-
        This API allows you to export the profiles assigned to each user. This report details the profiles assigned to
         each user and the profile validity period.

         Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants
         those users belong to.
      operationId: UsersV1_GetProfileAssignmentsXLSX
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve profile assignments from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/reports/permission-assignments:
    get:
      tags:
        - UsersV1
      summary: Retrieve user permissions in XLSX format
      description: |-
        This API allows you to export the user permission assignments for a tenant. The permission assignments report
         provides a summary of the permissions your users have been assigned and how each permission is being used across
         your user base, as well as the users that do not have any permissions assigned to them.

         Administrating tenant users can export permission assignments for the administrating tenant and the analytic
         tenants those users belong to.
      operationId: UsersV1_GetUserPermissionsXLSX
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the permission assignments report from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/reports/permissions-list:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of all permissions in XLSX format
      description: |-
        This API allows you to export the list of permissions in a tenant. This report includes the permission name,
         permission description, and permission ID for all permissions in the tenant.

         Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants
         those users belong to.
      operationId: UsersV1_GetAllPermissionsXLSX
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve permissions from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/visierSecureToken:
    post:
      tags:
        - BasicAuthentication
      summary: Request a Visier authentication token
      description: Generate a secure ASID token.
      operationId: BasicAuthentication_ASIDTokenAuthentication
      requestBody:
        description: Your username and password credentials to request an authentication token.
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "200":
          description: Authentication token response
          content:
            text/plain:
              schema:
                type: string
      security:
        - {}
  /v1/admin/visierImpersonationToken:
    post:
      tags:
        - BasicAuthentication
      summary: Request an impersonation token
      description: Generate an impersonation token for the given username.
      operationId: BasicAuthentication_GenerateImpersonationToken
      parameters:
        - name: TargetTenantID
          in: header
          description: The tenant ID to execute the call on.
          schema:
            type: string
      requestBody:
        description: Request to generate an impersonation token.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateImpersonationTokenRequest"
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "200":
          description: Impersonation token response
          content:
            text/plain:
              schema:
                type: string
      security:
        - ApiKeyAuth: []
          CookieAuth: []
  /v1/auth/oauth2/authorize:
    get:
      tags:
        - OAuth2
      summary: Request an authorization code
      description: Request an authorization code for the authorization_code grant type. Not required in other OAuth 2.0 grant types.
      operationId: OAuth2_OAuth2Authorize
      parameters:
        - name: redirect_uri
          in: query
          description: The optional URI to redirect to after authorization.
          required: false
          schema:
            type: string
        - name: response_type
          in: query
          description: The response type. Must be `code`.
          required: true
          schema:
            type: string
        - name: client_id
          in: query
          description: The ID of the pre-registered client application.
          required: true
          schema:
            type: string
        - name: scope
          in: query
          description: The OAuth 2.0 scope of the authorization request. Default is `read`. If the scope includes `visier:login:bypass_users`, then the redirect login URL ends in "/auth/admin" instead of "/auth". This allows single sign-on (SSO) Bypass Users to login through Visier instead of being redirected to the SSO login page.
          required: false
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        3XX:
          description: Redirect to authorization page.
      security:
        - {}
  /v1/auth/oauth2/token:
    post:
      tags:
        - OAuth2
      summary: Request a JSON Web Token
      description: Use an OAuth 2.0 grant type to request a JWT.
      operationId: OAuth2_OAuth2Token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRequestBody"
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "200":
          description: Returns access and refresh tokens along with the expiration time.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
      security:
        - {}
  /v1/data/directloads/{draftId}/transactions/{transactionId}/{objectName}:
    put:
      tags:
        - DirectDataIntake
      summary: Upload files
      description: |-
        Send upload files to a previously-created transaction. Each upload file is associated with a target object in Visier. The files are not processed in Visier until you commit the transaction.
      operationId: DirectDataIntake_UploadFile
      parameters:
        - name: draftId
          in: path
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          required: true
          schema:
            type: string
        - name: transactionId
          in: path
          description: The unique identifier of the transaction to load data files into.
          required: true
          schema:
            type: string
        - name: objectName
          in: path
          description: |-
            The name of the object to upload the data to.

            If uploading data to a multi-value property (MVP), specify the property in `{object}--{property}` format; for example, `Employee--Employee_Budgeted_Compensation`.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DirectDataUploadFileResponseDTO"
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
  /v1/op/data-transfer-sessions/{transferSessionId}/upload:
    put:
      tags:
        - DataIntake
      summary: Transfer data to sources via file upload
      description: |-
        Upload data to Visier as CSV or ZIP files. Each request transfers a single file. If the
         data intended for Visier is stored in multiple files, you may compress them into a single ZIP file or make
         multiple requests within the same transfer session.

         File size limit: 3 GB

         Each file is identified by a sequence number. Sequence numbers help identify any batches that were delivered incorrectly.

         If you define a specific source in the request, all files within the request will target the declared source. If
         a source is not defined, the filenames are matched against the source regex to correctly assign each file to a
         source. To find out the source regex, please contact Visier Customer Success.

         **Note:** If you include files that should target multiple sources in one ZIP file, do not define a source in the request.

         Analytic tenants: For optimal transfer speed, provide one ZIP file per source.
         Administrating tenants: For optimal transfer speed, provide one ZIP file containing all the required data files for your analytic tenants.
         In the ZIP file, use one folder per analytic tenant. The ZIP file must adhere to the following file structure:

         File1.zip
         - Folder1: WFF_tenantCode1
            - Filename1.csv
            - Filename2.csv
         - Folder2: WFF_tenantCode2
            - Filename3.csv
            - Filename4.csv
      operationId: DataIntake_UploadData
      parameters:
        - name: transferSessionId
          in: path
          description: The transfer session ID returned after the data transfer session starts.
          required: true
          schema:
            type: string
        - name: sourceId
          in: query
          description: The unique identifier associated with the source you want to transfer data to.
          schema:
            type: string
        - name: sequence
          in: query
          description: The unique sequence number associated with a batch of records.
          schema:
            type: string
        - name: tenantCode
          in: query
          description: The code of the tenant you want to transfer data to. For example, WFF_j1r or WFF_j1r~c7o.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload in CSV or ZIP format.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/data_in.PushDataResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/op/data-connector-credentials/{id}:
    delete:
      tags:
        - DataAndJobHandling
      summary: Delete a connector credential
      description: |-
        Use this API to delete connector credentials from your tenants. Credentials that are no longer valid
         should be deleted.
      operationId: DataAndJobHandling_DeleteConnectorCredential
      parameters:
        - name: id
          in: path
          description: The credentialId of the credential you want to delete.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: The tenant code of the analytic tenant in which the credential you're deleting.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/op/job-status/jobs/{jobId}:
    get:
      tags:
        - DataAndJobHandling
      summary: Retrieve a specific job's status
      description: |-
        Use this API to retrieve the list of statuses for a specific job with id `jobId`.
        You can retrieve all job statuses or specify a time period to retrieve statuses from.
      operationId: DataAndJobHandling_JobIdStatus
      parameters:
        - name: jobId
          in: path
          description: The unique ID of the job to retrieve the status for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                $ref: '#/components/schemas/data_in.ReceivingJobStatusResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/upload/files/{filename}:
    put:
      tags:
        - DataUpload
      summary: Upload a data file to Visier
      description: "Use this API to upload data files to Visier. You can upload ZIP, CSV, XLS, and XLSX filetypes in plaintext or encrypted with Visier's PGP key.\n\n Use of this API requires client redirect. This API redirects requests directly to Visier's upload infrastructure to support long-running uploads. \n To ensure efficient uploading, we recommend that you use an HTTP client that supports the 100 Continue status code.\n\n The maximum file upload size is 500 MB. We recommend using SFTP for larger file sizes."
      operationId: DataUpload_FileUpload
      parameters:
        - name: filename
          in: path
          description: The filename of the data file to upload, including the file extension (such as .zip or .csv).
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
      responses:
        "307":
          description: Redirect to Visier's upload infrastructure.
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1alpha/planning/data/plans/{planId}/scenarios/{scenarioId}:
    patch:
      tags:
        - PlanningDataLoad
      summary: Upload plan data
      description: |-
        Send a file to Visier to modify a plan's data. The file must be in CSV format and match the plan's schema. To get the plan's schema, call `GET /v1alpha/planning/model/plans/{id}?withSchema=true`.
        The data file must contain the following columns:
          - `periodId`: From the GET response, use the `date` values in the `timePeriods` array as values in this column.
          - A column for each `id` value in the `planSegmentLevels` object, where the row value is the `id` of the `members` in the `planSegmentLevelMembers` object.
          - A column for each  `id` value in the `planItems` object that you want to modify data for, where the row value is the data value.

        <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued. If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: PlanDataLoad_PlanDataUpload
      parameters:
        - name: planId
          in: path
          description: The unique identifier of the plan.
          required: true
          schema:
            type: string
        - name: scenarioId
          in: path
          description: The unique identifier of the plan scenario to load data into.
          required: true
          schema:
            type: string
        - name: calculation
          in: query
          description: |-
            Sets the plan values to rollup, distribute, or neither. Valid values:
              - **ROLLUP**: Roll up loaded data values to parent and ancestor rows. If the data provides a parent value and its child value, this method prioritizes the loaded value for the child and overwrites the parent.
              - **DISTRIBUTE**: Distribute loaded data values to their children and descendent rows. If the data provides a parent value and its child value, this method prioritizes the parent values and overrides the loaded child value.
              - **NONE**: The loaded values are not rolled up or distributed. This is the default.
          required: false
          schema:
            type: string
        - name: currency
          in: query
          description: |-
            The 3-digit ISO 4217 currency code of the data.
            If undefined, default is the plan's consolidation currency. If the currency is different from the plan's consolidation currency, the values are converted to the consolidation currency using the conversion rates loaded for the plan's baseline period.
          required: false
          schema:
            type: string
        - name: method
          in: query
          description: |-
            Sets how to validate the data being loaded into Visier. Valid values:
              - **VALIDATE**: Runs a test load through all the validation steps without putting the data into the plan. Use `VALIDATE` to find any errors before using `STRICT_UPLOAD` to load the data.
              - **SKIP_ERRORS**: Loads all data without errors into the plan. Any rows with errors are excluded from the update to the plan.
              - **STRICT_UPLOAD**: Loads data into the plan if there are no errors in any row. If there are errors, the load fails. This is the default.
          required: false
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The CSV file to load into the plan.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanDataUploadResponseDTO'
  /v1alpha/planning/data/plans/{planId}/rows:
    patch:
      tags:
        - PlanningDataLoad
      summary: Add or remove plan rows
      description: |-
        Send a file to Visier to modify a plan's rows. The file must be in CSV format and contain the following columns:
        - `Add/Remove`: In the column, use the value "Add" to add the specified row to the plan or "Remove" to remove the specified row from the plan.
        - A column for each plan segment level using the IDs from `planSegmentLevels`.
          - To add a row, use the corresponding segment member ID from `planSegmentLevelMembers`. If the member doesn't exist in the schema, provide a display name. The response returns its assigned segment member ID.
          - To remove a row, use the corresponding segmentId as the column name and the segment member ID from `planSegmentLevelMembers` as the row value.

        <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued. If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: PlanDataLoad_PlanRowDataLoad
      parameters:
        - name: planId
          in: path
          description: The unique identifier of the plan.
          required: true
          schema:
            type: string
        - name: method
          in: query
          description: |-
            Sets how to validate the data being loaded into Visier. Valid values:
              - **VALIDATE**: Runs a test load through all the validation steps without putting the data into the plan. Use `VALIDATE` to find any errors before using `STRICT_UPLOAD` to load the data.
              - **SKIP_ERRORS**: Loads all data without errors into the plan. Any rows with errors are excluded from the update to the plan.
              - **STRICT_UPLOAD**: Loads data into the plan if there are no errors in any row. If there are errors, the load fails. This is the default.
          required: false
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The CSV file to load into the plan.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanRowDataLoadResponseDTO'
  /v1alpha/data/data-version-exports/exports/{exportUuid}/files/{fileId}:
    get:
      tags:
        - DataVersionExport
      summary: Download a file from a data version export
      description: |-
        This API allows you to download a file from a data version export.
        Data version export files are in CSV format, compressed with gzip.
      operationId: DataVersionExportV1Alpha_DownloadFile
      parameters:
        - name: exportUuid
          in: path
          description: The unique identifier of the data version export.
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: The unique integer identifier of the file within the data version export.
          required: true
          schema:
            type: integer
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: File contents
          content:
            application/gzip:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DvExportStatus'
  /v1alpha/reporting/report-data/{reportId}:
    get:
      tags:
        - Reporting
      summary: Download a report
      description: |-
        Download a report as a CSV file. The returned CSV file contains the data in the report. You must know the ID of the report to download it. To retrieve report IDs, see `GET /v1alpha/reporting/reports`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Reporting_DownloadReport
      parameters:
        - name: reportId
          in: path
          description: The unique identifier of the report you want to download.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: Report data response
          content:
            text/csv:
              schema:
                type: string
            application/zip:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/compensation-benchmarks/base-salary:
    get:
      summary: Get base salary benchmark value
      tags: [Benchmarks]
      operationId: GetSalaryBenchmark
      description: |
        Retrieve the base salary benchmark value.
      parameters:
        - name: job
          in: query
          required: true
          schema:
            type: string
          description: |
            The job member ID.
        - name: industry
          in: query
          required: false
          schema:
            type: string
          description: |
            The industry member ID. If the ID is not provided, the response returns the benchmark value across all industries.
        - name: naicsCode
          in: query
          required: false
          schema:
            type: string
          description: "The North American Industry Classification System (NAICS) code. \n\nIf the NAICS code is not provided, the response returns the benchmark value across all industries.\nIf both `naicsCode` and `industry` are provided, the response returns the benchmark value for the `industry` parameter. The entered `naicsCode` will not be applied.\n"
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: |
            The location member ID. If the ID is not provided, the response returns the benchmark value across all locations.
        - name: companySize
          in: query
          required: false
          schema:
            type: string
          description: |
            The company size member ID. If the ID is not provided, the response returns the benchmark value across all company sizes.
        - name: careerLevel
          in: query
          required: false
          schema:
            type: string
          description: |
            The career level member ID. If the ID is not provided, the response returns the benchmark value across all career levels.
      responses:
        "200":
          description: |
            The requested base salary benchmark value.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BenchmarkValue"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing parameters, invalid parameters, or there is no benchmark value available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-salary-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/base-salaries:
    post:
      summary: Get salary benchmark values in bulk
      tags: [Benchmarks]
      operationId: "GetSalaryBenchmarksInBulk"
      description: |
        Retrieve multiple base salary benchmark values in a single request.
      requestBody:
        description: |
          A batch request takes a JSON object consisting of an array of your requests. You can batch up to 1000 individual requests in one API call.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SalaryBenchmarkInputs"
        required: true
      responses:
        "200":
          description: "The bulk request was completed. Review the responses individually to see which actions were successful. \nIf you receive a 400 status code for an individual response, it indicates missing parameters, invalid members, or no benchmark values were found.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SalaryBenchmarksBatchProcessingOutputs"
        "400":
          description: |
            The API request failed due to invalid JSON input, empty input or it exceeded the bulk size limit of 1000 individual requests.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-batch-benchmarks-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/jobs:
    get:
      summary: Get jobs
      tags: [Dimensions]
      operationId: GetJobs
      description: |
        Retrieve a list of all the jobs in Visier's ontology.
      parameters:
        - name: hierarchy
          in: query
          required: false
          schema:
            type: string
          description: |
            The ID of the job hierarchy to navigate.

            If not provided, Visier's default job hierarchy is used. In the default hierarchy, jobs are organized into three levels with domain and subdomain groupings.
        - name: parent
          in: query
          required: false
          schema:
            type: string
          description: |
            The ID of the parent member.

            If the ID is provided, the response returns the immediate children of the parent member.

            To get the top-level members, use the value `root`.

            Member availability and the parent-child relationship depends on the selected hierarchy. Please refer to the `hierarchy` parameter.
        - name: term
          in: query
          required: false
          schema:
            type: string
          description: "The input search term. The job members that are the most semantically similar to the search term are returned with the most relevant job members displayed first. \nYour search term may not be included in the results as semantic search goes beyond keyword matching and attempts to interpret the meaning behind the query to provide search results.\n\nThe minimum length is 2 characters and the maximum length is 100 characters.\n\n***The search term must be URL encoded.***\n"
        - name: naicsCode
          in: query
          required: false
          schema:
            type: string
          description: |
            The North American Industry Classification System (NAICS) code.

            If `naicsCode` is provided, `term` is required. The most relevant job members associated with the naicsCode are returned first.
        - name: hasBenchmarkValue
          in: query
          required: false
          schema:
            type: boolean
          description: "Filter members based on the availability of benchmark values. \nIf `true`, members with benchmark values are returned. \nIf `false`, members without benchmark values are returned. \nIf no value is specified, all members are returned.\n"
        - name: semanticOnly
          in: query
          required: false
          schema:
            type: boolean
          description: |
            If `true`, only semantic search will be used to find matches. Ensure the parameter `lexicalOnly` is set to `false`.
            Default is `false`. By default, both semantic and lexical search are used to find matches.
        - name: lexicalOnly
          in: query
          required: false
          schema:
            type: boolean
          description: "If `true`, only lexical search will be used to find matches. Ensure the parameter `semanticOnly` is set to `false`. \nDefault is `false`. By default, both semantic and lexical search are used to find matches.\n"
        - name: typicalTitlesSearch
          in: query
          required: false
          schema:
            type: boolean
          description: |
            If `true`, similar job titles for a job member are included in the lexical search for matches.
            Default is `false`.
      responses:
        "200":
          description: |
            List of job members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DimensionMember"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-salary-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/jobs/standardize:
    post:
      summary: Standardize custom job titles in bulk
      tags: [Dimensions]
      operationId: "StandardizeJobsInBulk"
      description: |
        Find the top standardized job matches for any custom job title and optional NAICS code in bulk.
      requestBody:
        description: |
          The custom job titles that you want to retrieve standardized jobs for, the optional NAICS code to retrieve industry specific jobs, and the optional number of top matches to retrieve.

          By default, both semantic and lexical search are used to find matches. If you want to use a specific search method, set one of the parameters `semanticOnly` or `lexicalOnly` to `true`. Default for `semanticOnly` and `lexicalOnly` are `false`.

          The minimum custom job title length is 2 characters and the maximum length is 100 characters. You can submit up to 30 custom job titles per request.

          The default number of top matches returned is 5.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobStandardizationInput"
        required: true
      responses:
        "200":
          description: |
            The top standardized job matches for each custom job title.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStandardizationOutput"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-batch-dimension-members-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/jobs/hierarchies:
    get:
      summary: Get job hierarchies
      tags: [Dimensions]
      operationId: GetJobHierarchies
      description: |
        Retrieve a list of all hierarchies used to organize jobs.
      parameters:
        - name: naicsCode
          in: query
          required: false
          schema:
            type: string
          description: |
            The North American Industry Classification System (NAICS) code.

            If provided, the response returns the hierarchies associated with the code.
      responses:
        "200":
          description: |
            List of hierarchies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Hierarchy"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-occupation-hierarchies-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/jobs/search:
    post:
      summary: Search jobs by IDs
      tags: [Dimensions]
      operationId: "SearchJobs"
      description: |
        Retrieve a matching job for each specified job ID.
      requestBody:
        description: |
          The job IDs that you want to retrieve a job match.

          Include the mandatory `jobIDs` field.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobSearchInput"
        required: true
      responses:
        "200":
          description: "The request was completed. Review the responses individually to see which actions were successful. \nIf you receive a 400 status code for an individual input, it indicates an invalid job ID or no job was found.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobSearchOutput"
        "400":
          description: |
            The API request failed due to invalid JSON input, empty input or it exceeded the size limit of 1000 IDs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-search-jobs-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/jobs/feedback:
    post:
      summary: Send feedback to help improve the quality of the job match results
      tags: [Dimensions]
      operationId: "SubmitJobsFeedback"
      description: "This API allows you to submit feedback on the quality of the job match results returned by the Get jobs endpoint. \n\nYou must include the search term (job title you entered) in the request body. You can include the optional `naicsCode` if it was used as part of the search in the Get jobs endpoint.\n\nYou can also submit additional comments by providing values for `additionalComments`, along with `term` and `naicsCode`.\n\n**Note:**\n\nFor `term`, the minimum is 2 characters and the maximum is 100 characters.\n\nFor `additionalComments`, the maximum is 150 characters.\n"
      requestBody:
        description: |
          The feedback you want to submit for.

          Ensure to include the mandatory fields: search term (`term`).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobFeedbackInput"
        required: true
      responses:
        "204":
          description: |
            Your feedback has been submitted successfully.
        "400":
          description: |
            Your feedback could not be submitted. Ensure the required fields `term` is not included in the request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-submit-match-feedback-arn}"
        type: "aws_proxy"
      security:
        - api_key: []
  /v1/compensation-benchmarks/industries:
    get:
      summary: Get industries
      tags: [Dimensions]
      operationId: GetIndustries
      description: |
        Retrieve a list of all available industries.
      parameters:
        - name: parent
          in: query
          required: false
          schema:
            type: string
          description: |
            The ID of the parent member.

            If the ID is provided, the response returns the immediate children of the parent member.

            To get the top-level members, use the value `root`.
        - name: naicsCode
          in: query
          required: false
          schema:
            type: string
          description: |
            The North American Industry Classification System (NAICS) code.

            If provided, the response returns the best matching member associated with the code.
        - name: hasBenchmarkValue
          in: query
          required: false
          schema:
            type: boolean
          description: "Filter members based on the availability of benchmark values. \nIf `true`, members with benchmark values are returned. \nIf `false`, members without benchmark values are returned. \nIf no value is specified, all members are returned.\n"
      responses:
        "200":
          description: |
            List of industry members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DimensionMember"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-dimension-members-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/locations:
    get:
      summary: Get locations
      tags: [Dimensions]
      operationId: GetLocations
      description: |
        Retrieve a list of all available locations.
      parameters:
        - name: parent
          in: query
          required: false
          schema:
            type: string
          description: |
            The ID of the parent member.

            If the ID is provided, the response returns the immediate children of the parent member.

            To get the top-level member, use the value `root`.
        - name: countryCode
          in: query
          required: false
          schema:
            type: string
          description: |
            The **ISO 3166-1** country code to look up. Returns location members that match the country code.

            Currently, the only supported country code is `US`.
        - name: postalCode
          in: query
          required: false
          schema:
            type: string
          description: |
            Postal code to look up. If `postalCode` is provided, `countryCode` is required. Returns location members that match both the country code and postal code.
        - name: hasBenchmarkValue
          in: query
          required: false
          schema:
            type: boolean
          description: "Filter members based on the availability of benchmark values. \nIf `true`, members with benchmark values are returned. \nIf `false`, members without benchmark values are returned. \nIf no value is specified, all members are returned.\n"
      responses:
        "200":
          description: |
            List of location members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DimensionMember"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-dimension-members-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/locations/search:
    post:
      summary: Get location members in bulk
      tags: [Dimensions]
      operationId: "SearchLocationsInBulk"
      description: |
        Retrieve location members in bulk by country code and postal code.
      requestBody:
        description: |
          A list of requests that contain a combination of country and postal codes to look up. Returns location members that match both codes.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationSearchInput"
        required: true
      responses:
        "200":
          description: "The request was completed. Review the responses individually to see which actions were successful. \nIf you receive a 400 status code for an individual input, it indicates an invalid look up code or no location was found.\n"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LocationSearchOutput"
        "400":
          description: |
            The API request failed due to invalid JSON input, empty input, missing mandatory fields, or it exceeded the bulk size limit of 1000 individual requests.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-batch-dimension-members-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/company-sizes:
    get:
      summary: Get company sizes
      tags: [Dimensions]
      operationId: GetCompanySizes
      description: |
        Retrieve a list of all available company sizes.
      parameters:
        - name: headcount
          in: query
          required: false
          schema:
            type: integer
          description: |
            The number of employees.

            If provided, the response returns the members with the same headcount.
        - name: hasBenchmarkValue
          in: query
          required: false
          schema:
            type: boolean
          description: "Filter members based on the availability of benchmark values. \nIf `true`, members with benchmark values are returned. \nIf `false`, members without benchmark values are returned. \nIf no value is specified, all members are returned.\n"
      responses:
        "200":
          description: |
            List of company size members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DimensionMember"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-dimension-members-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/career-levels:
    get:
      summary: Get career levels
      tags: [Dimensions]
      operationId: GetCareerLevels
      description: |
        Retrieve a list of all available career levels.
      parameters:
        - name: job
          in: query
          required: false
          schema:
            type: string
          description: |
            The job member ID.

            If provided, the response returns the members for the job.
        - name: hasBenchmarkValue
          in: query
          required: false
          schema:
            type: boolean
          description: "Filter members based on the availability of benchmark values. \nIf `true`, members with benchmark values are returned. \nIf `false`, members without benchmark values are returned. \nIf no value is specified, all members are returned.\n"
      responses:
        "200":
          description: |
            List of career level members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DimensionMember"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-dimension-members-arn}"
      security:
        - api_key: []
  /v1/compensation-benchmarks/info:
    get:
      summary: Get benchmark metadata
      tags: [Benchmarks]
      operationId: GetInfo
      description: |
        Retrieve metadata that summarizes the benchmark dataset and API such as the release date.
      responses:
        "200":
          description: |
            Metadata that summarizes the benchmark dataset and API such as the release date.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BenchmarkInfo"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-info-arn}"
      security:
        - api_key: []
  /v1/jobs/{id}:
    get:
      summary: Get job details by ID
      tags: [Jobs Library]
      operationId: "GetJob"
      description: |
        If you know the ID of a job, use this endpoint to retrieve information such as display name, description, Automation Index, Remote Work Index, alternative names, and skills.
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: |
            The ID of the job to retrieve details for.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            Details of the requested job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-job-arn}"
      security:
        - api_key: []
  /v1/jobs:
    get:
      summary: Retrieve a list of jobs
      tags: [Jobs Library]
      operationId: "ListJobs"
      description: |
        Use this endpoint to retrieve all the jobs in Visier's Jobs Library.
      parameters:
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            List of jobs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobList"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-list-jobs-arn}"
      security:
        - api_key: []
  /v1/jobs/search:
    get:
      summary: Search jobs
      tags: [Jobs Library]
      operationId: "SearchJob"
      description: |
        Retrieve a list of jobs that match a specified search term.
      parameters:
        - name: "term"
          in: "query"
          required: true
          schema:
            type: "string"
          description: |
            The term to search for. The search term must be URL encoded and the minimum length is 3 characters.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            List of jobs matching the search term.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobList"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-search-job-arn}"
      security:
        - api_key: []
  /v1/jobs/standardize:
    post:
      summary: Standardize custom job titles
      tags: [Jobs Library]
      operationId: "StandardizeJobs"
      description: |
        Find the top standardized job matches for any custom job title and optional NAICS code.
      requestBody:
        description: |
          The custom job titles that you want to retrieve standardized jobs for and the optional NAICS code to retrieve industry specific jobs.

          The minimum length is 3 characters and the maximum length is 100 characters. You can submit up to 10 custom job titles per request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobStandardizationInputSkills"
        required: true
      responses:
        "200":
          description: |
            The top standardized job matches for each custom job title.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStandardizationOutputSkills"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-standardize-job-arn}"
        type: "aws_proxy"
      security:
        - api_key: []
  /v1/skills/{id}:
    get:
      summary: Get skill details by ID
      tags: [Skills Library]
      operationId: "GetSkill"
      description: |
        If you know the ID of a skill, use this endpoint to retrieve information such as display name, description, Automation Index, Remote Work Index, and alternative names.
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: |
            The ID of the skill to retrieve details for.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            Details of the requested skill.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Skill"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-skill-arn}"
      security:
        - api_key: []
  /v1/skills:
    get:
      summary: Retrieve a list of skills
      tags: [Skills Library]
      operationId: "ListSkills"
      description: |
        Use this endpoint to retrieve all skills in Visier's Skills Library.
      parameters:
        - name: "skillGroupId"
          in: "query"
          schema:
            type: "string"
          description: |
            Filter only skills that belong to a certain skill group.
        - name: "skillCategoryId"
          in: "query"
          schema:
            type: "string"
          description: |
            Filter only skills that belong to a certain skill category.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            List of skills.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillList"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-list-skills-arn}"
      security:
        - api_key: []
  /v1/skills/search:
    get:
      summary: Search skills
      tags: [Skills Library]
      operationId: "SearchSkill"
      description: |
        Retrieve a list of skills that match a specified search term.
      parameters:
        - name: "term"
          in: "query"
          required: true
          schema:
            type: "string"
          description: |
            The term to search for. The search term must be URL encoded and the minimum length is 3 characters.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            List of skills matching the search term.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillList"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-search-skill-arn}"
      security:
        - api_key: []
  /v1/skills/extract:
    post:
      summary: Extract skills from text
      tags: [Skills Library]
      operationId: "ExtractSkills"
      description: |
        Extract the relevant skills from text such as job descriptions and course outlines.
      parameters:
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      requestBody:
        description: |
          The text to extract skills from.

          The minimum length is 4 characters and the maximum length is 7500 characters.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillExtractionInput"
      responses:
        "200":
          description: |
            List of skills extracted from the text.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillExtractionOutput"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-extract-skills-arn}"
      security:
        - api_key: []
  /v1/skills/match:
    post:
      summary: Match a skill set to a group of skill sets (targets)
      tags: [Skills Library]
      operationId: "MatchSkills"
      description: |
        Find the best match between a skill set and a group of skill sets (targets). The response returns a ranking of the targets with the best match appearing at the top of the list.
      requestBody:
        description: |
          The skill set and the group of skill sets (targets) to be matched. The skills included in each skill set are entered in the following format [skill_id, score]. The score represents how prevalent the skill was in the source and is used as a weighting factor when determining the best match.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SkillMatchInput"
      responses:
        "200":
          description: |
            Ranked list of skill sets (targets) with the best match appearing at the top of the list. The integer value indicates the position of the target in the request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillMatchOutput"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-match-skills-arn}"
      security:
        - api_key: []
  /v1/skill-groups/{id}:
    get:
      summary: Get skill group details by ID
      tags: [Skills Library]
      operationId: "GetSkillGroup"
      description: |
        If you know the ID of a skill group, use this endpoint to retrieve information such as display name, description, Automation Index, Remote Work Index, and alternative names.
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: |
            The ID of the skill group to retrieve details for.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            Details of the requested skill group.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillGroup"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-meta-skill-arn}"
      security:
        - api_key: []
  /v1/skill-groups:
    get:
      summary: Retrieve a list of skill groups
      tags: [Skills Library]
      operationId: "ListSkillGroups"
      description: |
        Use this endpoint to retrieve all skill groups in Visier's Skills Library.
      parameters:
        - name: "skillCategoryId"
          in: "query"
          schema:
            type: "string"
          description: |
            Filter only skills that belong to a certain skill category.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            List of skill groups.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillGroupList"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-list-meta-skills-arn}"
      security:
        - api_key: []
  /v1/skill-categories/{id}:
    get:
      summary: Get skill category details by ID
      tags: [Skills Library]
      operationId: "GetSkillCategory"
      description: |
        If you know the ID of a skill category, use this endpoint to retrieve information such as display name, description, Automation Index, Remote Work Index, and alternative names.
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
          description: |
            The ID of the skill category to retrieve details for.
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            Details of the requested skill category.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillCategory"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-get-super-skill-arn}"
      security:
        - api_key: []
  /v1/skill-categories:
    get:
      summary: Retrieve a list of skill categories
      tags: [Skills Library]
      operationId: "ListSkillCategories"
      description: |
        Use this endpoint to retrieve all skill categories in Visier's Skills Library.
      parameters:
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
          description: |
            Allows you to specify if you want the output to be in one of the accepted languages.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is English.
      responses:
        "200":
          description: |
            List of skill categories.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SkillCategoryList"
        "400":
          description: |
            The API request failed given the parameters provided, such as missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "500":
          description: |
            An unexpected exception occurred on the server.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        "504":
          description: |
            The server is taking too long to respond and the request timed out.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiError"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        credentials: "${apigateway_role}"
        httpMethod: "POST"
        uri: "${lambda-list-super-skills-arn}"
      security:
        - api_key: []
components:
  schemas:
    google.protobuf.Any:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the serialized message.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
    admin.DeleteUserGroupV2Request:
      type: object
      properties:
        userGroupId:
          type: string
          description: The ID of user group to delete.
    admin.DeleteUserResponse:
      type: object
      properties: {}
    admin.ExcludedSourcesBody:
      type: object
      properties:
        excludedSources:
          type: array
          items:
            type: string
          description: A list of a CA tenant's excluded sources.
    admin.KeyName:
      type: object
      properties:
        keyName:
          type: string
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 3 and 36 characters long.
    admin.MaskMessage:
      example:
        mask: tenantDisplayName,purchasedModules
      type: object
      properties:
        mask:
          type: string
          description: A comma-separated list of strings that specifies which fields to include in the response.
          format: field-mask
    admin.PermissionsListDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionDTO'
          description: The list of permissions that will be created or updated
    admin.PutProjectCommitsRequest:
      type: object
      properties:
        projectId:
          type: string
          description: The unique identifier of the draft project you want to import committed changes into.
    admin.TenantCodeBody:
      type: object
      properties:
        tenantCodes:
          type: array
          items:
            type: string
          description: A list of a CA tenant's source tenants codes. The maximum length is 1000.
    admin.UpdateTenantModel:
      type: object
      properties:
        tenantDisplayName:
          type: string
          description: A display name that is assigned to the new analytic tenant.
        industryCode:
          type: integer
          description: |-
            The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 0.

             For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000.
          format: int32
        purchasedModules:
          type: array
          items:
            type: string
          description: A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If
             domains at the administrating tenant level match the domains at the analytic tenant level, you do not need
             to include a domain for each analytic tenant.
        customProperties:
          type: object
          additionalProperties:
            type: string
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
    admin.data.ImportDefinitionAPIDTO:
      type: object
      properties:
        connectorId:
          type: string
          description: The ID associated with the data connector.
        displayName:
          type: string
          description: An identifiable data connector name that is displayed within Visier.
        credentialId:
          type: string
          description: The ID associated with the connector credentials currently assigned to this data connector.
    admin.data.ImportDefinitionsAPIDTO:
      type: object
      properties:
        dataConnectors:
          type: array
          items:
            $ref: '#/components/schemas/admin.data.ImportDefinitionAPIDTO'
          description: A list of objects representing all the available data connectors in Production.
        limit:
          type: integer
          description: The number of data connectors to return. The maximum number of data connectors to return is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.jobs.ConsolidatedAnalyticsJobRequestDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the consolidated analytics tenant; for example, "WFF_j1r~CAa7s".
    admin.jobs.ExtractDataAndLoadDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            type: string
          description: A list of analytic tenants to dispatch extraction jobs for. One extraction job is dispatched per tenant. Only valid for requests from an administrating tenant.
        allTenants:
          type: boolean
          description: If `true`, one extraction job is dispatched for each accessible analytic tenant. Only valid for requests from an administrating tenant.
        overrideLastExtractionTimestamp:
          type: string
          description: An epoch timestamp in milliseconds from which to retrieve data. This overrides the last extraction date to retrieve more data.
        publishDataLoadArtifacts:
          type: boolean
          description: If `true`, the generated data load artifacts are published to production immediately.
        runProcessingJob:
          type: boolean
          description: If `true`, a processing job is spawned after a dispatched extraction job runs successfully.
        dataCategoryId:
          type: string
          description: The unique identifier of the data category on which to trigger the extraction job. Default is the tenant's primary data category.
        disableArtifactGeneration:
          type: boolean
          description: If `true`, the job does not generate data load artifacts. If unspecified, the default is `false`.
        connectorIds:
          type: array
          items:
            type: string
          description: The unique identifiers of the connectors to run extraction jobs.
        lastExtractionTimeOffsetWeeks:
          type: integer
          description: The number of weeks in the past to retrieve data. This overrides the last extraction date to retrieve more data.
          format: int32
        monthsToExtract:
          type: integer
          description: The number of months to retrieve snapshot data.
          format: int32
        extractToTimeOverride:
          type: string
          description: An epoch timestamp in milliseconds for the end time up to which to retrieve data.
        batchSizeOverride:
          type: integer
          description: The maximum number of subjects the job can retrieve in each batch.
          format: int32
        sqlBatchSize:
          type: integer
          description: The maximum number of SQL table records the job can retrieve in each batch.
          format: int32
        forceUpdateExistingArtifacts:
          type: boolean
          description: If `true` and `disableArtifactGeneration` is `false`, updates extractor artifacts, which may overwrite the artifacts' manual overrides. Ignored if `disableArtifactGeneration` is `true`.
        excludedTenants:
          type: array
          items:
            type: string
          description: The unique identifiers of the tenants to exclude from the extraction job. Only valid if `allTenants` is `true`. Only valid for requests from an administrating tenant.
        spillDebugInfoPartitionsDTO:
          enum:
            - spillNone
            - spillStagesAndRecords
            - spillAll
          type: string
          description: |-
            The partitioning of debugging info to be generated, if any. Valid values are:
             - `spillNone`: No debugging info is generated.
             - `spillStagesAndRecords`: Debugging info is generated for stages and records.
             - `spillAll`: Debugging info is generated for all partitions.
          format: enum
        spillDebugInfoDetailLevelDTO:
          enum:
            - fileAndLine
            - mappingName
          type: string
          description: |-
            The detail level of the debugging info to be generated. Valid values are:
             - `fileAndLine`: Debugging info is generated for file and line.
             - `mappingName`: Debugging info is generated for mapping name.
          format: enum
        lastExtractionTimeOffsetMonths:
          type: integer
          description: The number of months to offset the last extraction time. This overrides the last extraction date backward to retrieve more data.
          format: int32
        lastExtractionTimeOffsetMode:
          type: string
          description: The mode used to offset the last extraction time (weeks vs months)
        offsetWeekOption:
          type: string
          description: The week options used to offset the last extraction time (first of day / last of day)
        offsetMonthOption:
          type: string
          description: The month options used to offset the last extraction time (first of month / last of month)
        credentialId:
          type: string
          description: If running a job for the Databricks connector, specify the unique identifier of the connector credentials to use.
    admin.jobs.ProcessingJobRequestDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            type: string
          description: The tenant codes of the tenants to run processing jobs for. If omitted, runs a processing job for the tenant associated with the user who made the API request. Only valid for requests from an administrating tenant.
        allTenants:
          type: boolean
          description: If `true`, runs processing jobs for all accessible analytic tenants. Default is `false`. Only valid for requests from an administrating tenant.
        dataCategoryId:
          type: string
          description: |-
            The unique identifier of the data category to run the job. If omitted, runs a job using the primary data category.
             To retrieve a list of all data categories, see `GET /v1/op/data/categories`.
        publishToProduction:
          type: boolean
          description: If `true`, publishes the generated data version to production. Default is `false`.
        excludedTenants:
          type: array
          items:
            type: string
          description: The unique IDs of the tenants to exclude from the extraction job. Only valid if `allTenants` is "true". Only valid for requests from an administrating tenant.
    admin.AllTenantsStatusAPIDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantDetailAPIDTO'
          description: A list of objects representing all the analytic tenants.
        limit:
          type: integer
          description: The limit of analytic tenants to return. The maximum value is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.BatchTenantProvisionAPIDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
          description: An array of tenants to create. The maximum number of tenants to create in one request is 200.
    admin.BusinessLocationDTO:
      type: object
      properties:
        countryCode:
          type: string
          description: The country in which the business is located or business is performed. The country code must follow ISO 3166 standards in alpha-2 format (two-letter code).
        postalCode:
          type: string
          description: The postal code associated with the business location. Cannot be blank.
      description: The location of operations or where business is performed.
    admin.CustomPropertyDTO:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    admin.CustomTenantPropertyDTO:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    admin.ElementIDsDTO:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: The unique identifiers.
    admin.HomeAnalysisByUserGroupDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The user group ID.
        homeAnalysisId:
          type: string
          description: The unique ID of the analysis to show for this user group when a user logs in.
    admin.NetworkSubnetsMessageRequest:
      type: object
      properties:
        networkSubnetsForApi:
          type: array
          items:
            type: string
          description: The IP addresses in the request.
        confirmLockout:
          type: boolean
          description: If `true`, you acknowledge that the API call removes your IP address from the list of allowed network subnets and you will not be able to call Visier APIs from your current IP address. Default is `false`. To avoid this, add your current IP address to the allowed network subnets list.
      description: The IP addresses to modify in the API network subnet allowlist.
    admin.NetworkSubnetsMessageResponse:
      type: object
      properties:
        networkSubnetsForApi:
          type: array
          items:
            type: string
          description: The IP addresses that are allowed to call Visier APIs.
      description: The list of IP addresses that are allowed to call Visier APIs.
    admin.TenantDetailAPIDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant. For example, "WFF_j1r~i1o".
        tenantDisplayName:
          type: string
          description: An identifiable tenant name that is displayed within Visier. For example, "Callisto".
        status:
          type: string
          description: Whether the tenant is enabled or disabled.
        provisionDate:
          type: string
          description: The date that the tenant was created.
        currentDataVersion:
          type: string
          description: The data version ID that the tenant is using.
        dataVersionDate:
          type: string
          description: The date that the data version was published to production.
        modules:
          type: array
          items:
            $ref: '#/components/schemas/designer.TenantModuleDTO'
          description: The modules assigned to the analytic tenant.
        industryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs.
          format: uint32
        canAdministerOtherTenants:
          type: boolean
          description: If true, the tenant is an administrating tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomTenantPropertyDTO'
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        vanityUrlName:
          type: string
          description: The name of the administrating tenant used in Visier URLs.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, which can be used as values for the idp_url parameter
    admin.TenantDetailsTraitsDTO:
      type: object
      properties:
        aggregationRights:
          type: boolean
          description: If `true`, the tenant is opted in to Visier's data aggregation program, such as Visier Benchmarks. Default is `false`. If `false`, `aggregationRights` isn't returned in the response.
        tenantType:
          enum:
            - ROOT_ADMIN
            - ROOT
            - BLUEPRINT
            - ENTERPRISE
            - ENTERPRISE_ROOT
            - BENCHMARK
            - PARTNER
            - PARTNER_CUSTOMER
            - SMB_BP
            - SMB_CUSTOMER
            - UNKNOWN
          type: string
          description: |-
            The tenant's type. Valid values:
             * `ENTERPRISE`: An analytic tenant managed by Visier that represents an enterprise customer's instance of Visier.
             * `PARTNER`: An administrating tenant that manages one or more analytic tenants. Partner tenants are managed by non-Visier administrators, such as an embedded partner or system integration partner.
             * `PARTNER_CUSTOMER`: An analytic tenant managed by a partner that represents the partner's customer's instance of Visier.
          format: enum
        dataProfileType:
          enum:
            - Regular
            - Integration
            - Demo
            - Cat
            - Test
          type: string
          description: |-
            The tenant's data profile, which designates how the tenant's data is used. Valid values:
             * `Regular`: An analytic tenant managed by Visier that represents an enterprise customer's instance of Visier.
             * `Integration`: A partner tenant for development, staging, and testing.
             * `Demo`: A Visier tenant for demonstrations and training.
             * `Cat`: A consolidated analytics tenant for aggregating data from multiple analytic tenants in a single tenant.
             * `Test`: A Visier tenant for development and testing.
          format: enum
      description: The tenant's traits, including aggregation rights, tenant type, and data profile type.
    admin.TenantManagementAPIGetResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant. For example, "WFF_j1r~i1o"
        tenantDisplayName:
          type: string
          description: An identifiable tenant name that is displayed within Visier. For example, "Callisto".
        status:
          type: string
          description: Whether the tenant is enabled or disabled.
        provisionDate:
          type: string
          description: The date that the tenant was created.
        currentDataVersion:
          type: string
          description: The data version ID that the tenant is using.
        dataVersionDate:
          type: string
          description: The date that the data version was published to production.
        purchasedModules:
          type: array
          items:
            type: string
          description: The modules assigned to the analytic tenant.
        industryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs.
          format: uint32
        primaryBusinessLocation:
          allOf:
            - $ref: '#/components/schemas/admin.BusinessLocationDTO'
          description: The primary location of operations or where business is performed. If undefined, it is omitted from the response.
        canAdministerOtherTenants:
          type: boolean
          description: If true, the tenant is an administrating tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomPropertyDTO'
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        vanityUrlName:
          type: string
          description: The name of the administrating tenant used in Visier URLs.
        homeAnalysisId:
          type: string
          description: The unique ID of the analysis that's displayed for this tenant when a user logs in.
        homeAnalysisByUserGroup:
          type: array
          items:
            $ref: '#/components/schemas/admin.HomeAnalysisByUserGroupDTO'
          description: A list of objects representing the analysis displayed to specific user groups when users log in.
        clickThroughLink:
          type: string
          description: The custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content.
        clickThroughLinkEnabled:
          type: string
          description: Whether the click-through link is enabled or disabled.
        defaultCurrency:
          type: string
          description: The default currency to show in the application for the tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, that are allowed in the idp_url OAuth parameter.
        effectiveIndustryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs. This is calculated from industry codes in the tenant's data if the tenant has business unit data. Not returned if the effective industry code cannot be calculated.
          format: int32
        companySize:
          type: integer
          description: The latest headcount value for the analytic tenant. Not returned if no headcount data is available.
          format: int32
        traits:
          allOf:
            - $ref: '#/components/schemas/admin.TenantDetailsTraitsDTO'
          description: The tenant's traits, including aggregation rights, tenant type, and data profile type.
    admin.TenantManagementAPIListResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantManagementAPIGetResponseDTO'
          description: A list of objects representing all the analytic tenants.
        limit:
          type: integer
          description: The limit of analytic tenants to return. The maximum value is 1000. The default is 150.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.TenantManagementAPIUpdateRequestDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: A unique identifier for the newly created analytic tenant. Required if creating new tenants.
        tenantDisplayName:
          type: string
          description: A new display name to assign to the analytic tenant. Required if creating new tenants.
        tenantShortName:
          type: string
          description: A new short name to assign to the tenant. Required for analytic tenants.
        vanityUrlName:
          type: string
          description: A new vanity name to assign to the tenant. Omit for new Embedded analytic tenants.
        industryCode:
          type: integer
          description: |-
            The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 0.

             For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000. Required if creating new tenants.
          format: uint32
        primaryBusinessLocation:
          allOf:
            - $ref: '#/components/schemas/admin.BusinessLocationDTO'
          description: The primary location of operations or where business is performed. This field is optional.
        purchasedModules:
          type: array
          items:
            type: string
          description: |-
            A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant. Required if creating new tenants.

             To get the module name:
             1. In Visier, open a project and navigate to **Model > Modules**.
             2. Select a module.
             3. In **Basic Information**, copy the **Object name**. This is the module name.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If domains at the administrating tenant level match the domains at the analytic tenant level, you do not need to include a domain for each analytic tenant. This is optional.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomPropertyDTO'
          description: A list of objects that represent different customizable properties for the analytic tenant. This is optional.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant. This is optional.
        homeAnalysisId:
          type: string
          description: |-
            The unique ID of the analysis to display for this tenant when a user logs in. This is optional. Causes the API request to take longer because it must publish a project to production.

             Retrieve the ID by opening an analysis in the production version of a tenant and copying the string after the last forward slash (/) in the URL. For example: `https://jupiter.visier.com/hr/prod/appcontainer?previewId=-eZPm8xvo3SUMpD4Q5pdE-6mCj9CQ9K699XgqRGwtOxagH5x2IzDFawlWn3hYqFEfU7nP0YK9ASEzmrNfAihGg..&previewType=Production#/analytics/myanalyses/8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`.

             The `homeAnalysisID` is `8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`. Alternatively, retrieve the ID by copying the `Analysis ID` or `contentId` found by following the `Embed a Visualization` documentation.
        homeAnalysisByUserGroup:
          type: array
          items:
            $ref: '#/components/schemas/admin.HomeAnalysisByUserGroupDTO'
          description: A list of objects representing the analysis to display to specific user groups when users log in. This is optional. Causes the API request to take longer because it must publish a project to production.
        updateAction:
          enum:
            - MERGE
            - REPLACE
          type: string
          description: |-
            Specifies the way you want to update values. Default is MERGE.
             Valid values:
             - `MERGE`: Combine the existing values with the new values.
             - `REPLACE`: Remove existing values and let the new values take their place.
          format: enum
        enabled:
          type: boolean
          description: If true, the tenant is enabled. Enabled tenants have access to Visier visualizations.
        clickThroughLink:
          type: string
          description: A custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content. This is optional. Causes the API request to take longer because it must publish a project to production.
        defaultCurrency:
          type: string
          description: The default currency to show in the application for the tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, that are allowed in the idp_url OAuth parameter. This is optional.
        traits:
          allOf:
            - $ref: '#/components/schemas/admin.TenantDetailsTraitsDTO'
          description: The tenant's traits, including aggregation rights, tenant type, and data profile type.
    admin.TenantManagementAPIUpdateResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier of the newly created analytic tenant.
        tenantDisplayName:
          type: string
          description: A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant.
        industryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs.
          format: uint32
        primaryBusinessLocation:
          allOf:
            - $ref: '#/components/schemas/admin.BusinessLocationDTO'
          description: The primary location of operations or where business is performed. If undefined, it is omitted from the response.
        purchasedModules:
          type: array
          items:
            type: string
          description: A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If domains at the administrating tenant level match the domains at the analytic tenant level, you do not need to include a domain for each analytic tenant.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomPropertyDTO'
          description: A list of objects that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        homeAnalysisId:
          type: string
          description: |-
            The unique ID of the analysis to display for this tenant when a user logs in. This is optional.

             Retrieve the ID by opening an analysis in the production version of a tenant and copying the string after the last forward slash (/) in the URL. For example: https://jupiter.visier.com/hr/prod/appcontainer?previewId=-eZPm8xvo3SUMpD4Q5pdE-6mCj9CQ9K699XgqRGwtOxagH5x2IzDFawlWn3hYqFEfU7nP0YK9ASEzmrNfAihGg..&previewType=Production#/analytics/myanalyses/`8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`.
             The `homeAnalysisID` is `8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`.

             Alternatively, retrieve the ID by copying the `Analysis ID` or `contentId` found by following the `Embed a Visualization` documentation.
        homeAnalysisByUserGroup:
          type: array
          items:
            $ref: '#/components/schemas/admin.HomeAnalysisByUserGroupDTO'
          description: A list of objects representing the analysis to display to specific user groups when users log in.
        status:
          type: string
          description: Whether the tenant is enabled or disabled. Enabled tenants have access to Visier visualizations.
        clickThroughLink:
          type: string
          description: A custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content.
        vanityUrlName:
          type: string
          description: The name of the administrating tenant used in Visier URLs.
        defaultCurrency:
          type: string
          description: The default currency to show in the application for the tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, that are allowed in the idp_url OAuth parameter. This is optional.
    admin.TenantProvisionAPIDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier of the analytic tenant.
        tenantDisplayName:
          type: string
          description: The display name that is assigned to the analytic tenant.
        purchasedModules:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the Visier modules assigned to the analytic tenant.
        industryCode:
          type: integer
          description: |-
            The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 0.

             For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000.
          format: uint32
        embeddableDomains:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If
             domains at the administrating tenant level match the domains at the analytic tenant level, you do not need
             to include a domain for each analytic tenant.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomTenantPropertyDTO'
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of strings that represent the URLs, or domains, which can be used as values for the idp_url
             OAuth parameter.
    admin.TenantStatusAPIDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier for the analytic tenant.
        status:
          type: string
          description: Whether the tenant is enabled or disabled.
        tenantDisplayName:
          type: string
          description: The identifiable tenant name that is displayed within Visier. For example, "Callisto".
        canAdministerOtherTenants:
          type: boolean
          description: If true, the tenant is an administrating tenant.
    admin.UserGroupChangeDefinitionDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier of the user group. Omit if creating a new user group.
        displayName:
          type: string
          description: An identifiable user group name to display in Visier, such as "Leadership User Group".
        description:
          type: string
          description: A detailed description of the population and purpose of the user group.
        permissionIds:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: The unique identifiers of permissions assigned to members of this user group.
        users:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupChangeUsersDTO'
          description: The users assigned to the user group. You can define user group members dynamically with `dynamicFilterDefinition` or manually with `includeAllUsers` or `manuallyIncludedIds`.
        tenantCode:
          type: string
          description: |-
            The code of the tenant to which the user group belongs or should be created in.
             Omit if creating or updating user groups in the current tenant.
        projectId:
          type: string
          description: |-
            The project ID in which to update or create the user group.
             If omitted and the ProjectID request header is not defined, the change is published to production immediately.
    admin.UserGroupChangeDimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The object name of the dimension.
        subjectReferencePath:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: |-
            A qualifying path if the dimension is from an analytic object that references Employee.
             For example, use `subjectReferencePath` to create a filter on the `Employment_Start_Type` dimension from the `Employment_Start` object, which references `Employee`: `{ "ids": [ "Employee", "Employment_Start" ] }`.
        memberSelections:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeMemberSelectionDTO'
          description: The dimension members to select in the dynamic filter.
    admin.UserGroupChangeFailureDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the user group that couldn't be created.
        message:
          type: string
          description: The error message containing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        tenantCode:
          type: string
          description: The code of the tenant for which the user group could not be created or updated.
        projectId:
          type: string
          description: The ID of the project in which the user group could not be created or updated.
    admin.UserGroupChangeFilterDTO:
      type: object
      properties:
        filterId:
          type: string
          description: The unique identifier of the filter. Omit if creating a new filter.
        analyticObjectId:
          type: string
          description: The analytic object the filter applies to. Currently, the only supported analytic object is `Employee`. Default is `Employee`.
        dimensionFilters:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeDimensionFilterDTO'
          description: The dimensions in the dynamic filter.
    admin.UserGroupChangeMemberSelectionDTO:
      type: object
      properties:
        isExcluded:
          type: boolean
          description: If `true`, the specified member must not be defined for members of the user group.
        namePath:
          type: array
          items:
            type: string
          description: The name path for dimension members; for example, `[ "North America", "US", "CA" ]`.
    admin.UserGroupChangeResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeSuccessDTO'
          description: The user groups that were created.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeFailureDTO'
          description: The user groups that were not created.
    admin.UserGroupChangeSuccessDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the created user group.
        userGroupId:
          type: string
          description: The unique identifier of the user group.
        tenantCode:
          type: string
          description: The code of the tenant the user group was created or updated in.
        projectId:
          type: string
          description: The ID of the project the user group was created or updated in.
    admin.UserGroupChangeUsersDTO:
      type: object
      properties:
        includeAllUsers:
          type: boolean
          description: |-
            If `true`, all users are included in the user group. If `true`:
             * You can manually exclude users with `manuallyExcludedIds`.
             * Cannot be combined with `manuallyIncludedIds` or `dynamicFilterDefinition`.
        manuallyIncludedIds:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: |-
            Includes specified user IDs in the user group.
             * May be combined with `dynamicFilterDefinition`.
             * Omit if `includeAllUsers` is `true`.
        manuallyExcludedIds:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: |-
            Excludes specified user IDs from the user group.
             * You can manually exclude users if `includeAllUsers` is `true` or if `dynamicFilterDefinition` is defined.
             * Excluded IDs must not overlap with user IDs in `manuallyIncludedIds`.
        dynamicFilterDefinition:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupFiltersDTO'
          description: |-
            The filters that dynamically define a population through dimensions or dimensions accessible through references from the analytic object.
             * Omit if `includeAllUsers` is `true`.
             * You can combine dynamic filters with manually-assigned users.
    admin.UserGroupDeleteDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: |-
            The code of the tenant from which to delete the user group.
             Omit if deleting user groups in the current tenant.
        userGroupId:
          type: string
          description: Unique identifier for the user group.
        projectId:
          type: string
          description: |-
            The project ID in which to delete the user group.
             If omitted and the `ProjectID` request header is not defined, the change is published to production immediately.
    admin.UserGroupDeleteFailureDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant from which the user group could not be deleted.
        userGroupId:
          type: string
          description: The unique identifier of the user group that could not be deleted.
        message:
          type: string
          description: The error message containing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        projectId:
          type: string
          description: The ID of the project in which the user group could not be deleted.
    admin.UserGroupDeleteResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupDeleteSuccessDTO'
          description: The user groups that were successfully deleted.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupDeleteFailureDTO'
          description: The user groups that were not deleted successfully.
    admin.UserGroupDeleteSuccessDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant the user group was deleted from.
        userGroupId:
          type: string
          description: The unique identifier of the user group that was deleted.
        projectId:
          type: string
          description: The ID of the project in which user group was deleted.
    admin.UserGroupFiltersDTO:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeFilterDTO'
          description: The filters that define user group membership.
    admin.UserGroupSingleDeleteResponseDTO:
      type: object
      properties:
        success:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupDeleteSuccessDTO'
          description: The user group was successfully deleted.
        failure:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupDeleteFailureDTO'
          description: The user group was not successfully deleted.
    admin.UserGroupsChangeDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeDefinitionDTO'
          description: The user groups and their definitions.
    admin.UserGroupsDeleteRequestDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupDeleteDTO'
          description: The user groups to delete.
    admin.AssignConnectorCredentialsByTenantResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/admin.AssignConnectorWithCredentialsResponseDTO'
          description: A list of objects representing the assigned credentials and connectors.
        status:
          enum:
            - Unknown
            - Succeed
            - Failed
          type: string
          description: The state of the credential assignment. Valid values are Succeed or Failed.
          format: enum
        message:
          type: string
    admin.AssignConnectorCredentialsResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.AssignConnectorCredentialsByTenantResponseDTO'
          description: A list of objects representing the tenants and data connectors that were assigned connector credentials.
    admin.AssignConnectorWithCredentialsResponseDTO:
      type: object
      properties:
        connector:
          allOf:
            - $ref: '#/components/schemas/admin.ConnectorInfoResponseDTO'
          description: The data connector that was assigned a connector credential.
        credential:
          allOf:
            - $ref: '#/components/schemas/admin.AssignedCredentialInfoResponseDTO'
          description: A connector credential that was assigned to a data connector
    admin.AssignedCredentialInfoResponseDTO:
      type: object
      properties:
        credentialId:
          type: string
          description: The unique identifier associated with the user.
        displayName:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        message:
          type: string
    admin.ConnectorInfoResponseDTO:
      type: object
      properties:
        connectorId:
          type: string
          description: The unique identifier associated with the data connector.
        displayName:
          type: string
          description: An identifiable data connector name that is displayed within Visier.
        description:
          type: string
    admin.ConnectorSettingRequestDTO:
      type: object
      properties:
        settingKey:
          type: string
          description: The unique identifier associated with the setting.
        value:
          type: string
          description: The setting's value.
    admin.ConnectorSettingResponseDTO:
      type: object
      properties:
        key:
          type: string
          description: The unique identifier of the connector setting.
        value:
          type: string
          description: The value that was set for the connector setting.
        message:
          type: string
    admin.ConnectorSettingsResponseDTO:
      type: object
      properties:
        connector:
          allOf:
            - $ref: '#/components/schemas/admin.ConnectorInfoResponseDTO'
          description: The data connector that was updated in the API request.
        settings:
          type: array
          items:
            $ref: '#/components/schemas/admin.ConnectorSettingResponseDTO'
          description: The settings that were updated for a data connector.
    admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO:
      type: object
      properties:
        excludedSources:
          type: array
          items:
            type: string
          description: A list of the CA tenant's excluded sources.
    admin.ConsolidatedAnalyticsAPISourceTenantListDTO:
      type: object
      properties:
        tenantCodes:
          type: array
          items:
            type: string
          description: A list of the CA tenant's source tenants.
    admin.ConsolidatedAnalyticsAPITenantCreateRequestDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
    admin.ConsolidatedAnalyticsAPITenantListResponseDTO:
      type: object
      properties:
        tenantCodes:
          type: array
          items:
            type: string
          description: A list of CA tenant codes.
    admin.ConsolidatedAnalyticsAPITenantWithDetails:
      type: object
      properties:
        tenantCode:
          type: string
          description: The CA tenant's code.
        sourceTenantsList:
          type: array
          items:
            type: string
          description: A list of the CA tenant's source tenants.
        excludedSourcesList:
          type: array
          items:
            type: string
          description: A list of the CA tenant's excluded sources.
    admin.ConsolidatedAnalyticsAPITenantWithDetailsListResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantWithDetails'
          description: A list of CA tenants and their details.
    admin.DataVersionAndDateDTO:
      type: object
      properties:
        dataVersion:
          type: string
          description: The data version ID.
        dataVersionDate:
          type: string
          description: The date that the data version was created.
    admin.EmailDomainsDTO:
      type: object
      properties:
        domains:
          type: array
          items:
            type: string
          description: The list of allowed email address domains.
        confirmNotAllowedDomain:
          type: boolean
          description: If `true`, you cannot sign in using credentials, such as username and password. You can only log in with single sign-on (SSO). To avoid this, add your current email address's domain to allowed domains list.
    admin.ExtractorSettingAPIDTO:
      type: object
      properties:
        connectorId:
          type: string
          description: The unique identifier associated with the data connector.
        displayName:
          type: string
          description: An identifiable data connector name that is displayed within Visier.
        connectorSettings:
          type: array
          items:
            $ref: '#/components/schemas/admin.ExtractorSettingKeyValueAPIDTO'
          description: A list of objects representing the settings that are available for the data connector.
    admin.ExtractorSettingKeyValueAPIDTO:
      type: object
      properties:
        settingKey:
          type: string
          description: The unique identifier associated with the setting.
        value:
          type: string
          description: The current value of the setting.
    admin.ExtractorSettingsAPIDTO:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/admin.ExtractorSettingAPIDTO'
          description: A list of all data connectors in the production environment and their settings.
    admin.MultipleTenantDataVersionsDetailsDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The owner of the data versions.
        dataVersions:
          type: array
          items:
            $ref: '#/components/schemas/admin.DataVersionAndDateDTO'
          description: |-
            The latest enabled data versions for the given analytic tenant. If the analytic tenant
             has no enabled data versions, an empty string "" is returned.
    admin.MultipleTenantDataVersionsListDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.MultipleTenantDataVersionsDetailsDTO'
          description: A list of analytic tenants and their latest enabled data versions.
        limit:
          type: integer
          description: The number of analytic tenants to retrieve. The maximum number to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
    admin.PermissionResponseDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
    admin.PermissionsToUserGroupForTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        status:
          type: string
          description: The state of the permission assignment or removal. Valid values are Succeed or Failed.
        message:
          type: string
          description: A detailed description of the request outcome, if available.
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupGetAPIResponseDTO'
          description: A list of objects representing user groups and the permissions to assign to or remove from them.
    admin.PermissionsToUserGroupRequestDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier associated with the user group.
        permissionsIds:
          type: array
          items:
            type: string
          description: A list of strings representing the unique permission IDs to assign.
    admin.PermissionsToUserGroupsRequestDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.PermissionsToUserGroupRequestDTO'
          description: A list of objects representing the user groups and permissions to assign or remove.
    admin.ProductReleaseDTO:
      type: object
      properties:
        productId:
          type: string
          description: The unique ID of the product.
        previousVersion:
          type: string
          description: The release version being replaced by the latest version.
        previousVersionEndDate:
          type: string
          description: The end-of-life date for the previous release version. Once this date has passed, the latest version will be automatically activated on all tenants. The format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
        latestVersion:
          type: string
          description: The release version that replaces previous versions.
      description: Details about the available release versions for a specific product.
    admin.ProductReleasesDTO:
      type: object
      properties:
        releases:
          type: array
          items:
            $ref: '#/components/schemas/admin.ProductReleaseDTO'
          description: A list of products and details about their available release versions.
      description: A collection of products and details about their available release versions.
    admin.ProductVersionDTO:
      type: object
      properties:
        productId:
          type: string
          description: The unique ID of the product.
        version:
          type: string
          description: The release version of the product.
        tenantCodes:
          type: array
          items:
            type: string
          description: The tenants you want to execute the API call on. Retrieve or activate the product release versions on these tenants.
      description: Provides information about the product release version of a tenant. It is used when retrieving the active product release version and activating the product release version.
    admin.ProductVersionsDTO:
      type: object
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/admin.ProductVersionDTO'
          description: A list of products and their current release versions for a tenant.
      description: A collection of products and their current release version for a tenant.
    admin.ProductVersionsUpdateFailureTenantResponseDTO:
      type: object
      properties:
        productId:
          type: string
          description: The unique ID of the product that failed to activate.
        version:
          type: string
          description: The release version of the product that was being activated.
        tenantCodes:
          type: array
          items:
            type: string
          description: The tenants where the specified release version failed to activate.
        message:
          type: string
          description: More information about why the activation failed.
      description: Provides details about the failed activation of a product release version.
    admin.ProductVersionsUpdateResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/admin.ProductVersionsUpdateSuccessfulTenantResponseDTO'
          description: The products that were successfully activated.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/admin.ProductVersionsUpdateFailureTenantResponseDTO'
          description: The products that failed to activate.
      description: A collection of responses indicating the success or failure of a product release version activation request, including lists of tenants with successful or failed activations.
    admin.ProductVersionsUpdateSuccessfulTenantResponseDTO:
      type: object
      properties:
        productId:
          type: string
          description: The unique ID of the product that was successfully activated.
        version:
          type: string
          description: The release version of the product that was activated.
        tenantCodes:
          type: array
          items:
            type: string
          description: The tenants where the specified release version was succesfully activated.
      description: Provides confirmation details about the successful activation of a product release version.
    admin.SecurityAssignmentResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantAssignmentsDTO'
          description: A list of objects representing the tenants and users that were assigned to or removed from user groups.
    admin.SetConnectorSettingRequestDTO:
      type: object
      properties:
        connectorId:
          type: string
          description: The unique identifier associated with the data connector.
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantConnectorSettingsRequestDTO'
          description: The tenant codes and data connector settings to update.
    admin.SetConnectorSettingResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/admin.ConnectorSettingsResponseDTO'
          description: A list of objects representing the assigned settings and connectors.
        status:
          enum:
            - Unknown
            - Succeed
            - Failed
          type: string
          description: The state of the setting assignment. Valid values are Succeed or Failed.
          format: enum
        message:
          type: string
    admin.SetConnectorSettingsRequestDTO:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/admin.SetConnectorSettingRequestDTO'
          description: The settings to define for each data connector and tenant.
    admin.SetConnectorSettingsResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.SetConnectorSettingResponseDTO'
          description: The tenants and data connectors that were updated in the API request.
    admin.SimpleUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
    admin.TargetProjectForTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code.
        projectId:
          type: string
          description: The project in which to make changes for the tenant.
    admin.TargetProjectForTenantsListDTO:
      type: object
      properties:
        targetProjectForTenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TargetProjectForTenantDTO'
          description: |-
            Administrating tenants can specify the tenants and projects in which to make assignments to users. Specify one `projectId` per `tenantCode`.
             If omitted, the request is immediately published to production or applied to the `ProjectID` in the request header, if available, for the administrating tenant or TargetTenantID, if available.
    admin.TenantAssignmentsDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        status:
          enum:
            - Unknown
            - Succeed
            - Failed
          type: string
          description: The state of the user group assignment. Valid values are Succeed or Failed.
          format: enum
        message:
          type: string
          description: A detailed description of the request outcome, if available.
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserSecurityAssignmentsDTO'
          description: A list of objects representing the user group and user assignments.
        projectId:
          type: string
          description: The ID of the project that the change was made in, if applicable.
    admin.TenantConnectorSettingsRequestDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        connectorSettings:
          type: array
          items:
            $ref: '#/components/schemas/admin.ConnectorSettingRequestDTO'
          description: The settings to update.
    admin.UserGroupGetAPIResponseDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier associated with the user group.
        displayName:
          type: string
          description: An identifiable user group name to display in Visier, such as "Leadership User Group".
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/admin.PermissionResponseDTO'
          description: A list of objects representing the user's permissions.
    admin.UserGroupsGetAPIResponseDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupGetAPIResponseDTO'
          description: A list of user groups.
        limit:
          type: integer
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset.
          format: uint32
    admin.UserGroupsUsersDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupsUsersForTenantDTO'
          description: A list of objects representing the users that are explicitly assigned to the user group, organized by the tenants the users belong to.
        limit:
          type: integer
          description: The limit of results to return. The maximum value is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.UserGroupsUsersForTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        users:
          type: array
          items:
            $ref: '#/components/schemas/admin.SimpleUserDTO'
          description: A list of objects representing the users in the user group.
    admin.UserSecurityAssignmentsDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the user group.
        name:
          type: string
          description: The name of the user group.
        users:
          type: array
          items:
            $ref: '#/components/schemas/admin.SimpleUserDTO'
          description: A list of objects representing the users assigned to or removed from the user group.
    admin.UsersToUserGroupRequestDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier associated with the user group.
        userIds:
          type: array
          items:
            type: string
          description: A list of strings representing unique user IDs to assign to or remove from the user group. The maximum number of `userIds` per user group is 100.
    admin.UsersToUserGroupsRequestDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UsersToUserGroupRequestDTO'
          description: A list of objects representing the user groups and users to assign or remove.
        targetProjectForTenantsList:
          allOf:
            - $ref: '#/components/schemas/admin.TargetProjectForTenantsListDTO'
          description: |-
            Administrating tenants can specify the tenants and projects in which to assign users to user groups or remove users from user groups. Specify one `projectId` per `tenantCode`.
             If omitted, the request is immediately published to production or applied to the ProjectID in the request header, if available, for the administrating tenant or TargetTenantID, if available.
    analysis.common.ReportCreateRequestDTO:
      type: object
      properties:
        title:
          type: string
          description: The localized title of the report.
        description:
          type: string
          description: The localized description of the report.
      description: The request to create a new report.
    analysis.common.ReportDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the report.
        title:
          type: string
          description: The localized title of the report.
        description:
          type: string
          description: The localized description of the report.
        updatedTime:
          type: string
          description: The time in epoch milliseconds when the report was last updated.
        isPublishedReport:
          type: boolean
          description: If `true`, the report is published through a project.
        owner:
          type: string
          description: The owner of the report.
        isOwnedByUser:
          type: boolean
          description: If `true`, you are the owner of the report.
        allowedActions:
          type: array
          items:
            enum:
              - duplicate
              - delete
              - edit
              - download
              - share
            type: string
            format: enum
          description: |-
            The actions that you can perform on the report.

             Valid values are:
             - `duplicate`: The user can make their own copy of this report.
             - `delete`: The user can delete this report.
             - `edit`: The user can edit this report directly.
             - `download`: The user can download this report as a CSV.
             - `share`: The user can share this report with other users or user groups.
        link:
          type: string
          description: The link to the report.
      description: The information of a single report.
    analysis.common.ReportDeleteSuccessDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the deleted report.
      description: The report that was successfully deleted.
    analysis.common.ReportListResponseDTO:
      type: object
      properties:
        reports:
          type: array
          items:
            $ref: '#/components/schemas/analysis.common.ReportDTO'
          description: A list of reports.
      description: The information of all the reports you have access to in your tenant.
    analysis.common.VeeClarificationDTO:
      type: object
      properties:
        message:
          type: string
          description: Returned if Vee needs more context to answer your question.
        questions:
          type: array
          items:
            type: string
          description: Additional questions you can ask that are similar or related to your question.
        metrics:
          type: array
          items:
            type: string
          description: Suggested metrics to look at that are similar or related to your question.
        dimensions:
          type: array
          items:
            type: string
          description: Suggested dimensions to look at that are similar or related to your question.
        filters:
          type: array
          items:
            type: string
          description: Suggested filters that could be a better fit for the data.
        attributes:
          type: array
          items:
            type: string
          description: Suggested attributes to look at that are similar or related to your question.
    analysis.common.VeeConversationDTO:
      type: object
      properties:
        conversationState:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeConversationStateDTO'
          description: The conversation's details. To submit feedback about Vee's answer, copy the entire conversation state from the `/question` response into your `/feedback` call.
    analysis.common.VeeConversationStateDTO:
      type: object
      properties:
        questionState:
          type: array
          items:
            type: string
          description: The unique identifier of the conversation with Vee.
    analysis.common.VeeCorrectionsDTO:
      type: object
      properties:
        warning:
          type: array
          items:
            enum:
              - VEE_NO_WARNING
              - VEE_WARNING_RESPONSE_NOT_FOUND
              - VEE_WARNING_RESPONSE_LOW_CONFIDENCE
              - VEE_WARNING_RESPONSE_FOUND_CLOSE_MATCH
              - VEE_WARNING_NO_ACCESS
              - VEE_WARNING_TIME_SELECTION_ADJUSTED
              - VEE_WARNING_FILTER_DROPPED
            type: string
            format: enum
          description: A list of warnings from Vee that accompanies an unsure answer; for example, Vee might return a close match warning if Vee finds multiple employees named Adam that relate to your question.
        clarifications:
          type: array
          items:
            $ref: '#/components/schemas/analysis.common.VeeClarificationDTO'
          description: A list of clarifying questions if Vee needs more context to answer your question; for example, if asking about someone named Adam, Vee might clarify which Adam by asking for Adam's email address.
    analysis.common.VeeDataDTO:
      type: object
      properties:
        dataJson:
          type: string
          description: A JSON string of fields and numerical values representing the data contributing to Vee's answer. For example, the number of employees per gender in Vee's answer.
        context:
          type: string
          description: The filter applied to the visualization generated by Vee. For example, a time filter of April 2024.
    analysis.common.VeeFeedbackDTO:
      type: object
      properties:
        conversation:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeConversationDTO'
          description: Details of the Vee conversation you want to provide feedback about.
        isApproved:
          type: boolean
          description: If `true`, Vee answered the question correctly. If `false`, Vee's answer was incorrect or lacked details.
        description:
          type: string
          description: A description of how Vee should have answered the question or how Vee can improve the answer; for example, "Expected Headcount metric, but Vee returned Average Headcount".
      description: The request body fields to submit Vee feedback.
    analysis.common.VeeOptionsDTO:
      type: object
      properties:
        includeVisual:
          type: boolean
          description: If `true`, returns a base64 string-encoded PNG of a rendered visualization with Vee's answer. Default is `false`.
        visualOptions:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeVisualOptionsDTO'
          description: Specify how to render the visualization.
        includeData:
          type: boolean
          description: If `true`, returns additional data relevant to the question, including `dataJson` (visualization data) and `context` (filters applied to the visualization). Default is `false`.
        dataFormat:
          enum:
            - json
          type: string
          description: 'The format to return visualization data in. Valid values: `json`.'
          format: enum
        includeRewordedQuestion:
          type: boolean
          description: If `true`, returns Vee's plain language interpretation of the original question. For example, if you asked "what is the headcount by gender in each org?", Vee might reword the question as "What is the gender breakdown of our workforce by organization this month?". Default is `false`.
    analysis.common.VeeQuestionDTO:
      type: object
      properties:
        question:
          type: string
          description: The question to ask Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response.
        conversationState:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeConversationStateDTO'
          description: The unique identifier of the conversation with Vee. If empty, starts a new conversation with Vee. If asking a follow-up question or continuing a conversation with Vee, specify the `conversationState` object from the question's response. To submit feedback about Vee's answer, copy the entire response into your `/feedback` call.
        options:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeOptionsDTO'
          description: Options to specify how Vee should respond to a question.
        maxViewDetailsMembers:
          type: integer
          description: The maximum number of members to return in Detailed View.
          format: uint32
      description: The request body fields to ask Vee a question.
    analysis.common.VeeResponseDTO:
      type: object
      properties:
        conversationState:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeConversationStateDTO'
          description: The current conversation's details. To ask a follow-up question or continue the conversation with Vee, include the `conversationState` from the response in your next `/question` call. To submit feedback about Vee's answer, copy the entire response into your `/feedback` call.
        statusCode:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeStatusCodeDTO'
          description: A status code indicating whether or not Vee successfully answered the question.
        narrative:
          type: string
          description: Vee's answer to the question.
        chartUrl:
          type: string
          description: A URL to view the visualization in Visier.
        schema:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeResponseSchemaDTO'
          description: The metrics, dimensions, and concepts that contribute to Vee's answer.
        corrections:
          type: array
          items:
            $ref: '#/components/schemas/analysis.common.VeeCorrectionsDTO'
          description: A list of corrections and clarifications if the question was ambiguous or Vee was unsure in the answer.
        data:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeDataDTO'
          description: Returned if `includeData` is `true`. Provides additional data relevant to the question, such as the visualization data and any filters applied to the visualization.
        visual:
          allOf:
            - $ref: '#/components/schemas/analysis.common.VeeVisualDTO'
          description: A base64 string-encoded PNG of a visualization generated by Vee to answer a question. For example, Vee can return a Breakdown visualization if asked about the headcount in each organization.
        rewordedQuestion:
          type: string
          description: Vee's plain language interpretation of the original question. For example, if you asked "what is the headcount by gender in each org?", Vee might reword the question as "What is the gender breakdown of our workforce by organization this month?".
      description: The response after asking Vee a question.
    analysis.common.VeeResponseSchemaDTO:
      type: object
      properties:
        metrics:
          type: array
          items:
            type: string
          description: A list of the metrics that contribute to Vee's answer.
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/analysis.common.VeeResponseSchemaReferenceDTO'
          description: A list of the dimensions that contribute to Vee's answer.
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/analysis.common.VeeResponseSchemaReferenceDTO'
          description: A list of the concepts that contribute to Vee's answer.
    analysis.common.VeeResponseSchemaReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The name of an attribute in the visualization; for example, Gender.
        paths:
          type: array
          items:
            type: string
          description: The hierarchy path of an attribute in the visualization; for example, Employee.Gender.
    analysis.common.VeeSampleQuestionDTO:
      type: object
      properties:
        question:
          type: string
          description: A question in plain language.
        questionId:
          type: string
          description: The unique identifier of the sample question.
        categoryId:
          type: string
          description: The unique identifier of the question category.
        isAssignedToUser:
          type: boolean
          description: If `true`, the sample question is assigned to at least one of the user's user groups.
    analysis.common.VeeSampleQuestionLibraryDTO:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/analysis.common.VeeSampleQuestionDTO'
          description: A list of sample questions to help your users start using Vee.
      description: A list of sample questions to ask Vee.
    analysis.common.VeeStatusCodeDTO:
      type: object
      properties:
        statusCode:
          enum:
            - UNDEFINED
            - VEE_API_SUCCESS
            - VEE_API_WARNING
            - VEE_API_ERROR
          type: string
          description: A status code indicating whether or not Vee successfully answered the question.
          format: enum
        statusMsg:
          type: string
          description: Additional information about whether or not Vee successfully answered the question.
    analysis.common.VeeVisualDTO:
      type: object
      properties:
        image:
          type: string
          description: A PNG visualization encoded in a base64 string.
        title:
          type: string
          description: The visualization title.
        context:
          type: string
          description: Any filters applied to the visualization. For example, a time filter of April 2024.
    analysis.common.VeeVisualOptionsDTO:
      type: object
      properties:
        width:
          type: integer
          description: The pixel width of the rendered visualization. Default is 600. Valid values are between 160 and 1600.
          format: uint32
        height:
          type: integer
          description: The pixel height of the rendered visualization. Default is 338. Valid values are between 90 and 900.
          format: uint32
    authentication.OAuth2UserInfoDTO:
      type: object
      properties:
        subject:
          type: string
          description: The user's display name.
        name:
          type: string
          description: The user's Common Name.
        email:
          type: string
          description: The user's email address.
        visier:user_id:
          type: string
          description: The user's unique ID.
        visier:capabilities:
          allOf:
            - $ref: '#/components/schemas/servicing.ServicingCapabilityProtoEnumAccessLookupDTO'
          description: The user's profile capabilities.
        visier:subnets:
          allOf:
            - $ref: '#/components/schemas/authentication.OAuth2UserSubnetInfoDTO'
          description: Subnet restrictions controlling the IP addresses from which users can access the tenant.
        visier:export_subnets:
          allOf:
            - $ref: '#/components/schemas/authentication.OAuth2UserSubnetInfoDTO'
          description: Subnet restrictions controlling the IP addresses from which data and metadata requests can be made.
        visier:tenant_details:
          allOf:
            - $ref: '#/components/schemas/authentication.OAuth2UserTenantDetailsDTO'
          description: Detailed information about the analytic tenant. Included in the response if `includeTenantDetail` is `true`.
      description: Response from OAuth 2 `userinfo` endpoint.
    authentication.OAuth2UserSubnetInfoDTO:
      type: object
      properties:
        accessType:
          enum:
            - Unknown
            - All
            - Restricted
            - None
          type: string
          description: |-
            The type of subnet access granted to the user. Possible values are:
             * `Unknown`: Could not determine subnet access details.
             * `All`: No subnet restrictions.
             * `Restricted`: Access is only granted to requests originating from the specified `subnets`.
             * `None`: Access is denied. Only applicable to the Data Export API.
          format: enum
        subnets:
          type: array
          items:
            type: string
          description: 'The list of trusted IP addresses from which access is granted if accessType is `Restricted`. Must be in Classless Inter-Domain Routing (CIDR) format: `xxx.xxx.xxx.xxx/xx`.'
      description: Subnet access details.
    authentication.OAuth2UserTenantDetailDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant's unique ID.
        displayName:
          type: string
          description: The tenant's display name.
        properties:
          allOf:
            - $ref: '#/components/schemas/authentication.OAuth2UserTenantPropertiesDTO'
          description: The tenant's properties.
      description: Tenant detail information.
    authentication.OAuth2UserTenantDetailsDTO:
      type: object
      properties:
        details:
          type: array
          items:
            $ref: '#/components/schemas/authentication.OAuth2UserTenantDetailDTO'
          description: The details of all accessible analytic tenants.
      description: The details of all accessible analytic tenants
    authentication.OAuth2UserTenantPropertiesDTO:
      type: object
      properties:
        vanityUrlName:
          type: string
          description: The tenant's vanity name.
      description: Detailed information about the tenant.
    data_in.AssignConnectorCredentialRequest:
      type: object
      properties:
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/data_in.Connector'
          description: A list of objects representing the data connectors to be assigned with credentials.
    data_in.Connector:
      type: object
      properties:
        connectorId:
          type: string
          description: The unique identifier associated with the data connector.
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/data_in.TenantAndCredential'
          description: A list of analytic tenants and credentials to be assigned to the connector.
    data_in.DataLoadRequest:
      type: object
      properties:
        model:
          allOf:
            - $ref: '#/components/schemas/data_in.DataLoadRequestModel'
          description: A form body key that contains a collection of key-value pairs.
    data_in.DataLoadRequestModel:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of file names.
             Example:
             `"files": "/path/to/file1.zip.gpg,/path/to/another/file.zip.gpg"`
        skipDataLoad:
          type: boolean
          description: If `true`, receives the files and skips data loading. Does not generate a data version.
    data_in.DataLoadResponse:
      type: object
      properties:
        jobId:
          type: string
          description: The unique identifier associated with the receiving job.
    data_in.DataTransferResultDetail:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant that data was transferred to. For example, WFF_j1r or WFF_j1r~c7o.
        sourceNames:
          type: array
          items:
            type: string
          description: A list of strings representing the sources that received a data transfer.
        dataSize:
          type: string
          description: The total size of the transfer session in bytes.
        rows:
          type: string
          description: The total number of rows transferred during the transfer session.
    data_in.DataVersionObject:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code for the analytic tenant that you are disabling a data version.
        dataVersion:
          type: string
          description: |-
            The data version to disable for a particular analytic tenant.
             If not specified, disables the latest enabled data version for the analytic tenant.
        dataCategory:
          type: string
          description: |-
            The object name of the data category. Default is the primary data category.
             For administrating tenants, the data category must exist in the requesting tenant; that is, the administrating tenant or the tenant specified in `TargetTenantID`.
    data_in.DisableDVModel:
      type: object
      properties:
        dataVersionObjects:
          type: array
          items:
            $ref: '#/components/schemas/data_in.DataVersionObject'
          description: |-
            A list of objects representing the data version to disable for a particular analytic tenant.
             The limit of objects to include per request is 1000.
    data_in.DisableDVRequest:
      type: object
      properties:
        model:
          allOf:
            - $ref: '#/components/schemas/data_in.DisableDVModel'
          description: A form body key that contains a collection of key-value pairs.
    data_in.DisableDVResponse:
      type: object
      properties:
        totalFailures:
          type: integer
          description: The number of data versions that failed during the disabling process.
          format: int32
        totalSuccess:
          type: integer
          description: The number of data versions that were disabled successfully.
          format: int32
        results:
          type: array
          items:
            $ref: '#/components/schemas/data_in.Result'
          description: A list of objects representing the disabling process.
    data_in.DispatchingJobStatusResponse:
      type: object
      properties:
        jobId:
          type: string
          description: The ID of the dispatching job that generated the extraction jobs.
        tenantCode:
          type: string
          description: The tenant that owns the dispatching job. This is usually the administrating tenant.
        status:
          type: string
          description: The current state of the job.
        totalJobsDispatched:
          type: integer
          description: The number of extraction jobs that were generated by the dispatching job.
          format: int32
    data_in.ExcludeDataUploadsRequest:
      type: object
      properties:
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/data_in.UploadToExclude'
          description: A list of objects representing the data uploads to exclude for a particular analytic tenant.
    data_in.ExtractionJob:
      type: object
      properties:
        extractionJobId:
          type: string
          description: The ID of the extraction job.
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant for the extraction job.
        status:
          type: string
          description: |-
            The current state of the job.
             - Valid values: Pending, Running, Succeeded, Failed, Error, Cancelling, Cancelled, RolledBack, Rescheduling, Rescheduled.
        currentStage:
          type: string
          description: |-
            The current stage of the job. This is not returned if the stage is "Completed".
             - Valid values: Initialize, Retrieve Main Subject, Retrieve Secondary Subjects, Retrieve Custom Subjects, Process Records, Publish Artifacts, Publish Records, Completed.
    data_in.ExtractionJobAndStatusResponse:
      type: object
      properties:
        parentJobId:
          type: string
          description: The ID of the dispatching job that generated the extraction jobs.
        parentTenantCode:
          type: string
          description: The tenant that owns the dispatching job. This is usually the administrating tenant.
        limit:
          type: integer
          description: The number of extraction jobs to return. The maximum number of jobs to return is 1000.
          format: int32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: int32
        extractionJobs:
          type: array
          items:
            $ref: '#/components/schemas/data_in.ExtractionJob'
          description: A list of extraction job information.
    data_in.IncludeDataUploadsRequest:
      type: object
      properties:
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/data_in.UploadToInclude'
          description: A list of objects representing the data uploads to include for a particular analytic tenant.
    data_in.JobStatusListResponse:
      type: object
      properties:
        queryStartTime:
          type: string
          description: The start time from which to retrieve job statuses.
        queryEndTime:
          type: string
          description: The end time from which to retrieve job statuses.
        jobStatus:
          type: array
          items:
            $ref: '#/components/schemas/data_in.JobStatusWithStartTime'
          description: The specific status to restrict the list of jobs to.
    data_in.JobStatusWithStartTime:
      type: object
      properties:
        jobId:
          type: string
          description: The unique ID of the job.
        tenant:
          type: string
          description: The tenant code.
        status:
          type: string
          description: The status of the job, such as Running or Completed.
        jobType:
          type: string
          description: The type of the job, such as a processing job or receiving job.
        startTime:
          type: string
          description: The time that the job started.
    data_in.ProcessingJob:
      type: object
      properties:
        jobId:
          type: string
          description: The job ID of the processing job for the analytic tenant.
        tenantCode:
          type: string
          description: The analytic tenant code.
        dataVersion:
          type: string
          description: The data version associated with the processing job.
        status:
          type: string
          description: The status of the receiving job for the analytic tenant.
        message:
          type: string
          description: A meaningful message about the processing job.
    data_in.ProcessingJobAndStatusResponse:
      type: object
      properties:
        parentJobId:
          type: string
          description: The ID of the dispatching job that generated the extraction jobs.
        parentTenantCode:
          type: string
          description: The tenant that owns the dispatching job. This is usually the administrating tenant.
        limit:
          type: integer
          description: The number of processing jobs to return. The maximum number of jobs to return is 1000.
          format: int32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: int32
        processingJobs:
          type: array
          items:
            $ref: '#/components/schemas/data_in.ProcessingJob'
          description: A list of processing job information.
    data_in.ProcessingJobStatusResponse:
      type: object
      properties:
        parentJobId:
          type: string
          description: The job ID of the receiving job that spawned this job.
        parentTenantCode:
          type: string
          description: The tenant code of the receiving job that spawned this job.
        limit:
          type: integer
          description: The limit of processing jobs to retrieve per page.
          format: int32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: int32
        processingJobs:
          type: array
          items:
            $ref: '#/components/schemas/data_in.ProcessingJob'
          description: A list of objects representing the processing jobs to retrieve.
    data_in.PushDataCancelResponse:
      type: object
      properties:
        message:
          type: string
          description: A meaningful message about the transfer session.
        transferSessionId:
          type: string
          description: The unique identifier associated with the transfer session.
        dataTransferResultDetails:
          type: array
          items:
            $ref: '#/components/schemas/data_in.DataTransferResultDetail'
          description: A list of objects representing the results of the transfer session.
        status:
          type: string
          description: The status of the transfer session. A cancelled session returns the status CANCELLED.
    data_in.PushDataCompleteRequest:
      type: object
      properties:
        transferSessionId:
          type: string
          description: The unique identifier associated with the transfer session.
        processingData:
          type: boolean
          description: If `true`, a processing job will be triggered after the receiving job successfully completes. This generates a new data version.
    data_in.PushDataCompleteResponse:
      type: object
      properties:
        dataReceivingJobId:
          type: string
          description: The unique identifier associated with the receiving job.
        message:
          type: string
          description: A meaningful message about the transfer session.
        transferSessionId:
          type: string
          description: The unique identifier associated with the transfer session.
        dataTransferResultDetails:
          type: array
          items:
            $ref: '#/components/schemas/data_in.DataTransferResultDetail'
          description: A list of objects representing the results of the transfer session.
        status:
          type: string
          description: The status of the transfer session. A completed session returns the status SUCCEED.
    data_in.PushDataResponse:
      type: object
      properties:
        transferSessionId:
          type: string
          description: The unique identifier associated with the transfer session.
        sequence:
          type: integer
          description: The unique sequence number associated with a batch of records.
          format: uint32
        status:
          type: string
          description: The status of the data transfer.
        message:
          type: string
          description: Any additional information about the data transfer.
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/data_in.Tenant'
          description: A list of strings representing the tenants that data was pushed to and their data transfer results.
    data_in.ReceivingJob:
      type: object
      properties:
        receivingJobId:
          type: string
          description: The job ID of the receiving job for the analytic tenant.
        tenantCode:
          type: string
          description: The analytic tenant code.
        status:
          type: string
          description: The status of the receiving job for the analytic tenant.
    data_in.ReceivingJobAndStatusResponse:
      type: object
      properties:
        parentJobId:
          type: string
          description: The ID of the dispatching job that generated the extraction jobs.
        parentTenantCode:
          type: string
          description: The tenant that owns the dispatching job. This is usually the administrating tenant.
        limit:
          type: integer
          description: The number of receiving jobs to return. The maximum number of jobs to return is 1000.
          format: int32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: int32
        receivingJobs:
          type: array
          items:
            $ref: '#/components/schemas/data_in.ReceivingJob'
          description: A list of receiving job information.
    data_in.ReceivingJobStatusResponse:
      type: object
      properties:
        jobId:
          type: string
          description: The unique identifier associated with the receiving job.
        status:
          type: string
          description: The status of the receiving job.
        parentJobId:
          type: string
          description: The job ID of the receiving job that spawned this job.
        parentTenantCode:
          type: string
          description: The tenant code of the receiving job that spawned this job.
        receivingJobs:
          type: array
          items:
            $ref: '#/components/schemas/data_in.ReceivingJob'
          description: A list of objects representing the receiving jobs to retrieve.
    data_in.Result:
      type: object
      properties:
        jobId:
          type: string
          description: If applicable, the job ID associated with the data version.
        dataVersion:
          type: string
          description: If applicable, the data version that was disabled.
        tenantCode:
          type: string
          description: The analytic tenant that the disable operation was conducted for.
        status:
          type: string
          description: The outcome of the disabling operation.
        message:
          type: string
          description: If applicable, the message explains what errors occurred while disabling data versions.
    data_in.Source:
      type: object
      properties:
        sourceId:
          type: string
          description: The unique identifier associated with the source that data was transferred to.
        sourceName:
          type: string
          description: The object name of the source.
        dataSize:
          type: string
          description: The size of the data transfer in bytes.
        rows:
          type: string
          description: The number of rows in the data transfer.
        status:
          type: string
          description: The status of the data transfer for this source.
        message:
          type: string
          description: A meaningful message about the data transfer.
    data_in.StartExtractionResponse:
      type: object
      properties:
        JobId:
          type: string
          description: The ID of the dispatching job that generated the extraction jobs.
    data_in.StartTransferResponse:
      type: object
      properties:
        transferSessionId:
          type: string
          description: The unique identifier associated with the transfer session.
    data_in.Tenant:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant that data was transferred to. For example, WFF_j1r or WFF_j1r~c7o.
        status:
          type: string
          description: The status of the data transfer for this tenant.
        sources:
          type: array
          items:
            $ref: '#/components/schemas/data_in.Source'
          description: A list of objects representing the sources that data was pushed to and their data transfer results.
    data_in.TenantAndCredential:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        credentialId:
          type: string
          description: The unique identifier associated with the credential.
    data_in.UploadToExclude:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant you are excluding a data upload for.
        excludeAll:
          type: boolean
          description: If `true`, all data uploads are excluded for the analytic tenant.
        uploadTimes:
          type: array
          items:
            type: string
          description: A comma-separated list of ISO 8601 time strings such as `"2001-10-25T13:45:35.999"` representing the upload time of each data upload to exclude.
        minUploadTime:
          type: string
          description: An ISO 8601 time  for the earliest upload time. If defined, omit `uploadTimes`. If omitted and `maxUploadTime` is defined, excludes files up to earliest time available.
        maxUploadTime:
          type: string
          description: An ISO 8601 time for the latest upload time. If defined, omit `uploadTimes`. If omitted and `minUploadTime` is defined, excludes files up to latest time available.
        sources:
          type: array
          items:
            type: string
          description: A comma-separated list of strings representing the object name of each source to exclude. If `uploadTimes` is omitted, excludes files for the given sources for all `uploadTimes`.
        fileNameRegex:
          type: string
          description: A regular expression to match the file names of the data uploads to exclude.
        fileIdentifiers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings representing the file identifiers of the data uploads to exclude. To get a data upload's file identifier, see `GET /v1/op/data/uploads`.
    data_in.UploadToInclude:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant you are including a data upload for.
        includeAll:
          type: boolean
          description: If `true`, all data uploads are included for the analytic tenant.
        uploadTimes:
          type: array
          items:
            type: string
          description: A comma-separated list of ISO 8601 time strings such as `"2001-10-25T13:45:35.999"` representing the upload time of each data upload to include.
        minUploadTime:
          type: string
          description: An ISO 8601 time for the earliest upload time. If defined, omit `uploadTimes`. If omitted and `maxUploadTime` is defined, includes files up to earliest time available.
        maxUploadTime:
          type: string
          description: An ISO 8601 time for the latest upload time. If defined, omit `uploadTimes`. If omitted and `minUploadTime` is defined, includes files up to latest time available.
        sources:
          type: array
          items:
            type: string
          description: A comma-separated list of strings representing the object name of each source to include. If `uploadTimes` is omitted, includes files for the given sources for all `uploadTimes`.
        fileNameRegex:
          type: string
          description: A regular expression to match the file names of the data uploads to include.
        fileIdentifiers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings representing the file identifiers of the data uploads to include. To get a data upload's file identifier, see `GET /v1/op/data/uploads`.
    data_out.ListResponse:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/google.protobuf.Any'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/google.protobuf.Any'
    dataservices.common.DimensionMemberReferenceDTO:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the members within a dimension path. For example, a dimension for Location
             may have the paths "Canada, BC, Vancouver" and "US, California, San Francisco".
        memberId:
          type: string
          description: The unique identifier of the dimension member. Use `memberId` if the dimension member doesn't have a path, such as SD groups.
      description: The members of a dimension.
    dataservices.common.MemberValuesDTO:
      type: object
      properties:
        included:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.common.DimensionMemberReferenceDTO'
          description: The unique IDs of members to include when evaluating the metric.
        excluded:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.common.DimensionMemberReferenceDTO'
          description: The unique IDs of members to exclude when evaluating the metric.
      description: |-
        Member filter values are discrete member references in a dimension filter. You can define
         included and excluded members simultaneously. This is typically done with filtering applied on
         dimensions with multiple levels. For example, a Location parameter may include "South
         America" and exclude "Brazil" which results in the metric being evaluated for all South American
         countries except Brazil.
    dataservices.datamodel.AggregationTypeOptionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter option.
        displayName:
          type: string
          description: The localized display name of the parameter option.
        propertyName:
          type: string
          description: The property name of the parameter option.
        aggregationFunction:
          type: string
          description: The aggregation function of the parameter option.
        isDefault:
          type: boolean
          description: '`true` if the parameter option is the default one and `false` otherwise.'
      description: The definition of an aggregation option.
    dataservices.datamodel.AggregationTypeParameterDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter.
        displayName:
          type: string
          description: The localized display name of the parameter.
        description:
          type: string
          description: The localized description of the parameter.
        parameterOptions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.AggregationTypeOptionDTO'
          description: The options defined for the parameter.
      description: |-
        The definition of an aggregation parameter. These parameters resolve metrics that use aggregation parameters.
         For example, Visier Benchmarks metrics often use aggregation parameters to enable callers to aggregate metric values according to their average or different percentiles.
    dataservices.datamodel.AnalyticObjectDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the analytic object.
        displayName:
          type: string
          description: The localized display name of the analytic object.
        description:
          type: string
          description: The localized description of the analytic object.
        type:
          enum:
            - SUBJECT
            - EVENT
            - OVERLAY
          type: string
          description: 'The analytic object type: `SUBJECT`, `EVENT`, or `OVERLAY`.'
          format: enum
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this analytic object.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this analytic object.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        propertyIds:
          type: array
          items:
            type: string
          description: A list of strings representing IDs of the properties that belong to this analytic object.
        dimensionIds:
          type: array
          items:
            type: string
          description: A list of strings representing IDs of the dimensions that belong to this analytic object.
        selectionConceptIds:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing IDs of the selection concepts that belong to this analytic object.
             Note: If there are no selection concepts, this field is omitted.
        objectReferences:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.ObjectReferenceDTO'
          description: |-
            A list of references from this analytic object to other analytic objects.
             Note: If there are no references, this field is omitted.
        populationConfiguration:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.PopulationConfigurationDTO'
          description: |-
            A set of property and dimension references configured by Visier or an administrator to tell the platform what
             properties and dimensions to use when doing population insight calculations. These are the distinguishing
             properties, change history properties, and grouping dimensions to use in AI insights. This field is optional and
             is only available for subjects.
      description: Analytic objects are the various items that users can analyze in Visier. Analytic objects include subjects, events, and overlays.
    dataservices.datamodel.AnalyticObjectsDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.AnalyticObjectDTO'
      description: A collection of analytic objects
    dataservices.datamodel.CurrenciesDTO:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.CurrencyDTO'
      description: A collection of currencies.
    dataservices.datamodel.CurrencyDTO:
      type: object
      properties:
        currencyCode:
          type: string
          description: The ISO 4217 3-letter code for the currency.
        displayName:
          type: string
          description: The display name for the currency.
        symbol:
          type: string
          description: The symbol name for the currency.
        shortSymbol:
          type: string
          description: |-
            The shortened symbol name for the currency.
             Removes all alphabetic characters. If **symbol** only has alphabetic characters, **shortSymbol** is empty.
             If **symbol** contains only non-alphabetic characters, **shortSymbol** is the same as **symbol**.
             For example, if **symbol** is CA$, **shortSymbol** is $. If **symbol** is $, then **shortSymbol** is $.
      description: Information about a currency type.
    dataservices.datamodel.CurrencyRateDTO:
      type: object
      properties:
        fromCurrencyCode:
          type: string
          description: |-
            The currency to convert **from**.
             **Note:** If USD is the `fromCurrencyCode`, you are retrieving the exchange rates from USD to a different currency.
        toCurrencyCode:
          type: string
          description: |-
            The currency to convert **to**.
             **Note:** If USD is the `toCurrencyCode`, you are retrieving the exchange rates from a different currency to USD.
        rate:
          type: number
          description: |-
            The numeric value of the exchange rate.
             **Note:** If **decimals** is specified, rate rounds to that value. If **decimals** is undefined, **rate** rounds to 2 significant figures after the decimal point.
          format: double
        startTime:
          type: string
          description: |-
            The earliest time instant to retrieve exchange rates from.
             **Note:** Format is the number of milliseconds since Jan 1, 1970 12:00 AM UTC.
        endTime:
          type: string
          description: |-
            The latest time instant to retrieve exchange rates from.
             **Note:** Format is the number of milliseconds since Jan 1, 1970 12:00 AM UTC.
      description: Information about a currency exchange rate.
    dataservices.datamodel.CurrencyRatesDTO:
      type: object
      properties:
        currencyRates:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.CurrencyRateDTO'
      description: |-
        A collection of currency exchange rates.
         Note: Currencies may have different exchange rates in different time intervals, depending what rate data is stored in Visier.
         For example, USD:CAD can be 1.2 between January 1 - March 1, while USD:EUR can be 0.92 between January 1 - February 1, but 0.88 between February  1 - March 1.
    dataservices.datamodel.DimensionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the dimension.
        displayName:
          type: string
          description: The localized display name of the dimension.
        description:
          type: string
          description: The localized description of the dimension.
        levels:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.LevelDTO'
          description: 'The levels defined for the dimension. Note: For parent-child dimensions, a level name is generated by Visier.'
        unknownMember:
          type: array
          items:
            type: string
          description: The optional path to the unknown member, if defined.
        memberCount:
          type: integer
          description: The total number of members for the dimension, excluding the (All) member.
          format: int32
        visibleInApp:
          type: boolean
          description: '`true` if this dimension is set to be visible in your solution.'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.TagMapElementDTO'
          description: The optional collection of tags defined for this element.
        explanation:
          type: string
          description: The localized explanation of the dimension.
      description: A dimension organizes unique values of an attribute into a list or a hierarchical structure for use as a filter or group-by in your solution.
    dataservices.datamodel.DimensionMappingValidationDTO:
      type: object
      properties:
        dimensionMapId:
          type: string
        dimensionId:
          type: string
        unmappedMembers:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.common.DimensionMemberReferenceDTO'
        failures:
          type: array
          items:
            type: string
    dataservices.datamodel.DimensionMappingValidationExecutionDTO:
      type: object
      properties:
        memberMapId:
          type: string
          description: memberMapId == dimensionMapId
        analyticObject:
          type: string
          description: The analytic object associated with the dimension map.
      description: Instruction to execute a mapping validation query
    dataservices.datamodel.DimensionReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the dimension. To get a dimension's ID, call the Data Model API.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the dimension in Visier, such as the analytic object or event the dimension is
             associated with. If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a dimension to query.
    dataservices.datamodel.DimensionsDTO:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.DimensionDTO'
      description: A collection of dimensions.
    dataservices.datamodel.LevelDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of a level within a dimension.
        displayName:
          type: string
          description: The localized display name of the dimension.
        depth:
          type: integer
          description: The level depth of the dimension.
          format: int32
      description: Levels are the hierarchical structure of members within a dimension.
    dataservices.datamodel.MemberDTO:
      type: object
      properties:
        fullName:
          type: string
          description: The fully qualified name of the member. This is the dimension's object name and the member's display name, separated by a period.
        displayName:
          type: string
          description: The localized display name of the member.
        level:
          type: integer
          description: The numeric level of the hierarchy the member belongs to.
          format: sint32
        path:
          type: array
          items:
            type: string
          description: A comma-separated list of identifiers that reference members on the query axis as part of dimensionMemberSelection.
        validityRanges:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.ValidityRangeDTO'
          description: The validity ranges that exist for this member.
        displayNamePath:
          type: array
          items:
            type: string
          description: The display names for each level in the member's ancestral path.
      description: |-
        A member is an element of a dimension. Dimension members are organized hierarchically. For example, Argentina is
         a member of the Location dimension at the Country level of the hierarchy Region > Country > Province > City.
    dataservices.datamodel.MemberParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the member parameter.
        displayName:
          type: string
          description: The localized display name of the member parameter.
        description:
          type: string
          description: The localized description of the member parameter.
        dimensionId:
          type: string
          description: The unique ID of the dimension on which the member parameter is based.
        referencePath:
          type: array
          items:
            type: string
          description: The analytic object reference path from the metric to the dimension.
        default:
          allOf:
            - $ref: '#/components/schemas/dataservices.common.MemberValuesDTO'
          description: The default value if the end user does not select a member at run time.
      description: The definition of a filter parameter. These elements are returned as part of the definition for metrics that include parameters in their definition.
    dataservices.datamodel.MembersDTO:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.MemberDTO'
      description: A collection of members.
    dataservices.datamodel.MetricDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the metric.
        displayName:
          type: string
          description: The localized display name of the metric.
        description:
          type: string
          description: The localized description of the metric.
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this metric.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this metric.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.ParameterDefinitionDTO'
          description: The collection of parameters defined for the metric.
        category:
          enum:
            - REGULAR
            - DERIVED
            - PLANNING
          type: string
          description: 'The category of the metric. Will be one of: `REGULAR`, `DERIVED` or `PLANNING`.'
          format: enum
        visibleInApp:
          type: boolean
          description: // If `true`, the metric is visible to end users in the solution.
      description: A metric is a calculation based on one or more attribute values of analytic objects.
    dataservices.datamodel.MetricsDTO:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.MetricDTO'
      description: A collection of metrics.
    dataservices.datamodel.NumericParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the numeric parameter.
        displayName:
          type: string
          description: The localized display name of the numeric parameter.
        description:
          type: string
          description: The localized description of the numeric parameter.
        lowerBound:
          type: number
          description: The lowest value for the numeric parameter.
          format: double
        upperBound:
          type: number
          description: The highest value for the numeric parameter.
          format: double
        default:
          type: number
          description: The default value if the end user does not select a member at run time.
          format: double
      description: The definition of a numeric parameter. These elements are returned as part of the query definition for metric parameter values.
    dataservices.datamodel.ObjectReferenceDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the object reference.
        displayName:
          type: string
          description: The localized display name of the object reference.
        description:
          type: string
          description: The localized description of the object reference.
        fromObject:
          type: string
          description: The ID of the referencing analytic object.
        toObject:
          type: string
          description: The ID of the referenced analytic object.
        type:
          enum:
            - SUBJECT_REFERENCE
            - MULTI_VALUE_REFERENCE
          type: string
          description: The type of object reference.
          format: enum
        isStrongReference:
          type: boolean
          description: True if this is a strong reference.
      description: |-
        A link between one analytic object and another. An ObjectReference allows you to discover the relationships between
         analytic objects. In some queries, you may need to provide a qualifyingPath, which is built from ObjectReference information.
    dataservices.datamodel.ParameterDefinitionDTO:
      type: object
      properties:
        memberParameter:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.MemberParameterDefinitionDTO'
          description: A filter parameter that can be set with dimension members for the end user to select.
        numericParameter:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.NumericParameterDefinitionDTO'
          description: A parameter with a numeric data type. A numeric parameter can be set with an optional default value and value range.
        planParameter:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.PlanParameterDefinitionDTO'
          description: A parameter on a planning metric. Plan parameters resolve planning model metrics to a specific plan and scenario or snapshot.
        aggregationTypeParameter:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.AggregationTypeParameterDTO'
          description: An aggregation parameter. Such parameters enable control over how applicable metrics aggregate their results.
      description: Parameters generalize object definitions so that end users can provide values at query run time.
    dataservices.datamodel.PlanParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter.
        displayName:
          type: string
          description: The localized display name of the parameter.
        description:
          type: string
          description: The localized description of the parameter.
        modelName:
          type: string
          description: The name of the planning model to which the parameter applies.
      description: |-
        The definition of a plan parameter. These parameters resolve planning model metrics to a specific plan and scenario
         or snapshot values at query runtime.
    dataservices.datamodel.PlanningConceptFilterContextDTO:
      type: object
      properties:
        name:
          type: string
          description: The object name of the selection concept.
      description: A plan context defined using a selection concept.
    dataservices.datamodel.PlanningHierarchyFilterContextDTO:
      type: object
      properties:
        hierarchyName:
          type: string
          description: The object name of the hierarchy.
        includedMembers:
          type: array
          items:
            type: string
          description: The unique IDs of the included dimension members.
        excludedMembers:
          type: array
          items:
            type: string
          description: The unique IDs of excluded dimension members.
      description: A plan context defined using hierarchy members
    dataservices.datamodel.PlanningModelDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the planning model.
        displayName:
          type: string
          description: The localized display name of the planning model.
        description:
          type: string
          description: The localized description of the planning model.
      description: The basic information about the planning model. A planning model captures the planning intent, plan items, and the relationship between them.
    dataservices.datamodel.PlanningModelsDTO:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PlanningModelDTO'
      description: A collection of planning modules.
    dataservices.datamodel.PlanningPlanContextDTO:
      type: object
      properties:
        hierarchyFilterContext:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.PlanningHierarchyFilterContextDTO'
          description: A plan context defined using hierarchy members.
        conceptFilterContext:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.PlanningConceptFilterContextDTO'
          description: A plan context defined using a selection concept.
      description: The filter context for a plan. Plan contexts are defined using a set of hierarchy members or a concept.
    dataservices.datamodel.PlanningPlanDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the plan.
        name:
          type: string
          description: The name of the plan.
        subjectId:
          type: string
          description: The ID of subject for the plan.
        defaultContexts:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PlanningPlanContextDTO'
          description: The contexts defined for the plan.
        planDimensionIds:
          type: array
          items:
            type: string
          description: The IDs of the dimensions defined for the plan.
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.ScenarioOrSnapshotDTO'
          description: The available scenarios for the plan.
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.ScenarioOrSnapshotDTO'
          description: The available snapshots for the plan.
      description: The definition of a plan. Plans are defined on planning models, and each plan may define multiple scenarios or snapshots.
    dataservices.datamodel.PlanningPlansDTO:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PlanningPlanDTO'
      description: A collection of plan definitions.
    dataservices.datamodel.PopulationConfigurationDTO:
      type: object
      properties:
        distinguishingProperties:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PropertyReferenceDTO'
          description: Properties that are used by default to compare subject members.
        changeHistoryProperties:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PropertyReferenceDTO'
          description: Properties that are used by default to compare subject members over time.
        groupingDimensions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: Dimensions to use for grouping and clustering the population.
      description: |-
        A set of property and dimension references configured by Visier or an administrator to tell the platform what
         properties and dimensions to use when doing population insight calculations. These are the distinguishing properties,
         change history properties, and grouping dimensions to use in AI insights.
    dataservices.datamodel.PredictionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the prediction.
        displayName:
          type: string
          description: The localized display name of the prediction.
        description:
          type: string
          description: The localized description of the prediction.
        subject:
          type: string
          description: The object name of the subject that the prediction applies to. For example, Employee.
        subjectKey:
          type: string
          description: The unique ID of the subject's property that the prediction applies to. For example, Employee.EmployeeID.
        subjectParentKey:
          type: string
          description: |-
            The unique ID of the reference that connects a subject member to other members. For example, Employee.Direct_Manager.
             Note: The `subjectParentKey` defines parent, child, and peer relationships between subject members.
        subjectFilter:
          type: string
          description: |-
            The object name of a selection concept to filter the subject population. Filtering the population selects
             specific subject members in the prediction's training data. For example, using the isHighPerformer concept will
             filter the prediction to only high performing employees.
        event:
          type: string
          description: |-
            The object name of the event to predict. The prediction's training data uses past occurrences of the event to
             make predictions. For example, the Predicted Risk of Resignation model uses the Employee_Exit event to estimate
             likelihood of exit from the organization.
        eventFilter:
          type: string
          description: The object name of a selection concept to filter event occurrences in the prediction's training data.
        labelProperty:
          type: string
          description: The unique ID of the property label for the prediction. This is automatically generated.
        factorProperties:
          type: array
          items:
            type: string
          description: |-
            The list of unique IDs of the properties used as prediction factors.
             Note: Factors are conditions used as part of a Visier prediction. For example, Compensation might be a factor in
             predicting an individual's risk of resignation. Factors are chosen based on:
             - Availability in tenants.
             - Prediction impact, such as salary.
             - Reducing bias.
        factorDimensions:
          type: array
          items:
            type: string
          description: The list of unique IDs of the dimensions used as prediction factors.
        factorConcepts:
          type: array
          items:
            type: string
          description: The list of unique IDs of the concepts used as prediction factors.
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this prediction.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this prediction.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        scoreName:
          type: string
          description: The unique name of the score property.  The prediction's formula references the score property as an object. This is automatically generated.
        factorsName:
          type: string
          description: The unique name of the factor property. The prediction's formula references the factor property as an object. This is automatically generated.
        minimumTrainingMonths:
          type: string
          description: The minimum amount of time, in months, to train the prediction model.
        isMultiTenant:
          type: boolean
          description: If `true`, this prediction applies to more than one tenant. If "false", the prediction only applies to the current tenant.
      description: A prediction is a forecast of future events with advanced machine learning models.
    dataservices.datamodel.PredictionsDTO:
      type: object
      properties:
        predictions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PredictionDTO'
      description: A collection of predictions.
    dataservices.datamodel.PropertiesDTO:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.PropertyDTO'
      description: A collection of properties.
    dataservices.datamodel.PropertyDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the property.
        displayName:
          type: string
          description: The localized display name of the property.
        description:
          type: string
          description: The localized description of the property.
        dataType:
          type: string
          description: The data type of the property, such as Categorical, HourDuration, or Ratio.
        primitiveDataType:
          type: string
          description: The primitive data type of the property, such as Number, String, or Boolean.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.ParameterDefinitionDTO'
          description: The collection of parameters defined for the property.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.TagMapElementDTO'
          description: The optional collection of tags defined for this element.
        explanation:
          type: string
          description: The localized explanation of the property.
      description: Properties are qualities of an analytic object.
    dataservices.datamodel.PropertyReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the property.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the property in Visier, such as the analytic object or event the property is associated with.
             If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a property to query.
    dataservices.datamodel.ScenarioOrSnapshotDTO:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the scenario or snapshot.
        displayName:
          type: string
          description: The scenario or snapshot display name.
      description: The unique identifier and display name for plan scenarios and snapshots.
    dataservices.datamodel.SelectionConceptDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the selection concept.
        displayName:
          type: string
          description: The localized display name of the selection concept.
        description:
          type: string
          description: The localized description of the selection concept.
        visibleInApp:
          type: boolean
          description: If `true`, the selection concept is visible to end users in the solution.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.TagMapElementDTO'
          description: The optional collection of tags defined for this element.
        explanation:
          type: string
          description: The localized explanation of the selection concept.
      description: Selection concepts select a population of subject members of a given subject or event.
    dataservices.datamodel.SelectionConceptReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the selection concept.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the selection concept in Visier, such as the analytic object or event the selection
             concept is associated with. If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a selection concept to query.
    dataservices.datamodel.SelectionConceptsDTO:
      type: object
      properties:
        selectionConcepts:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptDTO'
      description: A collection of selection concepts
    dataservices.datamodel.TagMapElementDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the tag.
        displayName:
          type: string
          description: The localized display name of the tag.
      description: Tag identifier and display name pair.
    dataservices.datamodel.ValidityRangeDTO:
      type: object
      properties:
        start:
          type: string
          description: |-
            The date from which data becomes available.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
        end:
          type: string
          description: |-
            The date from which data is no longer available.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
      description: |-
        A pair of values that represent the time interval to which the data is valid.
         The validity range is defined in Unix epoch format and UTC timezone.
         Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
         limitation in representing large numbers.
    dataservices.query.AggregationQueryDTO:
      type: object
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.AggregationQuerySourceDTO'
          description: The source data, such as a metric or formula, to query.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryFilterDTO'
          description: |-
            The objects by which to filter the query, such as dimensions or concepts.
             A filter defines the population to retrieve data from. Omit `filters` if no filtering is required.
        axes:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryAxisDTO'
          description: |-
            The objects by which to group the query. An axis defines the groups that the data belongs to.
             Omit `axes` if no grouping is required.
        timeIntervals:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryTimeIntervalsDTO'
          description: The time intervals to query.
        parameterValues:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryParameterValueDTO'
          description: The values associated with parameters, if defined.
      description: |-
        An AggregationQuery defines the data to query in an aggregation query and returns a `cell set` calculated from
         the selected data points.
    dataservices.query.AggregationQueryExecutionDTO:
      type: object
      properties:
        query:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.AggregationQueryDTO'
          description: |-
            The data to perform an aggregation on, such as a metric or formula. The query must include a time interval,
             and may optionally include filters and axes.
        options:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryExecutionOptionsDTO'
          description: Additional instructions for your query, such as a calendar type or conversion information.
      description: An AggregationQueryExecution provides instructions to perform your aggregation query.
    dataservices.query.AggregationQuerySourceDTO:
      type: object
      properties:
        formula:
          type: string
          description: |-
            An ad-hoc metric formula. The response returns the results of the aggregate.
             See the formula dictionary in Visier to find functions and objects you can use in a formula.
        metric:
          type: string
          description: The ID of an existing metric in your Visier solution.
        metrics:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.AggregationQuerySourceMetricsDTO'
          description: |-
            The IDs of metrics to aggregate. All metrics in the query must reference the same analytic object.
             For example, you cannot query Headcount and Applicant Count because one uses the Employee subject and
             the other uses the Applicant subject. You can query Headcount and Employee Count for Women because both
             reference the Employee subject. Only available when the Accept header is `text/csv`.
      description: An AggregationQuerySource defines the source data to query in an aggregation query.
    dataservices.query.AggregationQuerySourceMetricDTO:
      type: object
      properties:
        columnName:
          type: string
          description: The column name in the CSV file. Default is to use id as the column name.
        id:
          type: string
          description: |-
            The unique ID of the metric.
             If `columnName` is omitted, `id` is the column name in the CSV file.
        formula:
          type: string
          description: |-
            An ad-hoc metric formula. The response returns the results of the aggregate.
             See the formula dictionary in Visier to find functions and objects you can use in a formula.
        qualifyingPath:
          type: string
          description: |-
            The base qualifying path to prefix the axes and filters' qualifying paths with.
             You must specify the qualifying path on a metric if the convergent analytic object of the metric doesn't match the
             starting object in the qualifying paths of the axes and filters.

             For example, consider a multi-metric query that contains metrics that count the number of applicants and requisitions,
             grouped by the country of the recruiter's direct manager. The following sample shows how to use qualifyingPath to specify
             the object reference traversal path from each metric's convergent analytic object to the start of the path for the axes.
             In this example, there is only one convergent analytic object.
             ```
             "source": {
                 "metrics": {
                    "columns": [
                        {
                            "id": "employeeCount"
                        },
                        {
                            "id": "applicantCount",
                            "qualifyingPath": "Applicant.Requisition.Recruiter"
                        },
                        {
                            "id": "requisitionCount",
                            "qualifyingPath": "Requisition.Recruiter"
                        }
                    ]
                }
             },
             "axes": [
                {
                    "dimensionLevelSelection": {
                        "dimension": {
                            "name": "Location",
                            "qualifyingPath": "Employee.Direct_Manager"
                        },
                        "levelIds": [
                            "Location_1"
                        ]
                    }
                }
             ]
             ```
             **Note:**
             * `employeeCount` doesn't need a `qualifyingPath` because it's already convergent with the start of the axis path.
             * The metrics' qualifying paths must provide the reference name that resolves to the first object of the axis' qualifying path as their last path segment. In this case, Recruiter is a named reference pointing to Employee. The final qualifying paths for the metrics are:
                 * `employeeCount`: Employee.Direct_Manager
                 * `applicantCount`: Applicant.Requisition.Recruiter.Direct_Manager
                 * `requisitionCount`: Requisition.Recruiter.Direct_Manager
      description: The column definition for a single metric within a `metrics` query.
    dataservices.query.AggregationQuerySourceMetricsDTO:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.AggregationQuerySourceMetricDTO'
          description: An array of metric columns.
      description: |-
        The IDs and column names of multiple metrics.

         **Note:**
         Only available when the `Accept` header is `text/csv`.
    dataservices.query.AggregationTypeParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the aggregation parameter.
        aggregationOptionId:
          type: string
          description: The unique ID of the aggregation option.
      description: The value for an aggregation parameter.
    dataservices.query.CellDTO:
      type: object
      properties:
        value:
          type: string
          description: The value of the cell.
        support:
          type: string
          description: The number of data points contributing to this cell.
        coordinates:
          type: array
          items:
            type: integer
            format: int32
          description: A list of integers representing the coordinates of this cell, identifying its position along each axis.
        distribution:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.CellDistributionBinDTO'
          description: |-
            The optional distribution of this cell.
             This will be populated if distribution calculation is requested, and supported by the query.
      description: An individual value in a cell set.
    dataservices.query.CellDistributionBinDTO:
      type: object
      properties:
        value:
          type: string
        support:
          type: string
      description: |-
        A cell distribution bin.
         Each bin has a metric value (of the bin) and the number of observations contributing to the bin.
    dataservices.query.CellDistributionOptionsDTO:
      type: object
      properties:
        binCount:
          type: integer
          description: The number of bins to return, minimum of 2, and a maximum of 100.
          format: int32
      description: |-
        Cell distribution options for queries.
         Include with aggregation queries to enable distribution calculation per cell.
    dataservices.query.CellSetAxisDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: The dimension associated with the axis.
        positions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.CellSetAxisPositionDTO'
          description: A list of paths that represent the data's positions along the axis.
      description: The axis of a cell set associated with a dimension.
    dataservices.query.CellSetAxisPositionDTO:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the members within a dimension path. For example,
             a dimension for Location may have the paths "Canada, BC, Vancouver" and "US, California, San Francisco".
        displayName:
          type: string
          description: The display name of the position. This is optional and is omitted if unavailable or not requested.
        displayNamePath:
          type: array
          items:
            type: string
          description: Optional display name path of the member.
      description: The position along the axis of a cell set.
    dataservices.query.CellSetDTO:
      type: object
      properties:
        cells:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.CellDTO'
          description: The set of cells that represent the result of your query.
        axes:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.CellSetAxisDTO'
          description: The set of axes for the cell set that represent the objects the data is grouped by.
        lineage:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.LineageDTO'
          description: Lineage information for this cell set. This can be omitted if the cell has no lineage or the user did not request lineage information.
      description: |-
        The set of cells returned from executing an aggregation query.
         A CellSet represents a structured, multidimensional array of values.
    dataservices.query.CellSetOrErrorDTO:
      type: object
      properties:
        cellSet:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.CellSetDTO'
          description: The resulting cell set from a successful query execution.
        error:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryExecutionErrorDTO'
          description: An error for a failed query execution.
      description: A result that is either a cell set for a successful query execution, or an error for a failed query execution.
    dataservices.query.CohortFilterDTO:
      type: object
      properties:
        keyGroup:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.KeyGroupFilterDTO'
          description: A key group is a collection of filters that define the shape of the analysis population.
        exclude:
          type: boolean
          description: If true, the population is defined by those excluded by the filters. Default is false.
        timeInterval:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryTimeIntervalDTO'
          description: The time at which to apply the key group, such as a specific day or period of months.
      description: |-
        Use a cohort filter to define a population as it existed during a specific time period.
         Cohort filters allow you to define a population in terms of a collection of filters, known as a key group.
         The cohort's defined time interval is independent of the query's time. The cohort's time interval is the
         time at which the key group should be applied.
         Cohorts are typically used to follow populations and understand changes to the population over time,
         such as promotion and resignation rates.
    dataservices.query.InternalQueryExecutionOptionsDTO:
      type: object
      properties:
        sparseHandlingMode:
          enum:
            - ALLOW
            - DISALLOW
            - FORCE
          type: string
          format: enum
        alignTimeAxisToPeriodEnd:
          type: boolean
          description: |-
            If true, shifts the time axis members back by one millisecond.
             Shifting the time axis members back by one millisecond makes them valid at the end of the period instead of at the start of the next period.
             This aligns the returned data timestamps with the timestamps in the Visier application.

             Example: If the timestamps are originally [`2019-06-01T00:00:00.000Z`, `2019-05-01T00:00:00.000Z`],
             then `alignTimeAxisPeriodEnd` turns the timestamps into [`2019-05-31T23:59:59.999Z`, `2019-04-30T23:59:59.999Z`].

             Example: If the timestamps are originally [`2019-05-01T00:00:00.000Z/2019-06-01T00:00:00.000Z`, `2019-04-01T00:00:00.000Z/2019-05-01T00:00:00.000Z`],
             then `alignTimeAxisPeriodEnd` turns the timestamps into [`2019-05-01T00:00:00.000Z/2019-05-31T23:59:59.999Z`, `2019-04-01T00:00:00.000Z/2019-04-30T23:59:59.999Z`].
      description: Internal options - not to be documented or used by external parties
    dataservices.query.KeyGroupFilterDTO:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.KeyGroupFilterItemDTO'
      description: A collection of related filters that define a key group.
    dataservices.query.KeyGroupFilterItemDTO:
      type: object
      properties:
        formula:
          type: string
          description: A filter expressed as a formula.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptReferenceDTO'
          description: A filter that uses an existing selection concept in Visier.
        memberSet:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.MemberFilterDTO'
          description: A filter that includes or excludes dimension members.
      description: An individual filter in a key group.
    dataservices.query.LineageDTO:
      type: object
      properties:
        cellSets:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.CellSetDTO'
          description: The cell sets that constitute this lineage.
        op:
          type: string
          description: The operation used to combine the cell sets of this lineage.
      description: Lineage information for a given cell set. This describes how a cell set is created from other cell sets.
    dataservices.query.ListQueryExecutionDTO:
      type: object
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.ListQuerySourceDTO'
          description: The source data that you want to query.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.PropertyColumnDTO'
          description: The columns to include in the result. This must contain at least one column.
        sortOptions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.SortOptionDTO'
          description: The index and direction to sort a column in the `columns` array.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryFilterDTO'
          description: The filters of this query. Omit `filters` if no filtering is required.
        timeInterval:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryTimeIntervalDTO'
          description: The time that the data is valid, such as a specific day or period of months.
        parameterValues:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryParameterValueDTO'
          description: The parameter values for either member or numeric parameters.
        options:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.ListQueryExecutionOptionsDTO'
          description: Additional instructions for your query, such as a calendar type or conversion information.
      description: A ListQueryExecution provides instructions to perform a list query.
    dataservices.query.ListQueryExecutionOptionsDTO:
      type: object
      properties:
        limit:
          type: integer
          description: |-
            The maximum number of entries to return. Default is to return all entries. If `page` is defined but
             limit is not defined, limit will be set to a default value of 1000.
          format: int32
        queryMode:
          enum:
            - DEFAULT
            - FILL
            - FAIL
          type: string
          description: Determines how the query should handle column definitions that the query is unable to resolve. Default is DEFAULT.
          format: enum
        omitHeader:
          type: boolean
          description: |-
            Option to omit the header from the result.
             If true, queryMode must be either FILL or FAIL.
             Default is false.
        calendarType:
          enum:
            - TENANT_CALENDAR
            - GREGORIAN_CALENDAR
          type: string
          description: |-
            The calendar type to use. This will be used for all time calculations unless explicitly overridden in
             the calculation itself. Default is TENANT_CALENDAR.
          format: enum
        currencyConversionMode:
          deprecated: true
          enum:
            - TENANT_CURRENCY_CONVERSION
            - VISIER_CURRENCY_CONVERSION
          type: string
          description: |-
            This will be removed as of Winter 2026. Use `currencyConversionCode` instead.

             The currency conversion mode to use. This will be used for all currency conversion calculations unless explicitly overridden in the calculation itself. Default is TENANT_CURRENCY_CONVERSION.
          format: enum
        currencyConversionDate:
          type: string
          description: The currency conversion date to use. If defined, the currency conversion will use the exchange rates as of this date.
        page:
          type: integer
          description: |-
            A page defines a subset of the overall result set. The number of rows per page is equal to limit
             with the exception of the last page in the result set which may contain fewer rows. `Page` is an index
             that begins at 0. The index to start retrieving results is calculated by multiplying `page` by `limit`.
          format: int32
        multipleTables:
          type: boolean
          description: |-
            Option to return multiple table files as zipped archive for derived metrics.
             Default is false. If false, one table is returned for the drill-through metric.
        currencyConversionCode:
          type: string
          description: Overrides the tenant's default currency for currency conversions.
        recordMode:
          enum:
            - NORMAL
            - CHANGES
          type: string
          description: |-
            Influences the type of records used to build the result set, such as whether to return
             one record per entity that is valid in the provided time range or each change record
             falls in the time frame.
          format: enum
        dateTimeDisplayMode:
          enum:
            - EPOCH
            - DATETIME
          type: string
          description: |-
            Control how date-time values are displayed in the result set.
             Supported values:
             * `EPOCH`: The number of elapsed milliseconds since January 1, 1970 in UTC timezone. This is the default.
             * `DATETIME`: The date-time value displayed in `yyyy-MM-dd HH:mm:ssZZ` format.
          format: enum
      description: A ListQueryExecutionOptions provides additional instructions to perform a list query.
    dataservices.query.ListQuerySourceDTO:
      type: object
      properties:
        formula:
          type: string
          description: An ad-hoc metric formula. The response returns the individual data points that make up the aggregate.
        metric:
          type: string
          description: The ID of an existing metric in your Visier solution.
        analyticObject:
          type: string
          description: |-
            The ID of an existing analytic object in your Visier solution.
             An analytic object source cannot have filters or time handling.
        textConcept:
          type: string
          description: |-
            The ID of an existing text concept in your Visier solution.
             A concept that defines the text properties of an analytic object and includes filters to enforce aggregate thresholds.
             <br>**Note:** <em>This field is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
      description: A ListQuerySource defines the source data to query in a list query.
    dataservices.query.MemberFilterDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: The dimension in which the members belong.
        values:
          allOf:
            - $ref: '#/components/schemas/dataservices.common.MemberValuesDTO'
          description: The dimension members to filter by.
      description: |-
        Member filters are dimension member values to filter by in your query. The member filters are
         defined within the filters section of a query definition. You can filter by dimension members in
         aggregate and list queries.
    dataservices.query.MemberParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the member parameter qualified by the object.
        dimensionId:
          type: string
          description: The unique ID of the dimension on which the parameter is based.
        referencePath:
          type: array
          items:
            type: string
          description: The analytic object reference path from the metric to the dimension.
        values:
          allOf:
            - $ref: '#/components/schemas/dataservices.common.MemberValuesDTO'
          description: The included and excluded member references in a dimension filter.
      description: |-
        The member value of a parameter, including the parameter ID, dimension that the parameter is based on,
         and the included and excluded members for the parameter.
    dataservices.query.NumericParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the numeric parameter qualified by the object.
        value:
          type: number
          description: The numeric value of the parameter.
          format: double
      description: The value of a numeric parameter, including the parameter ID and the numeric value passed into the parameter.
    dataservices.query.PlanParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the plan parameter qualified by the object.
        planId:
          type: string
          description: The unique ID of the plan the parameter is based on.
        scenarioId:
          type: string
          description: The unique ID of the scenario the parameter is based on.
        snapshotId:
          type: string
          description: The unique ID of the snapshot the parameter is based on.
      description: The value for a parameter on a planning metric, including the parameter ID and the plan the parameter is based on.
    dataservices.query.PropertyColumnDTO:
      type: object
      properties:
        columnName:
          type: string
          description: |-
            The name of the column. This is optional.
             If not specified, the name of the property is used, or a generic column name if the property is unnamed.
        columnDefinition:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryPropertyDTO'
          description: The definition of the property to query on.
      description: A named, result column of a list query.
    dataservices.query.QueryAxisDTO:
      type: object
      properties:
        formula:
          type: string
          description: An axis expressed as a formula.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptReferenceDTO'
          description: |-
            An axis that uses an existing selection concept in Visier.
             The resulting axis consists of 3 positions: True, False, and Unknown.
        dimensionMemberSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryDimensionMemberSelectionDTO'
          description: An axis that uses existing dimension members in Visier.
        memberMapSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryMemberMapSelectionDTO'
          description: An axis that uses an existing member map in Visier.
        numericRanges:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryNumericRangesDTO'
          description: An axis that uses an existing range dimension in Visier and defines the ranges to query.
        dimensionLevelSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryDimensionLevelSelectionDTO'
          description: An axis that uses levels of existing dimensions in Visier.
        dimensionLeafMemberSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryDimensionLeafSelectionDTO'
          description: An axis comprised of all non-data leaf members of an existing dimension in Visier.
        dimensionDataMemberSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryDimensionDataMemberSelectionDTO'
          description: An axis comprised of all leaf, including data, members of an existing dimension in Visier.
        dimensionLevelWithUncategorizedValueSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryDimensionLevelSelectionDTO'
          description: An axis that uses existing dimension levels in Visier, including uncategorized levels.
        tableAxisOptions:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryAxisOptionsDTO'
          description: Additional transformations to perform on this axis. Only available when the Accept header is a table format, such as text/csv or application/jsonlines.
      description: An axis of a query used to group data points.
    dataservices.query.QueryAxisOptionsDTO:
      type: object
      properties:
        memberDisplayMode:
          enum:
            - UNCHANGED
            - DEFAULT
            - COMPACT
            - DISPLAY
            - MDX
          type: string
          description: |-
            Options to override the display mode for the axis. This overrides the query-level `memberDisplayMode` options value in the query.
             Only available for non-time axes. Use the QueryAxisMemberDisplayMode `memberDisplayMode` to apply different display modes to different axes.
             For example, let's say your query has the `memberDisplayMode` as `DISPLAY` but you want to fetch the object name for a specific dimension.
             With QueryAxisMemberDisplayMode `memberDisplayMode`, you can override that dimension's `memberDisplayMode` to `DEFAULT` instead of `DISPLAY`.

             Valid values are `UNCHANGED`, `DEFAULT`, `COMPACT`, `DISPLAY`, or `MDX`. Default is `UNCHANGED`.
          format: enum
        columnName:
          type: string
          description: If specified, returns the column name of the axis in the response.
      description: |-
        QueryAxisOptions allows you to customize an axis in the query, such as changing the display mode for its cell set values or providing a custom column name.
         Only available when the Accept header is a table format, such as text/csv or application/jsonlines.
    dataservices.query.QueryDimensionDataMemberSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
      description: |-
        A QueryDimensionLeafSelection allows you to define a member set consisting exclusively
         of leaf-level, including data, members for the given dimension. Leaf members are those members that have
         no descendents. A member may be a leaf member regardless of the level it is positioned at.
    dataservices.query.QueryDimensionLeafSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
      description: |-
        A QueryDimensionLeafSelection allows you to define a member set consisting exclusively
         of leaf-level members for the given dimension. Leaf members are those members that have
         no descendents. A member may be a leaf member regardless of the level it is positioned at.
         This member selection option, excludes data members.
    dataservices.query.QueryDimensionLevelPropertyDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
        memberValueMode:
          enum:
            - NAME
            - PATH
          type: string
          description: |-
            Controls how to display member values.

             Valid values are `NAME`, `PATH`.

             * `NAME`: Returns the member's display name. This is the default.
             * `PATH`: Returns the member's name path.
          format: enum
        levelId:
          type: string
          description: The level ID. For example, "Level_1" or "Level_2".
        levelDepth:
          type: integer
          description: The level depth. For a parent-child dimension, depth must be greater than 0. For example, 1 or 2.
          format: int32
      description: A QueryDimensionLevelPropertyDTO defines an existing dimension level and its dimension to query.
    dataservices.query.QueryDimensionLevelSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
        levelIds:
          type: array
          items:
            type: string
          description: A list of level IDs for the dimension levels that you want to query. For example, ["Level_1", "Level_2"]. To get a dimension's level IDs, call the Data Model API.
        levelDepths:
          type: array
          items:
            type: integer
            format: int32
          description: A list of level depths for the dimension levels that you want to query. For a parent-child dimension, depth must be greater than 0. For example, [1, 2]. To get a dimension's level depths, call the Data Model API.
      description: |-
        A QueryDimensionLevelSelection allows you to select a dimension level and its members without
         explicitly listing each member.
    dataservices.query.QueryDimensionMemberSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
        members:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.common.DimensionMemberReferenceDTO'
          description: A collection of dimension members to select in the query. This must contain at least one member.
      description: A QueryDimensionMemberSelection defines dimension members to select in the query.
    dataservices.query.QueryEffectiveDatePropertyDTO:
      type: object
      properties: {}
      description: A special property that yields the effective date for the record
    dataservices.query.QueryExecutionErrorDTO:
      type: object
      properties:
        errorCode:
          type: string
          description: A brief identifier of the type of error.
        message:
          type: string
          description: The details of the error.
        allErrors:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryExecutionErrorsDTO'
          description: All errors
      description: |-
        An error that occurred during query execution. A QueryExecutionError returns as part of a
         successful batch aggregation query for any queries that failed. This is different from errors,
         which return for failed requests.
    dataservices.query.QueryExecutionErrorDetailsDTO:
      type: object
      properties:
        objectType:
          type: string
          description: Query request object type.
        queryIndex:
          type: integer
          description: The position of the query within the request query list.
          format: int32
        columnIndex:
          type: integer
          description: The position of the column within the request column list.
          format: int32
        error:
          type: string
          description: The details of the error.
      description: The details of a error that occurred during query execution.
    dataservices.query.QueryExecutionErrorsDTO:
      type: object
      properties:
        errorCode:
          type: string
          description: A brief identifier of the type of error.
        message:
          type: string
          description: The message of the error.
        allErrorDetails:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryExecutionErrorDetailsDTO'
          description: The list of the error details.
      description: The errors that occurred during query execution.
    dataservices.query.QueryExecutionOptionsDTO:
      type: object
      properties:
        calendarType:
          enum:
            - TENANT_CALENDAR
            - GREGORIAN_CALENDAR
          type: string
          description: |-
            The calendar type to use. This will be used for all time calculations unless explicitly overridden in
             the calculation itself. Default is TENANT_CALENDAR.
          format: enum
        currencyConversionMode:
          deprecated: true
          enum:
            - TENANT_CURRENCY_CONVERSION
            - VISIER_CURRENCY_CONVERSION
          type: string
          description: "This will be removed as of Winter 2026. Use `currencyConversionCode` instead. \n\n The currency conversion mode to use. This will be used for all currency conversion calculations unless explicitly overridden in the calculation itself. Default is TENANT_CURRENCY_CONVERSION."
          format: enum
        currencyConversionDate:
          type: string
          description: |-
            The currency conversion date to use. If defined, the currency conversion will use the exchange rates as of this date.
             Default is the exchange rate at the end of the query time interval. Format is the number of milliseconds since
             midnight 01 January, 1970 UTC as a string. Note: Epochs are expressed as 64-bit integers and represented as
             stringified longs in JSON due to JSON's inherent limitation in representing large numbers.
        lineageDepth:
          type: integer
          description: The max number of levels of nesting to unwind when determining the lineage for a derived metric value.
          format: int32
        zeroVisibility:
          enum:
            - SHOW
            - HIDE
            - ELIMINATE
          type: string
          description: Show or hide zeros in the result. Default is SHOW.
          format: enum
        nullVisibility:
          enum:
            - SHOW
            - HIDE
            - ELIMINATE
          type: string
          description: Show or hide null or N/A values in the result. Default is SHOW.
          format: enum
        cellDistributionOptions:
          $ref: '#/components/schemas/dataservices.query.CellDistributionOptionsDTO'
        axisVisibility:
          enum:
            - SIMPLE
            - VERBOSE
          type: string
          description: The amount of information to return about each axis. Default is SIMPLE.
          format: enum
        enableSparseResults:
          type: boolean
          description: |-
            Retrieve sparse cell sets. Sparse results only retrieve non-zero and non-null cells. Whether a result is truly sparse
             or not is determined by the Visier server.
        internal:
          $ref: '#/components/schemas/dataservices.query.InternalQueryExecutionOptionsDTO'
        enableDescendingSpace:
          type: boolean
          description: If true, filter non-time axis member sets to only include members that are in aggregate positions or whose previous position is a leaf
        currencyConversionCode:
          type: string
          description: Overrides the tenant's default currency for currency conversions.
        memberDisplayMode:
          enum:
            - DEFAULT
            - COMPACT
            - DISPLAY
            - MDX
            - COMPACT_DISPLAY
          type: string
          description: |-
            Control how member values are displayed. You can override the `memberDisplayMode` on a per-axis basis, if required.

             Valid values are `DEFAULT`, `COMPACT`, `DISPLAY`, or `MDX`. Default is `DEFAULT`.

             * `DEFAULT`: The default member name representation. For non-time members, this returns the technical member name path.
               For time members, this includes a bracketed member index.
               For example, Time instant member: `2019-06-01T00:00:00.000Z - [0]`
               For example, Time interval member: `2022-06-01T00:00:00.000Z/2022-07-01T00:00:00.000Z - [12]`
             * `COMPACT`: Shortens the member name representation. For time intervals, the member name is the end time of the interval.
                For example, Time instant member: `2019-06-01T00:00:00.000Z`
                For example, Time interval member: `2022-07-01T00:00:00.000Z` where the interval member name was `2022-06-01T00:00:00.000Z/2022-07-01T00:00:00.000Z - [12]`
             * `DISPLAY`: Emits the members' display names whenever possible. When combined with `axisVisibility = VERBOSE`, the full display name path will be emitted.
             * `MDX`: Emits member name paths where each element is enclosed in square brackets, `[]`. Multidimensional expression (MDX) display mode automatically encloses time members in square brackets and puts them in `COMPACT` format.
               For example, Location member `North America.United States.California` becomes `[North America].[United States].[California]` in MDX display mode.
               For example, Time instant member `2019-06-01T00:00:00.000Z - [0]` becomes `[2019-06-01T00:00:00.000Z]` in MDX display mode.
             * `COMPACT_DISPLAY`: Emit the members' display names after compacting. This applies primarily to time members for event-based metrics. Compact display is required when
               running multi-metric queries containing both event-based and subject-based metrics. Multi-metric queries with `DISPLAY` mode are changed
               automatically to `COMPACT_DISPLAY`.
               For example, Time interval member `2022-06-01T00:00:00.000Z/2022-07-01T00:00:00.000Z - [12]` becomes `Jun 30, 2022` in `COMPACT_DISPLAY` mode.
               The exact format of the compacted time member display name depends on the the user's locale.
          format: enum
        axesOverallValueMode:
          enum:
            - NONE
            - AGGREGATE
            - OVERALL
          type: string
          description: "If `axes` is defined, use `axesOverallValueMode` to specify the type of overall values to return across the axes. Valid values:\n\n * `NONE`: Returns the metric's values for the selected axes and doesn't return overall values. This is the default.\n * `AGGREGATE`: Returns the metric's overall values for the selected axes members.\n * `OVERALL`: Returns the metric's overall values for all axes members.\n\n **Note**: `AGGREGATE` is not supported for lookup overlays because the overall values of selected members cannot be calculated directly from the data.\n\n Example: Let's say you want to know the Headcount of the locations Canada and US and the genders Male and Female. \n\n When `axesOverallValueMode` is `NONE`, the query returns these values:\n * 100 (Canada, Male)\n * 100 (US, Male)\n * 100 (Canada, Female)\n * 100 (US, Female)\n \n When `axesOverallValueMode` is `AGGREGATE`, the query returns these values:\n * 100 (Canada, Male)\n * 100 (US, Male)\n * 100 (Canada, Female)\n * 100 (US, Female)\n * 400 (Overall, Overall)\n * 200 (Overall, Male)\n * 200 (Overall, Female)\n * 200 (Canada, Overall)\n * 200 (US, Overall)\n\n When `axesOverallValueMode` is `OVERALL`, the query returns these values:\n * 100 (Canada, Male)\n * 100 (US, Male)\n * 100 (Canada, Female)\n * 100 (US, Female)\n * 800 (Overall, Overall)\n * 400 (Overall, Male)\n * 400 (Overall, Female)\n * 400 (Canada, Overall)\n * 400 (US, Overall)\n \n In this example, `OVERALL` returns higher overall values than `AGGREGATE` because `AGGREGATE` returns the overall values for the selected locations (Canada, US) and genders (Male, Female), whereas `OVERALL` returns the overall values across all locations and genders in the data."
          format: enum
      description: A QueryExecutionOptions provides additional instructions to perform a query.
    dataservices.query.QueryFilterDTO:
      type: object
      properties:
        formula:
          type: string
          description: A filter expressed as a formula.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptReferenceDTO'
          description: A filter that uses an existing selection concept in Visier.
        memberSet:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.MemberFilterDTO'
          description: A filter that includes or excludes dimension members.
        cohort:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.CohortFilterDTO'
          description: A filter that identifies a population at a specific time.
      description: A QueryFilter selects specific data points within a population.
    dataservices.query.QueryMemberMapPropertyDTO:
      type: object
      properties:
        memberMap:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A member map and its qualifying path to query.
        targetDimensionName:
          type: string
          description: The name of the member map's dimension that you want to query. The member selection is based on this dimension.
      description: A QueryMemberMapProperty defines an existing member map and its dimension to query.
    dataservices.query.QueryMemberMapSelectionDTO:
      type: object
      properties:
        memberMap:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A member map and its qualifying path to query.
        targetDimensionName:
          type: string
          description: The name of the member map's dimension that you want to query. The member selection is based on this dimension.
        members:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.common.DimensionMemberReferenceDTO'
          description: A collection of the selected dimension members from the `targetDimension`. This must contain at least one member.
      description: |-
        A QueryMemberMapSelection groups data in a query by dimension members in a member map.
         This allows grouping by a dimension that isn't typically valid on the analytic object being
         queried by selecting a valid member map on the analytic object.
         Note: This is unique to the data query API and cannot be reproduced in Visier's interface.
    dataservices.query.QueryNumericRangesDTO:
      type: object
      properties:
        property:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryPropertyDTO'
          description: The name and qualifying path of a numeric property. Non-numeric properties are not accepted.
        ranges:
          type: string
          description: The ranges to group data into, expressed as a space-separated string of range-bound values.
        includeNegative:
          type: boolean
          description: If `true`, negative ranges are included. Default is false.
        includeIndependentZeroRange:
          type: boolean
          description: If `true`, 0 is an independent range. Default is false.
        includeAllMember:
          type: boolean
          description: If `true`, a member is included that represents all members on the axis. Default is false.
      description: A QueryNumericRanges groups data into specified ranges based on a property value.
    dataservices.query.QueryParameterValueDTO:
      type: object
      properties:
        memberValue:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.MemberParameterValueDTO'
          description: A value for a member parameter.
        numericValue:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.NumericParameterValueDTO'
          description: A value for a numeric parameter.
        planValue:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.PlanParameterValueDTO'
          description: A value for a plan parameter.
        aggregationTypeValue:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.AggregationTypeParameterValueDTO'
          description: A value for an aggregation parameter.
      description: An object that contains parameter values for either member or numeric parameters.
    dataservices.query.QueryPropertyDTO:
      type: object
      properties:
        formula:
          type: string
          description: A formula-based property.
        property:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.PropertyReferenceDTO'
          description: A property reference.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.SelectionConceptReferenceDTO'
          description: A selection concept-based property that returns true or false.
        dimension:
          allOf:
            - $ref: '#/components/schemas/dataservices.datamodel.DimensionReferenceDTO'
          description: A dimension-based property that returns the full name path of the dimension member that the data point is mapped to.
        memberMapProperty:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryMemberMapPropertyDTO'
          description: A member map-based property that uses an existing member map in Visier.
        effectiveDateProperty:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryEffectiveDatePropertyDTO'
          description: A property that yields the effective date for the record
        dimensionLevelSelection:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryDimensionLevelPropertyDTO'
          description: A dimension-based property that returns the member values of the dimension level.
      description: |-
        A QueryProperty defines a property of a data point returned from a query.
         This is not the same as a `property` in Visier's data mode.
    dataservices.query.QueryTimeIntervalDTO:
      type: object
      properties:
        fromInstant:
          type: string
          description: |-
            The instant from which to extend in the specified `direction`, in milliseconds since 1970-01-01T00:00:00Z.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
             Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to
             JSON's inherent limitation in representing large numbers.
        fromDateTime:
          type: string
          description: |-
            The instant from which to extend in the specified `direction`, as an ISO-8601 formatted date time string.
             Valid formats: yyyy-MM-dd, yyyy-MM-dd'T'HH:mm:ss, yyyy-MM-dd'T'HH:mm:ss.SSS.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
        dynamicDateFrom:
          enum:
            - SOURCE
            - COMPLETE_PERIOD
          type: string
          description: "Dynamically select the date from which to extend in the specified `direction`. Valid values are `SOURCE` or `COMPLETE_PERIOD`. Both options determine the date using the request's `source` field. Whether the source is a metric, formula, or metrics, each source has earliest and latest data available dates to use. The `direction` determines whether the earliest or latest date is used.\n\n * If `dynamicDateFrom` is `SOURCE`, the query returns data from a date determined by the `source` query definition element. If `dynamicDateFrom` is `COMPLETE_PERIOD`, the query returns data starting from the latest or earliest date with a complete period of data. `COMPLETE_PERIOD` returns periods defined by `intervalPeriodType`. If the period type is MONTH, it returns full months of data. If the period type is YEAR, it returns full years of data. When `dynamicDateFrom` is specified:\n * If `source` is `metric`, then `dynamicDateFrom` considers the date range of available data for the metric.\n * If `source` is `formula`, then `dynamicDateFrom` considers the date range of available data for the metric in the formula.\n * If `source` is `analyticObject`, then `dynamicDateFrom` considers the date range of available data for the analytic object.\n Then, if `direction` is `BACKWARD`, query backward from the data **end** date and if `direction` is `FORWARD`, query forward from the data **start** date.\n This allows you to keep getting the latest or earliest data without changing your query every time there's new or updated data. \n\n Example: If a tenant has Headcount metric data available from 2023-01-01 to 2024-01-01 (End date exclusive), specifying `dynamicDateFrom`: `SOURCE` with `direction`: `BACKWARD`\n means the query will retrieve data backward from 2024-01-01. The effect is the same as if specifying a `fromDateTime` of 2024-01-01'T'00:00:00.000. \n\n Example: If a tenant has Employee subject data available from 2023-01-01 to 2024-01-01 (End date exclusive), specifying `dynamicDateFrom`: `SOURCE` with `direction`: `FORWARD` \n means the query will retrieve data forward from 2023-01-01. The effect is the same as if specifying a `fromDateTime` of 2023-01-01'T'00:00:00.000.\n\n Example: If a tenant has Employee subject data available from 2023-01-10 to 2023-04-01 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `FORWARD` \n means the query will retrieve data forward from 2023-02-01. The effect is the same as if specifying a `fromDateTime` of 2023-02-01'T'00:00:00.000.\n\n Example: If a tenant has Employee subject data available from 2023-01-01 to 2023-03-15 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `BACKWARD` \n means the query will retrieve data backward from 2023-03-01. The effect is the same as if specifying a `fromDateTime` of 2023-03-01'T'00:00:00.000.\n\n Example: Retrieve a list of EmployeeIDs for the formula extending 1 month backward from the dynamic source date\n      {\n          \"source\": {\n              \"formula\": \"on Employee validUntil instant filterBy(isActiveEmployee) aggregate count(Employee.EmployeeID)\"\n          }, \n          \"columns\": [\n               {\n                  \"columnDefinition\": {\n                      \"property\": {\n                          \"name\": \"Employee.EmployeeID\",\n                          \"qualifyingPath\": \"Employee\"\n                      }\n                  }\n               },\n               {\n                  \"columnDefinition\": {\n                      \"effectiveDateProperty\": {}\n                  }\n               }\n          ],\n          \"timeInterval\": {\n              \"dynamicDateFrom\": \"SOURCE\",\n              \"intervalPeriodType\": \"MONTH\",\n              \"intervalPeriodCount\": 1,\n              \"direction\": \"BACKWARD\"\n          }\n      }"
          format: enum
        intervalPeriodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: The time period type for each interval. Default is MONTH.
          format: enum
        intervalPeriodCount:
          type: integer
          description: The number of time periods per interval.
          format: int32
        direction:
          enum:
            - BACKWARD
            - FORWARD
          type: string
          description: The direction to extend. Default is BACKWARD. BACKWARD is useful when the time instant is the current date or with `dynamicDateFrom` because the query continuously retrieves the newest data from current date backwards.
          format: enum
        shift:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.TimeShiftDTO'
          description: The amount of time to shift the time interval by, such as backward by one year. Default is none.
      description: |-
        A QueryTimeInterval defines the time interval to query, including the "from" time, period type,
         period count, time direction, and shift to apply
    dataservices.query.QueryTimeIntervalsDTO:
      type: object
      properties:
        fromInstant:
          type: string
          description: |-
            The instant from which to extend, in milliseconds since 1970-01-01T00:00:00Z.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
             Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's
             inherent limitation in representing large numbers.
        fromDateTime:
          type: string
          description: |-
            The instant from which to extend, as an ISO-8601 formatted date time string. This value is exclusive.
             Valid formats: yyyy-MM-dd, yyyy-MM-dd'T'HH:mm:ss, yyyy-MM-dd'T'HH:mm:ss.SSS.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
        dynamicDateFrom:
          enum:
            - SOURCE
            - COMPLETE_PERIOD
          type: string
          description: "Dynamically select the date from which to extend. Valid values are `SOURCE` or `COMPLETE_PERIOD`. Both options use the `source` query definition element to determine the date.\n\n If `dynamicDateFrom` is `SOURCE`, the query returns data from a date determined by the `source` query definition element. If `dynamicDateFrom` is `COMPLETE_PERIOD`, the query returns data starting from the latest or earliest date with a complete period of data. When `dynamicDateFrom` is specified:\n * If `source` is `metric`, then `dynamicDateFrom` considers the date range of available data for the metric.\n * If `source` is `formula`, then `dynamicDateFrom` considers the date range of available data for the metric in the formula.\n * If `source` is `metrics`, then `dynamicDateFrom` considers the date range of available data for the metric in the formula.\n Then, if `direction` is `BACKWARD`, query backward from the data **end** date and if `direction` is `FORWARD`, query forward from the data **start** date. \n This allows you to keep getting the latest or earliest data without changing your query every time there's new or updated data.\n\n Note: For multi-metric queries, if `direction` is `BACKWARD`, query backward from the earliest data end date of all metrics and if `direction` is `FORWARD`, query forward from the latest data start date of all metrics. \n This ensures that all metrics have data in the specified time range.\n\n Example: If a tenant has Headcount metric data available from 2023-01-01 to 2024-01-01 (End date exclusive), specifying `dynamicDateFrom`: `SOURCE` with `direction`: `BACKWARD` \n means the query will retrieve data backward from 2024-01-01. The effect is the same as if specifying a `fromDateTime` of 2024-01-01'T'00:00:00.000. \n\n Example: If a tenant has Employee subject data available from 2023-01-10 to 2023-04-01 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `FORWARD` \n means the query will retrieve data forward from 2023-02-01. The effect is the same as if specifying a `fromDateTime` of 2023-02-01'T'00:00:00.000. \n\n Example: If a tenant has Employee subject data available from 2023-01-01 to 2023-03-15 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `BACKWARD` \n means the query will retrieve data backward from 2023-03-01. The effect is the same as if specifying a `fromDateTime` of 2023-03-01'T'00:00:00.000. \n\n Example: If a tenant has Headcount data available from 2023-01-01 to 2024-09-01 and Exit Count data available from 2023-01-01 to 2024-01-01, specifying `dynamicDateFrom`: `SOURCE` with `direction`: `BACKWARD` means the query will retrieve data backward from 2024-01-01. \n Exit Count has an earlier data end date than Headcount, so `dynamicDateFrom` retrieves data backward from Exit Count's data end date to ensure both metrics have data in the specified time range.\n\n Example: Retrieve Headcount (employeeCount) extending 1 month backward from Headcount's dynamic source date\n      {\n          \"query\": {\n              \"source\": {\n                  \"metric\": \"employeeCount\"\n              },\n              \"timeIntervals\": {\n                  \"dynamicDateFrom\": \"SOURCE\",\n                  \"intervalPeriodType\": \"MONTH\",\n                  \"intervalCount\": 1,\n                  \"direction\": \"BACKWARD\"\n              }\n          }\n      }"
          format: enum
        intervalPeriodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: The time period type for each interval. Default is MONTH.
          format: enum
        intervalPeriodCount:
          type: integer
          description: The number of time periods per interval. Default is 1.
          format: int32
        intervalCount:
          type: integer
          description: The number of intervals. Default is 1.
          format: int32
        direction:
          enum:
            - BACKWARD
            - FORWARD
          type: string
          description: The direction to extend. Defaults is BACKWARD.
          format: enum
        shift:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.TimeShiftDTO'
          description: The amount of time to shift the time interval by, such as backward by one year.
        trailingPeriodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: |-
            The time period type for each trailing period. If `trailingPeriodCount` is defined and `trailingPeriodType` is undefined, the default trailing period type is `MONTH`.
             If both `trailingPeriodType` and `trailingPeriodCount` are undefined, `intervalPeriodCount` is used as the trailing period count.
             Note: This parameter is only applicable to metrics that can calculate trailing time. If defined on a metric that doesn't have trailing time, the platform ignores the parameter.
          format: enum
        trailingPeriodCount:
          type: integer
          description: |-
            The number of time periods per trailing period. If `trailingPeriodType` is defined and `trailingPeriodCount` is undefined, the default trailing period count is 1.
             Note: This parameter is only applicable to metrics that can calculate trailing time. If defined on a metric that doesn't have trailing time, the platform ignores the parameter.
          format: int32
      description: |-
        A QueryTimeIntervals defines a series of time intervals to query, including the "from" time, period type, period count,
         number of intervals, time direction, and shift to apply to each time interval.
    dataservices.query.SnapshotQueryExecutionDTO:
      type: object
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.ListQuerySourceDTO'
          description: The source data that you want to query.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.PropertyColumnDTO'
          description: The columns to include in the result. This must contain at least one column.
        sortOptions:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.SortOptionDTO'
          description: The index and direction to sort a column in the `columns` array.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryFilterDTO'
          description: The filters of this query. Omit `filters` if no filtering is required.
        timeIntervals:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryTimeIntervalsDTO'
          description: The time intervals to query.
        parameterValues:
          type: array
          items:
            $ref: '#/components/schemas/dataservices.query.QueryParameterValueDTO'
          description: The parameter values for either member or numeric parameters.
        options:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.SnapshotQueryExecutionOptionsDTO'
          description: Additional instructions for your query, such as a calendar type or conversion information.
    dataservices.query.SnapshotQueryExecutionOptionsDTO:
      type: object
      properties:
        limit:
          type: integer
          description: |-
            The maximum number of entries to return. Default is to return all entries. If `page` is defined but
             limit is not defined, limit will be set to a default value of 1000.
          format: int32
        queryMode:
          enum:
            - DEFAULT
            - FILL
            - FAIL
          type: string
          description: Determines how the query should handle column definitions that the query is unable to resolve. Default is DEFAULT.
          format: enum
        omitHeader:
          type: boolean
          description: |-
            Option to omit the header from the result.
             If true, queryMode must be either FILL or FAIL.
             Default is false.
        calendarType:
          enum:
            - TENANT_CALENDAR
            - GREGORIAN_CALENDAR
          type: string
          description: |-
            The calendar type to use. This will be used for all time calculations unless explicitly overridden in
             the calculation itself. Default is TENANT_CALENDAR.
          format: enum
        currencyConversionDate:
          type: string
          description: The currency conversion date to use. If defined, the currency conversion will use the exchange rates as of this date.
        page:
          type: integer
          description: |-
            A page defines a subset of the overall result set. The number of rows per page is equal to limit
             with the exception of the last page in the result set which may contain fewer rows. `Page` is an index
             that begins at 0. The index to start retrieving results is calculated by multiplying `page` by `limit`.
          format: int32
        multipleTables:
          type: boolean
          description: |-
            Option to return multiple table files as zipped archive for derived metrics.
             Default is false. If false, one table is returned for the drill-through metric.
        currencyConversionCode:
          type: string
          description: |-
            The optional target currency for all currency conversions.
             If not specified, the tenant default currency will be used.
        dateTimeDisplayMode:
          enum:
            - EPOCH
            - DATETIME
          type: string
          description: |-
            Control how date-time values are displayed in the result set.
             Supported values:
             * `EPOCH`: The number of elapsed milliseconds since January 1, 1970 in UTC timezone. This is the default.
             * `DATETIME`: The date-time value displayed in `yyyy-MM-dd HH:mm:ssZZ` format.
          format: enum
      description: A SnapshotQueryExecutionOptions provides additional instructions to perform a snapshot query.
    dataservices.query.SortOptionDTO:
      type: object
      properties:
        columnIndex:
          type: integer
          description: The index of the column of the list query, staring from 0.
          format: int32
        sortDirection:
          enum:
            - SORT_ASCENDING
            - SORT_DESCENDING
          type: string
          description: The sort direction.
          format: enum
      description: Sort option for a column of a list query.
    dataservices.query.SqlLikeQueryExecutionDTO:
      type: object
      properties:
        query:
          type: string
          description: The SQL-like query string
        options:
          allOf:
            - $ref: '#/components/schemas/dataservices.query.QueryExecutionOptionsDTO'
          description: Optional options that currently that cannot be expressed in SQL-like
      description: |-
        *
         Request body for SQL-like query executions
    dataservices.query.TimeShiftDTO:
      type: object
      properties:
        periodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: The time period type for the shift.
          format: enum
        periodCount:
          type: integer
          description: The number of intervals. Default is 1.
          format: int32
        direction:
          enum:
            - BACKWARD
            - FORWARD
          type: string
          description: The direction to extend. Default is BACKWARD.
          format: enum
      description: The amount of time to shift the time interval by, such as backward by one year.
    designer.api.AnalyticObjectFilterDTO:
      type: object
      properties:
        analyticObjectUuid:
          type: string
          description: The UUID of the analytic object used in the selection concept.
        symbolName:
          type: string
          description: The symbol name of the analytic object.
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.DimensionFilterDTO'
          description: A list of dimensions included in the concept.
    designer.api.CalculationConceptConfigurationDTO:
      type: object
      properties:
        perspectives:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.PerspectiveConfigurationDTO'
          description: A list of objects representing the perspectives in the calculation concept.
    designer.api.CalculationConceptConfigurationMapDTO:
      type: object
      properties:
        perspectivesToMap:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.PerspectiveConfigurationDTO'
          description: A list of objects representing the list of perspectives in the calculation concept.
      description: The configuration to apply to the concept.
    designer.api.CalculationConceptDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier associated with the calculation concept.
        name:
          type: string
          description: The display name of the calculation concept.
        configuration:
          allOf:
            - $ref: '#/components/schemas/designer.api.CalculationConceptConfigurationDTO'
          description: A list of objects representing the configuration for the calculation concept.
    designer.api.CalculationConceptListDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.CalculationConceptDTO'
          description: A list of objects representing calculation concepts.
    designer.api.ConceptConfigurationResultDTO:
      type: object
      properties:
        conceptId:
          type: string
          description: The unique identifier of the configured concept.
        projectId:
          type: string
          description: The unique identifier of the system-generated project.
        message:
          type: string
          description: A meaningful message about the API result.
    designer.api.DimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The UUID of the dimension.
        symbolName:
          type: string
          description: The symbol name of the dimension.
        dimensionMembers:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.DimensionMemberDTO'
          description: |-
            A list of dimension members to map to the perspective node.

             Note: If this array is empty, all dimension members will be removed for the node.
    designer.api.DimensionMemberDTO:
      type: object
      properties:
        dimensionMember:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the dimension members. Dimension members in a hierarchical dimension
             will have an array with multiple strings.
    designer.api.PerspectiveConfigurationDTO:
      type: object
      properties:
        perspectiveId:
          type: string
          description: The UUID of the perspective.
        perspectiveName:
          type: string
          description: The display name of the perspective.
        perspectiveNodes:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.PerspectiveNodeDTO'
          description: A list of nodes in the perspective.
    designer.api.PerspectiveNodeDTO:
      type: object
      properties:
        selectionConceptUuid:
          type: string
          description: The UUID of the node's selection concept. Perspective nodes are generated as selection concepts to enable filtering.
        symbolName:
          type: string
          description: The symbol name of the selection concept. For example, "isExitActualSystemTermination".
        analyticObjectFilters:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.AnalyticObjectFilterDTO'
          description: A list of analytic object filters indicating the analytic object and dimensions used for the selection concept.
    designer.api.SelectionConceptConfigurationDTO:
      type: object
      properties:
        analyticObjectFilters:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.AnalyticObjectFilterDTO'
          description: A list of analytic object filters indicating the analytic object and dimension used for this selection concept.
    designer.api.SelectionConceptConfigurationMapDTO:
      type: object
      properties:
        analyticObjectFiltersToMap:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.AnalyticObjectFilterDTO'
          description: |-
            A list of analytic object filters indicating the analytic object and dimension members used
             for the selection concept.

             Note: If this array is empty, all filters will be removed for the concept.
    designer.api.SelectionConceptDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier associated with the selection concept.
        name:
          type: string
          description: The display name of the selection concept.
        configuration:
          allOf:
            - $ref: '#/components/schemas/designer.api.SelectionConceptConfigurationDTO'
          description: A list of objects representing the configuration for the selection concept.
    designer.api.SelectionConceptListDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/designer.api.SelectionConceptDTO'
          description: A list of objects representing selection concepts.
    designer.crypto.GenerateKeyRequestDTO:
      type: object
      properties:
        keyName:
          type: string
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 6 and 36 characters long.
        expiryDate:
          type: string
          description: The UTC expiration date of the key in ISO-8601 format. Must be between 2 and 10 years. Default is 2 years.
        algorithm:
          type: string
          description: The hash-based message authentication code and cryptographic hash function associated with the encryption key. Must be one of `HmacSHA224`, `HmacSHA256`, `HmacSHA384`, or `HmacSHA512`.
      description: The settings to define for an encryption key.
    designer.crypto.KeyPairDeleteResponseDTO:
      type: object
      properties:
        keyID:
          type: string
          description: The key ID in 16-letter hexadecimal format, including leading zeros.
    designer.crypto.KeyPairGenerateRequestDTO:
      type: object
      properties:
        expirationDate:
          type: string
          description: The UTC expiration date of the key in ISO-8601 format. Must be between 2 and 10 years. Default is 2 years.
    designer.crypto.PublicKeyDTO:
      type: object
      properties:
        keyID:
          type: string
          description: The key ID of the generated key pair in 16-letter hexadecimal format, including leading zeros.
        dateGenerated:
          type: string
          description: The UTC date that the key pair was generated in milliseconds since the Unix epoch.
        expiryDate:
          type: string
          description: The UTC expiration date of the key in milliseconds since the Unix epoch.
        recipient:
          type: string
          description: The tenant code and creation date in milliseconds of the PGP key; for example, WFF_j1r_13490234234.
        publicKey:
          type: string
          description: The public key of the generated key pair.
    designer.crypto.PublicKeysDTO:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/designer.crypto.PublicKeyDTO'
          description: A list of the tenant's public keys.
    designer.crypto.TenantEncryptionKeyDTO:
      type: object
      properties:
        detail:
          allOf:
            - $ref: '#/components/schemas/designer.crypto.TenantEncryptionKeyDetailsDTO'
          description: Information about an encryption key.
        key:
          type: string
          description: The encryption key value.
      description: The details of an encryption key.
    designer.crypto.TenantEncryptionKeyDetailsDTO:
      type: object
      properties:
        keyName:
          type: string
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 6 and 36 characters long.
        algorithm:
          type: string
          description: The hash-based message authentication code and cryptographic hash function associated with the encryption key.
        generatedBy:
          type: string
          description: The user who generated the key.
        dateGenerated:
          type: string
          description: The UTC date that the key was generated in milliseconds since the Unix epoch.
        expiryDate:
          type: string
          description: The UTC expiration date of the key in milliseconds since the Unix epoch.
      description: Information about who generated an encryption key, its key name, algorithm, generation date, and expiration date.
    designer.AdpAuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
    designer.BambooAuthParamsDTO:
      type: object
      properties:
        accessKey:
          type: string
        tenantDomainName:
          type: string
    designer.BasicS3AuthParamsDTO:
      type: object
      properties:
        bucketName:
          type: string
        bucketRegion:
          type: string
        accessKey:
          type: string
        secretKey:
          type: string
        path:
          type: string
    designer.BigQueryAuthParamsDTO:
      type: object
      properties:
        projectId:
          type: string
        datasetLocation:
          type: string
        refreshToken:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        defaultDataset:
          type: string
        serviceAccountParams:
          $ref: '#/components/schemas/designer.BigQueryServiceAccountParamsDTO'
    designer.BigQueryServiceAccountParamsDTO:
      type: object
      properties:
        serviceAccountEmail:
          type: string
        privateKey:
          type: string
    designer.CopyS3AuthParamsDTO:
      type: object
      properties:
        iamRole:
          type: string
    designer.CredentialCreationAPIResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The unique ID of the newly created credential.
        symbolName:
          type: string
          description: The symbol name of the newly created credential.
        objectName:
          type: string
          description: The object name of the newly created credential.
        missingConnectionProperties:
          type: array
          items:
            $ref: '#/components/schemas/designer.SubjectMissingAccessDTO'
          description: |-
            The properties that the credential cannot access despite successful authentication.
             This is only returned for authentications that do not grant access to all data.
    designer.DataProviderAuthInformationDTO:
      type: object
      properties:
        dataProviderAuthParams:
          allOf:
            - $ref: '#/components/schemas/designer.DataProviderAuthParamsDTO'
          description: The authentication information for the credential.
        dataProviderBasicInformation:
          allOf:
            - $ref: '#/components/schemas/designer.DataProviderBasicInformationDTO'
          description: The display name and description for the credential.
        dataProviderMetadata:
          $ref: '#/components/schemas/designer.DataProviderBasicMetadataDTO'
    designer.DataProviderAuthParamsDTO:
      type: object
      properties:
        tenantDomainName:
          type: string
        provider:
          enum:
            - Bamboo
            - GoogleSheets
            - Greenhouse
            - Jira
            - Lever
            - Namely
            - Qualtrics
            - Salesforce
            - UKG
            - Workday
            - Icims
            - ServiceNow
            - Jdbc
            - BasicS3
            - InternalS3
            - CopyS3
            - Redshift
            - Snowflake
            - BigQuery
            - SqlServer
            - Dimensions
            - IcimsPartnerProviderRedshift
            - Willow
            - SuccessFactors
            - IcimsV2
            - ADP
            - WorkdayV2
            - ServiceNowV2
            - Medallia
            - Fusion
            - SalesforceV2
            - Gong
            - Zoom
            - GoogleCalendar
            - UKGV2
            - DayforceV2
            - GoogleActivityReport
            - Slack
            - MySql
            - WorkdayRaas
            - Microsoft365
            - GoogleWorkspace
            - OracleDb
            - SmartRecruiters
            - WorkdayWQL
            - OEMCornerstone
            - Databricks
            - JiraV2
          type: string
          description: The data provider associated with the credential.
          format: enum
        bambooAuthParams:
          $ref: '#/components/schemas/designer.BambooAuthParamsDTO'
        greenhouseAuthParams:
          $ref: '#/components/schemas/designer.GreenhouseAuthParamsDTO'
        googleSheetsAuthParams:
          $ref: '#/components/schemas/designer.GoogleSheetsAuthParamsDTO'
        jiraAuthParams:
          $ref: '#/components/schemas/designer.JiraAuthParamsDTO'
        leverAuthParams:
          $ref: '#/components/schemas/designer.LeverAuthParamsDTO'
        namelyAuthParams:
          $ref: '#/components/schemas/designer.NamelyAuthParamsDTO'
        qualtricsAuthParams:
          $ref: '#/components/schemas/designer.QualtricsAuthParamsDTO'
        salesforceAuthParams:
          $ref: '#/components/schemas/designer.SalesforceAuthParamsDTO'
        ultimateAuthParams:
          $ref: '#/components/schemas/designer.UltimateAuthParamsDTO'
        workdayAuthParams:
          $ref: '#/components/schemas/designer.WorkdayAuthParamsDTO'
        icimsAuthParams:
          $ref: '#/components/schemas/designer.IcimsAuthParamsDTO'
        serviceNowAuthParams:
          $ref: '#/components/schemas/designer.ServiceNowAuthParamsDTO'
        jdbcAuthParams:
          $ref: '#/components/schemas/designer.JdbcAuthParamsDTO'
        s3AuthParams:
          $ref: '#/components/schemas/designer.BasicS3AuthParamsDTO'
        internalS3AuthParams:
          $ref: '#/components/schemas/designer.InternalS3AuthParamsDTO'
        copyS3AuthParams:
          $ref: '#/components/schemas/designer.CopyS3AuthParamsDTO'
        redshiftAuthParams:
          $ref: '#/components/schemas/designer.RedshiftAuthParamsDTO'
        snowflakeAuthParams:
          $ref: '#/components/schemas/designer.SnowflakeAuthParamsDTO'
        bigQueryAuthParams:
          $ref: '#/components/schemas/designer.BigQueryAuthParamsDTO'
        sqlServerAuthParams:
          $ref: '#/components/schemas/designer.SqlServerAuthParamsDTO'
        dimensionsAuthParams:
          $ref: '#/components/schemas/designer.DimensionsAuthParamsDTO'
        willowAuthParams:
          $ref: '#/components/schemas/designer.WillowAuthParamsDTO'
        emptyAuthParams:
          $ref: '#/components/schemas/designer.EmptyAuthParamsDTO'
        successFactorsAuthParams:
          $ref: '#/components/schemas/designer.SuccessFactorsAuthParamsDTO'
        fusionAuthParams:
          $ref: '#/components/schemas/designer.FusionAuthParamsDTO'
        adpAuthParams:
          $ref: '#/components/schemas/designer.AdpAuthParamsDTO'
        medalliaAuthParams:
          $ref: '#/components/schemas/designer.MedalliaAuthParamsDTO'
        salesforceV2AuthParams:
          $ref: '#/components/schemas/designer.SalesforceV2AuthParamsDTO'
        gongAuthParams:
          $ref: '#/components/schemas/designer.GongAuthParamsDTO'
        zoomAuthParams:
          $ref: '#/components/schemas/designer.ZoomAuthParamsDTO'
        dayforceV2AuthParams:
          $ref: '#/components/schemas/designer.DayforceV2AuthParamsDTO'
        slackAuthParams:
          $ref: '#/components/schemas/designer.SlackAuthParamsDTO'
        mySqlAuthParams:
          $ref: '#/components/schemas/designer.MySqlAuthParamsDTO'
        workdayRaasAuthParams:
          $ref: '#/components/schemas/designer.WorkdayRaasAuthParamsDTO'
        ms365AuthParams:
          $ref: '#/components/schemas/designer.Microsoft365AuthParamsDTO'
        googleWorkspaceAuthParams:
          $ref: '#/components/schemas/designer.GoogleWorkspaceAuthParamsDTO'
        oracleDbAuthParams:
          $ref: '#/components/schemas/designer.OracleDbAuthParamsDTO'
        serviceNowV2AuthParams:
          $ref: '#/components/schemas/designer.ServiceNowV2AuthParamsDTO'
        databricksAuthParams:
          $ref: '#/components/schemas/designer.DatabricksAuthParamsDTO'
        hasUpdates:
          type: boolean
        authContext:
          enum:
            - DefaultDataExtraction
            - WorkplaceDynamicsDataExtraction
            - Notification
          type: string
          format: enum
    designer.DataProviderBasicInformationDTO:
      type: object
      properties:
        displayName:
          type: string
        description:
          type: string
    designer.DataProviderBasicMetadataDTO:
      type: object
      properties:
        canChildrenInherit:
          type: boolean
    designer.DataVersionExportColumnDTO:
      type: object
      properties:
        name:
          type: string
          description: The column's name.
        dataType:
          type: string
          description: The column's data type. Possible data types are string, integer, number, date, Boolean.
        allowsNull:
          type: boolean
          description: If `true`, the column allows null values.
        isPrimaryKeyComponent:
          type: boolean
          description: If `true`, the column is part of the primary key.
    designer.DataVersionExportDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier of the data version export. Must be a valid UUID.
        timestamp:
          type: string
          description: The date that the data version export was generated, in milliseconds since 1970-01-01T00:00:00Z.
        dataVersionNumber:
          type: string
          description: The data version number for which the export was generated.
        baseDataVersionNumber:
          type: string
          description: The baseline data version number for which the export was generated. If specified, the export is a delta of the differences between `dateVersionNumber` and `baseDataVersionNumber`. If empty, a full export is generated for `dataVersionNumber`.
        tables:
          type: array
          items:
            $ref: '#/components/schemas/designer.DataVersionExportTableDTO'
          description: Information about the tables in the export.
        newTables:
          type: array
          items:
            type: string
          description: Tables that exist in `dataVersionNumber` but did not exist in `baseDataVersionNumber`.
        deletedTables:
          type: array
          items:
            type: string
          description: Tables that do not exist in `dataVersionNumber` but did exist in `baseDataVersionNumber`.
    designer.DataVersionExportDataVersionSummaryDTO:
      type: object
      properties:
        dataVersion:
          type: string
          description: The data version number.
        dataCategory:
          type: string
          description: The data category that the data version belongs to. If empty, the data version belongs to the default data category.
        created:
          type: string
          description: The date that the data version was generated, in milliseconds since 1970-01-01T00:00:00Z.
    designer.DataVersionExportDataVersionsDTO:
      type: object
      properties:
        dataVersions:
          type: array
          items:
            $ref: '#/components/schemas/designer.DataVersionExportDataVersionSummaryDTO'
          description: All the available data versions for the tenant's primary data category.
    designer.DataVersionExportFileDTO:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/designer.DataVersionExportColumnDTO'
          description: Information about a table's columns.
        files:
          type: array
          items:
            $ref: '#/components/schemas/designer.DataVersionExportPartFileDTO'
          description: Information about a table's files in the export.
    designer.DataVersionExportJobStatusDTO:
      type: object
      properties:
        jobUuid:
          type: string
          description: The unique identifier of the data version export job.
        completed:
          type: boolean
          description: If `true`, the job completed successfully.
        failed:
          type: boolean
          description: If `true`, the job failed.
        exportUuid:
          type: string
          description: The unique identifier of the data version export generated by the job. If empty, the job hasn't completed successfully.
    designer.DataVersionExportPartFileDTO:
      type: object
      properties:
        fileId:
          type: integer
          description: The unique integer identifier of the file in the data version export.
          format: int32
        filename:
          type: string
          description: The file's name.
    designer.DataVersionExportScheduleJobRequestDTO:
      type: object
      properties:
        dataVersionNumber:
          type: string
          description: The data version number to generate an export for.
        baseDataVersionNumber:
          type: string
          description: |-
            Optional. The baseline data version number to use to generate a delta export.
             Delta exports contain the differences between `baseDataVersionNumber` and
             `dataVersionNumber`, such as anything updated, added, or removed in `dataVersionNumber`.
             If `baseDataVersionNumber` is not provided, a full export generates for `dataVersionNumber`.
    designer.DataVersionExportScheduleJobResponseDTO:
      type: object
      properties:
        jobUuid:
          type: string
          description: The unique identifier of the scheduled data version export job.
    designer.DataVersionExportTableDTO:
      type: object
      properties:
        name:
          type: string
          description: The name of a table in the data version export; for example, Employee or Applicant.
        commonColumns:
          allOf:
            - $ref: '#/components/schemas/designer.DataVersionExportFileDTO'
          description: Information about the columns and files that are in both `dataVersionNumber` and `baseDataVersionNumber`. Always empty for full exports where `baseDataVersionNumber` is not specified.
        newColumns:
          allOf:
            - $ref: '#/components/schemas/designer.DataVersionExportFileDTO'
          description: |-
            Information about new columns and files in the data version.
             If full export, lists all columns. If delta export, lists columns that exist in `dataVersionNumber` but not in `baseDataVersionNumber`.
        deletedColumns:
          type: array
          items:
            type: string
          description: Information about columns that do not exist in `dataVersionNumber` but did exist in `baseDataVersionNumber`.
    designer.DataVersionExportsDTO:
      type: object
      properties:
        dataVersionExports:
          type: array
          items:
            $ref: '#/components/schemas/designer.DataVersionExportDTO'
          description: Information about data version exports.
    designer.DatabricksAuthParamsDTO:
      type: object
      properties:
        shareCredentialsVersion:
          type: string
        bearerToken:
          type: string
        endpoint:
          type: string
        expirationTime:
          type: string
    designer.DayforceV2AuthParamsDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        companyId:
          type: string
        tokenHost:
          type: string
        hostDomainName:
          type: string
    designer.DimensionsAuthParamsDTO:
      type: object
      properties:
        appKey:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        vanityUrl:
          type: string
        username:
          type: string
        password:
          type: string
    designer.DownloadSourceFilesDTO:
      type: object
      properties:
        downloadAll:
          type: boolean
          description: If `true`, downloads all uploaded files for all sources. Default is `false`.
        sources:
          type: array
          items:
            type: string
          description: A comma-separated list of strings representing the object name of each source to download.
        sourceIds:
          type: array
          items:
            type: string
          description: A comma-separated list of strings representing the unique identifier of each source to download.
        minTimestamp:
          type: string
          description: The earliest upload time to download files from in ISO 8601 format, such as `"2001-10-25T13:45:35.999"`. If omitted, downloads files from the earliest available time.
        maxTimestamp:
          type: string
          description: The latest upload time to download files up to in ISO 8601 format, such as `"2001-10-25T13:45:35.999"`. If omitted, downloads files up to the latest available time.
        minSnapshotTimestamp:
          type: string
          description: The earliest snapshot time to download files from in ISO 8601 format, such as `"2001-10-25T13:45:35.999"`. If omitted, downloads files from the earliest available time.
        maxSnapshotTimestamp:
          type: string
          description: The latest snapshot time to download files up to in ISO 8601 format, such as `"2001-10-25T13:45:35.999"`. If omitted, downloads files up to the latest available time.
        includeNonActiveFiles:
          type: boolean
          description: If `true`, includes excluded files in download. Default is `false`.
    designer.DownloadSourceFilesResponseDTO:
      type: object
      properties:
        status:
          type: string
          description: The download request status, such as `Error`.
        messages:
          type: string
          description: A description of the request status.
    designer.EmptyAuthParamsDTO:
      type: object
      properties: {}
    designer.ExtractorCredentialAPIDTO:
      type: object
      properties:
        credentialId:
          type: string
          description: The ID associated with the connector credential.
        displayName:
          type: string
          description: An identifiable connector credential name that is displayed within Visier.
        dataProvider:
          type: string
          description: The data provider associated with the credential.
        isInherited:
          type: boolean
          description: Whether this credential is inherited from another tenant.
        authContext:
          type: string
    designer.ExtractorCredentialsAPIDTO:
      type: object
      properties:
        connectorCredentials:
          type: array
          items:
            $ref: '#/components/schemas/designer.ExtractorCredentialAPIDTO'
          description: A list of objects representing all the available connector credentials in Production.
        limit:
          type: integer
          description: The number of connector credentials to return. The maximum number of data connector credentials to return is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    designer.FusionAuthParamsDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        hostDomainName:
          type: string
    designer.GongAuthParamsDTO:
      type: object
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
    designer.GoogleSheetsAuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
        configuration:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
    designer.GoogleWorkspaceAuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        serviceAccount:
          type: string
        privacyMode:
          type: string
    designer.GreenhouseAuthParamsDTO:
      type: object
      properties:
        apiKey:
          type: string
    designer.IcimsAuthParamsDTO:
      type: object
      properties:
        customerId:
          type: string
        username:
          type: string
        password:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        region:
          enum:
            - US
            - EU
            - CA
            - ISV
          type: string
          format: enum
    designer.InternalS3AuthParamsDTO:
      type: object
      properties:
        bucketName:
          type: string
        path:
          type: string
    designer.JdbcAuthParamsDTO:
      type: object
      properties:
        jdbcConnectString:
          type: string
        username:
          type: string
        password:
          type: string
    designer.JiraAuthParamsDTO:
      type: object
      properties:
        apiToken:
          type: string
        hostName:
          type: string
        connectParams:
          $ref: '#/components/schemas/designer.JiraConnectParamsDTO'
    designer.JiraConnectParamsDTO:
      type: object
      properties:
        appKey:
          type: string
        clientKey:
          type: string
        sharedSecret:
          type: string
    designer.LeverAuthParamsDTO:
      type: object
      properties:
        apiKey:
          type: string
    designer.MedalliaAuthParamsDTO:
      type: object
      properties:
        tenantDomainName:
          type: string
        instanceUrl:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
    designer.Microsoft365AuthParamsDTO:
      type: object
      properties:
        oAuthTenantId:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        privacyMode:
          type: string
    designer.ModuleSettingsDTO:
      type: object
      properties:
        unavailableForAssignment:
          type: boolean
          description: If true, the module cannot be assigned to tenants.
        specialHandlingInstruction:
          type: string
          description: An instruction message in the module selection dialog. This can be a note for administrators such as "Don't assign this module" or "Assign Module B instead".
        locale:
          type: string
          description: The language of the module. For example, a module that is in English will have the locale "en".
    designer.MySqlAuthParamsDTO:
      type: object
      properties:
        host:
          type: string
        port:
          type: string
        username:
          type: string
        password:
          type: string
        database:
          type: string
        sslMode:
          type: string
    designer.NamelyAuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
    designer.OracleDbAuthParamsDTO:
      type: object
      properties:
        host:
          type: string
        port:
          type: string
        username:
          type: string
        password:
          type: string
        serviceName:
          type: string
    designer.PairDTO:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    designer.PushDataColumnDefinitionDTO:
      type: object
      properties:
        columnName:
          type: string
          description: The name of the column.
        dataType:
          type: string
          description: The data type associated with the column.
        dataFormats:
          type: array
          items:
            type: string
          description: The expected format for datetime data types.
        isMandatory:
          type: boolean
          description: If true, the column value is required. If a column is mandatory, and the file is missing this column, the request will fail.
        allowEmpty:
          type: boolean
          description: If true, the column allows an empty value for the record.
        defaultValue:
          type: string
          description: The default value of the column.
      description: Definition of the source column.
    designer.PushDataSourceDefinitionDTO:
      type: object
      properties:
        sourceId:
          type: string
          description: The unique identifier associated with the source.
        name:
          type: string
          description: The object name of the source.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/designer.PushDataColumnDefinitionDTO'
          description: A list of objects representing the source columns.
        isInherited:
          type: boolean
          description: If true, the source is inherited by all analytic tenants.
        objectName:
          type: string
          description: The unique object name associated with the source.
        fileNameRegex:
          type: string
          description: A regular expression to match the file names for the source.
      description: Details of each existing source.
    designer.PushDataSourceDefinitionsDTO:
      type: object
      properties:
        sources:
          type: array
          items:
            $ref: '#/components/schemas/designer.PushDataSourceDefinitionDTO'
          description: A list of objects representing the target sources for the request.
      description: The existing sources.
    designer.QualtricsAuthParamsDTO:
      type: object
      properties:
        apiToken:
          type: string
        dataCenterId:
          type: string
    designer.RedshiftAuthParamsDTO:
      type: object
      properties:
        endpoint:
          type: string
        port:
          type: string
        database:
          type: string
        username:
          type: string
        password:
          type: string
        tablePrefix:
          type: string
        schema:
          type: string
    designer.SalesforceAuthParamsDTO:
      type: object
      properties:
        refreshToken:
          type: string
        clientId:
          type: string
    designer.SalesforceV2AuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        loginHost:
          type: string
    designer.ServiceNowAuthParamsDTO:
      type: object
      properties:
        hostDomainName:
          type: string
        username:
          type: string
        password:
          type: string
    designer.ServiceNowV2AuthParamsDTO:
      type: object
      properties:
        hostDomainName:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        authCode:
          type: string
        alternateDomain:
          type: string
    designer.SlackAuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
    designer.SnowflakeAuthParamsDTO:
      type: object
      properties:
        accountIdentifier:
          type: string
        database:
          type: string
        schema:
          type: string
        username:
          type: string
        password:
          type: string
        warehouse:
          type: string
        privateKey:
          type: string
    designer.SqlServerAuthParamsDTO:
      type: object
      properties:
        host:
          type: string
        port:
          type: string
        username:
          type: string
        password:
          type: string
        database:
          type: string
    designer.SubjectMissingAccessDTO:
      type: object
      properties:
        subject:
          enum:
            - Employee
            - Employee_Budgeted_Compensation
            - Employment_Start
            - Employment_Exit
            - Absenteeism
            - Supervisory
            - Organization
            - Compensation_Payout
            - CustomSubject
            - TestConnectionSubject
            - Internal_Placement
            - Pay_Change
            - Hire
            - Applicant
            - Candidate
            - Requisition
          type: string
          description: The subjects that cannot be accessed.
          format: enum
        attributes:
          type: array
          items:
            type: string
          description: The attributes that cannot be accessed.
        errorMessage:
          type: string
          description: The error message detailing the access issue.
    designer.SuccessFactorsAuthParamsDTO:
      type: object
      properties:
        hostDomainName:
          type: string
        companyID:
          type: string
        username:
          type: string
        password:
          type: string
        oAuth:
          $ref: '#/components/schemas/designer.SuccessFactorsOAuthParamsDTO'
    designer.SuccessFactorsOAuthParamsDTO:
      type: object
      properties:
        apiKey:
          type: string
        privateX509Key:
          type: string
        publicX509Cert:
          type: string
    designer.TenantModuleDTO:
      type: object
      properties:
        displayName:
          type: string
          description: An identifiable name that is displayed within Visier. For example, "TALENT".
        symbolName:
          type: string
          description: The symbol name of the module. For example, "Talent_Management".
        moduleSettings:
          allOf:
            - $ref: '#/components/schemas/designer.ModuleSettingsDTO'
          description: The settings associated with the module.
    designer.UltimateAuthParamsDTO:
      type: object
      properties:
        hostDomainName:
          type: string
        apiKey:
          type: string
        username:
          type: string
        password:
          type: string
        userAccessKey:
          type: string
    designer.WillowAuthParamsDTO:
      type: object
      properties:
        apiToken:
          type: string
        hostName:
          type: string
    designer.WorkdayAuthParamsDTO:
      type: object
      properties:
        userId:
          type: string
        domainName:
          type: string
        implementationName:
          type: string
        password:
          type: string
        oAuth:
          $ref: '#/components/schemas/designer.WorkdayOAuthParamsDTO'
        refToken:
          $ref: '#/components/schemas/designer.WorkdayRefreshTokenParamsDTO'
        integrationSystemId:
          type: string
        additionalHeaderParams:
          type: array
          items:
            $ref: '#/components/schemas/designer.PairDTO'
    designer.WorkdayOAuthParamsDTO:
      type: object
      properties:
        apiClientId:
          type: string
        publicX509Cert:
          type: string
        privateX509Key:
          type: string
    designer.WorkdayRaasAuthParamsDTO:
      type: object
      properties:
        userId:
          type: string
        domainName:
          type: string
        implementationName:
          type: string
        password:
          type: string
        testReportUrl:
          type: string
    designer.WorkdayRefreshTokenParamsDTO:
      type: object
      properties:
        apiClientId:
          type: string
        clientSecret:
          type: string
        refreshToken:
          type: string
    designer.ZoomAuthParamsDTO:
      type: object
      properties:
        authCode:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
    designer.webhook.WebhookBasicAuthCredentialDTO:
      type: object
      properties:
        username:
          type: string
          description: The username for the webhook credential.
        password:
          type: string
          description: The password for the webhook credential.
      description: The basic authentication credentials for the webhook.
    designer.webhook.WebhookCredentialsDTO:
      type: object
      properties:
        basicAuth:
          allOf:
            - $ref: '#/components/schemas/designer.webhook.WebhookBasicAuthCredentialDTO'
          description: Authentication using a username and password.
        accessToken:
          type: string
          description: Authentication using an access token.
      description: The credentials to authenticate calls to the webhook endpoint. Must be one of `basicAuth` or `accessToken`. Not required if your endpoint doesn't have authentication.
    designer.webhook.WebhookDTO:
      type: object
      properties:
        webhookId:
          type: string
          description: The unique identifier of the webhook.
        details:
          allOf:
            - $ref: '#/components/schemas/designer.webhook.WebhookDetailsDTO'
          description: The webhook's details, such as its URL, active status, and event types to listen for.
        credentialReference:
          type: string
          description: The unique identifier of the configured webhook credentials.
      description: The webhook's details, such as its URL, active status, and event types to listen for.
    designer.webhook.WebhookDetailsDTO:
      type: object
      properties:
        targetUrl:
          type: string
          description: The target URL to call when an event occurs.
        isActive:
          type: boolean
          description: If `true`, the webhook is active. Must be `false` when creating webhooks. Default is `false`.
        events:
          type: array
          items:
            $ref: '#/components/schemas/designer.webhook.WebhookEventTypeDTO'
          description: |-
            The events that the webhook is listening for. Valid values:
             - `jobResultSuccess`: A job completed successfully.
             - `jobResultFailure`: A job failed to complete.
             - `jobReschedule`: A job was rescheduled.
             - `dvPublish`: A data version published to production.
        keyName:
          type: string
          description: The display name of the encryption key for the webhook. Encryption key must use `HmacSHA256` algorithm.
        displayName:
          type: string
          description: The display name of the webhook.
      description: Information about the webhook, such as its URL, active status, and event types to listen for.
    designer.webhook.WebhookEventTypeDTO:
      type: object
      properties:
        eventType:
          type: string
          description: |-
            The possible event types to listen for. Valid values:
             - `jobResultSuccess`: A job completed successfully.
             - `jobResultFailure`: A job failed to complete.
             - `jobReschedule`: A job was rescheduled.
             - `dvPublish`: A data version published to production.
      description: The possible event types for Visier webhooks.
    designer.webhook.WebhookMessageResponseDTO:
      type: object
      properties:
        statusCode:
          type: integer
          description: The standard HTTP response code to inform you of the success or failure of the webhook notification attempt.
          format: int32
        message:
          type: string
          description: Information about the notification attempt.
        messageId:
          type: string
          description: The unique identifier of the message.
        eventId:
          type: string
          description: The unique identifier of the event that triggered the webhook notification.
      description: The results of the webhook notification attempt.
    designer.webhook.WebhookRequestDTO:
      type: object
      properties:
        details:
          allOf:
            - $ref: '#/components/schemas/designer.webhook.WebhookDetailsDTO'
          description: The webhook's details, such as its URL, active status, and event types to listen for.
        credentials:
          allOf:
            - $ref: '#/components/schemas/designer.webhook.WebhookCredentialsDTO'
          description: The webhook's credentials, such as a username and password or access token.
      description: The details and credentials for a webhook. Not required if your endpoint doesn't have authentication.
    designer.webhook.WebhooksDTO:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/designer.webhook.WebhookDTO'
          description: A list of webhooks.
      description: The returned list of webhooks.
    dp.CancelJobBatchFromJobIdDTO:
      type: object
      properties:
        jobIds:
          type: array
          items:
            type: string
          description: A list of jobs to cancel. The maximum number of jobs that can be cancelled is 500.
    dp.JobCancellationResultDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The analytic tenant whose job the cancel operation was conducted for.
        jobId:
          type: string
          description: The job ID of the job that the cancel operation was conducted for.
        jobType:
          type: string
          description: The job type associated with the job ID.
        parentJobId:
          type: string
          description: If applicable, the job ID of the job that spawned the given job.
        cancelStatus:
          enum:
            - CANCEL_FAILED
            - CANCEL_SUCCEEDED
          type: string
          description: The status of the cancellation.
          format: enum
        jobStatus:
          type: string
          description: The job status after the cancel operation. If successful, the status is either Cancelled or Cancelling.
        message:
          type: string
          description: If applicable, the message explains what errors occurred while cancelling the jobs.
    dp.JobCancellationResultsDTO:
      type: object
      properties:
        jobCancellationResults:
          type: array
          items:
            $ref: '#/components/schemas/dp.JobCancellationResultDTO'
          description: A list of objects representing the job cancellation results.
    dp_automation.MetricValidationSummaryDTO:
      type: object
      properties:
        symbolName:
          type: string
          description: The symbol name of the metric. For example, "employeeCount".
        displayName:
          type: string
          description: An identifiable name that is displayed within Visier. For example, "Headcount".
        value:
          type: number
          description: The current value of the metric expressed as an integer.
          format: double
    dp_automation.TenantPreviewEntriesSummaryDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant. For example, "WFF_j1r~i1o".
        dataVersion:
          type: string
          description: The data version ID.
        dataVersionDate:
          type: string
          description: The date that the data version was created.
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/dp_automation.MetricValidationSummaryDTO'
          description: A list of metrics and their values.
    dp_automation.TenantPreviewEntriesSummaryListDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/dp_automation.TenantPreviewEntriesSummaryDTO'
          description: A list of objects representing all the analytic tenants.
        limit:
          type: integer
          description: The number of analytic tenants to retrieve. The maximum number to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
    planning.GetPlanListResponseDTO:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanInfoDTO'
          description: A list of plans accessible to the user.
        page:
          type: integer
          description: The current page number of results that the user is viewing.
          format: int32
      description: A collection of plans.
    planning.PlanDataLoadErrorDTO:
      type: object
      properties:
        row:
          type: integer
          description: The row in the file that caused the error.
          format: int32
        rci:
          type: string
          description: An error code that can be provided to Visier Support to help investigate your issue.
        errorMessage:
          type: string
          description: Information regarding the error and any actions that you could take to load the data correctly.
      description: An error encountered while loading plan data.
    planning.PlanInfoDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the plan.
        displayName:
          type: string
          description: The display name of the plan.
        modelId:
          type: string
          description: The unique identifier of the planning model that the plan is using.
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/planning.ScenarioInfoDTO'
          description: Information about the plan's scenarios.
        parentPlanUuid:
          type: string
          description: If the plan is a subplan, the response returns its parent plan's UUID. Not returned for main plans.
        currencyCode:
          type: string
          description: The 3-digit ISO 4217 currency code of the plan's data.
      description: Information about a plan and its scenarios.
    planning.PlanItemDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the plan item.
        displayName:
          type: string
          description: The display name of the plan item.
        dataType:
          enum:
            - unknown
            - number
            - currency
            - decimal
            - rate
          type: string
          description: |-
            The data type of the plan item. The data types are:
             - **rate**: Converts values into a percentage in the planning grid. The provided value is multiplied by 100 to get the display value. For example, a provided value of 0.5 is displayed as 50% in the grid.
             - **number**: Displays values as whole numbers. Decimal values are rounded to a whole number when displayed in the planning grid.
             - **currency**: Displays values as a currency. Values must not contain thousand separators, currency codes, or currency symbols.
             - **decimal**: Displays values with decimals.
          format: enum
      description: A plan item is a metric in your plan. The available plan items depend on the planning model.
    planning.PlanSchemaDTO:
      type: object
      properties:
        planItems:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanItemDTO'
          description: A collection of editable plan items in a plan.
        timePeriods:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanTimePeriodDTO'
          description: The editable time periods in a plan. These time periods are the columns in the planning grid.
        planSegmentLevels:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanSegmentLevelDTO'
          description: The dimensions that the plan is segmented by.
        planSegmentLevelMembers:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanSegmentLevelMemberListDTO'
          description: |-
            A collection of members grouped by their dimension and level.
             The combination of these member IDs points to a specific row in the plan.
      description: Information about a plan's schema.
    planning.PlanSegmentLevelDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the dimension appended with its level ID.
        displayName:
          type: string
          description: The display name of the dimension level.
        order:
          type: integer
          description: The number that describes the segment's position in the plan's overall structure.
          format: int32
        segmentId:
          type: string
          description: The symbol name of the dimension.
        segmentDisplayName:
          type: string
          description: The display name of the dimension.
      description: A dimension and dimension level that segments the plan.
    planning.PlanSegmentLevelMemberDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the dimension member.
        displayName:
          type: string
          description: The display name of the dimension member.
        isCustom:
          type: boolean
          description: If `true`, this is a custom member created for use in the plan and all its subplans.
        parentId:
          type: string
          description: The unique identifier of the dimension member's parent.
      description: A member in the dimension.
    planning.PlanSegmentLevelMemberListDTO:
      type: object
      properties:
        segmentLevelId:
          type: string
          description: The unique identifier of the dimension and dimension level.
        members:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanSegmentLevelMemberDTO'
          description: The dimension members.
        segmentId:
          type: string
          description: The unique identifier of the dimension.
      description: A collection of dimension members.
    planning.PlanTimePeriodDTO:
      type: object
      properties:
        date:
          type: string
          description: The date of the time period. The format is YYYY-MM-DD.
        displayName:
          type: string
          description: The display name of the time period; for example, March 2024.
      description: A time period in the plan.
    planning.PlanWithSchemaDTO:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/planning.PlanInfoDTO'
        schema:
          $ref: '#/components/schemas/planning.PlanSchemaDTO'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/planning.PlanDataLoadErrorDTO'
          description: The errors that occurred while loading the data.
      description: Details about the plan, including its schema.
    planning.ScenarioInfoDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the scenario.
        displayName:
          type: string
          description: The full display name of the scenario.
        versionedScenarioId:
          type: string
          description: If the scenario belongs to a managed plan, the response returns the scenario's user-readable symbol name.
      description: Information about a plan's scenario.
    servicing.objectconfiguration.CalculatedPropertyTypeDTO:
      type: object
      properties:
        dataType:
          type: string
          description: The data type of the property, such as Categorical, HourDuration, or Ratio.
        formula:
          type: string
          description: The formula used to calculate the property's value, written in Visier Formula Language.
    servicing.objectconfiguration.DependentDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the dependent object.
        displayName:
          type: string
          description: The display name of the dependent object.
        objectType:
          type: string
          description: The type of dependent object, such as a property or parameter.
      description: Details about a dependent object related to the property to delete.
    servicing.objectconfiguration.DimensionChangeDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the dimension; for example, `Career_Level` or `Employee.Vaccination_Status`
        displayName:
          type: string
          description: The user-friendly name for the dimension.
        shortDisplayName:
          type: string
          description: A shortened version of the display name. If the dimension is visible in the solution experience, this name is displayed in visualization titles.
        description:
          type: string
          description: A short description of the dimension. Descriptions provide in-context help for your users while working in Visier.
    servicing.objectconfiguration.DimensionChangeDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the tenant in which to update dimensions.
        projectId:
          type: string
          description: To make changes in a project, specify a project ID.
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.DimensionChangeDefinitionDTO'
          description: The list of dimensions to update.
    servicing.objectconfiguration.DimensionsChangeDefinitionsDTO:
      type: object
      properties:
        dimensionsByTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.DimensionChangeDefinitionsByTenantDTO'
          description: The dimension updates to make in each tenant.
    servicing.objectconfiguration.ObjectChangeFailureDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the object that was not successfully changed.
        displayName:
          type: string
          description: The display name of the object.
        message:
          type: string
          description: An error message describing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        tenantCode:
          type: string
          description: The tenant that the object was not successfully changed in.
        projectId:
          type: string
          description: The project that the object was not successfully changed in.
    servicing.objectconfiguration.ObjectChangeSuccessDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the object that was successfully changed.
        displayName:
          type: string
          description: The display name of the object.
        tenantCode:
          type: string
          description: The tenant that the object was changed in.
        projectId:
          type: string
          description: The project that the object was changed in.
    servicing.objectconfiguration.ObjectsBulkChangeResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.ObjectChangeSuccessDTO'
          description: The objects that were successfully changed.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.ObjectChangeFailureDTO'
          description: The objects that were not successfully changed.
    servicing.objectconfiguration.PropertiesChangeDefinitionsDTO:
      type: object
      properties:
        propertiesByTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.PropertyChangeDefinitionsByTenantDTO'
          description: The property updates to make in each tenant.
    servicing.objectconfiguration.PropertiesDeleteDefinitionsDTO:
      type: object
      properties:
        deleteDerivedProperties:
          type: boolean
          description: If `true`, deletes derived properties along with the properties to delete. Default is `false`.
        ignorePropertyReferences:
          type: boolean
          description: If `true`, ignores properties that reference the properties to delete. Default is `false`.
        propertiesByTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.PropertyDeleteDefinitionsByTenantDTO'
          description: The properties to delete for each tenant.
      description: Property deletion options.
    servicing.objectconfiguration.PropertyBulkDeleteResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.PropertyDeleteSuccessDTO'
          description: Properties that were successfully deleted.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.PropertyDeleteFailureDTO'
          description: Properties that were not successfully deleted.
      description: Results of a bulk delete operation.
    servicing.objectconfiguration.PropertyChangeDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the property; for example, Employee.Birth_Date
        displayName:
          type: string
          description: The user-friendly name for the property.
        shortDisplayName:
          type: string
          description: A shortened version of the display name. If the property is visible in the solution experience, this name is displayed in visualization titles.
        description:
          type: string
          description: A short description of the property. Descriptions provide in-context help for your users while working in Visier.
        explanation:
          type: string
          description: Explanation of the property. This field is used to provide additional information about the property.
        designerNotes:
          type: string
          description: Notes for the designer. This field is used to provide additional information about the property.
        type:
          allOf:
            - $ref: '#/components/schemas/servicing.objectconfiguration.PropertyTypeDTO'
          description: The type of the property.
        tags:
          allOf:
            - $ref: '#/components/schemas/servicing.objectconfiguration.TagsDTO'
          description: The tags associated with the property.
        includeWithVee:
          type: boolean
          description: If 'true', the property is included with Vee.
    servicing.objectconfiguration.PropertyChangeDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the tenant in which to update properties.
        projectId:
          type: string
          description: To make changes in a project, specify a project ID.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.PropertyChangeDefinitionDTO'
          description: The list of properties to update.
    servicing.objectconfiguration.PropertyDeleteDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant to delete properties from. Default is the current tenant.
        projectId:
          type: string
          description: The project in which to delete properties. If omitted and the ProjectID request header is not defined, the change is published to production immediately.
        propertyIds:
          type: array
          items:
            type: string
          description: The IDs of the properties to delete.
      description: The properties to delete for a specific tenant.
    servicing.objectconfiguration.PropertyDeleteFailureDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the property.
        displayName:
          type: string
          description: The display name of the property.
        message:
          type: string
          description: An error message describing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        tenantCode:
          type: string
          description: The tenant in which the property wasn't deleted.
        projectId:
          type: string
          description: The project in which the property wasn't deleted.
        derivedDependentsToDelete:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.DependentDTO'
          description: The derived dependents that would have been deleted if the deletion was successful.
        referenceDependentsToIgnore:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.DependentDTO'
          description: Dependents that reference this property and could be affected.
      description: Details about a failed property deletion.
    servicing.objectconfiguration.PropertyDeleteSuccessDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the property.
        displayName:
          type: string
          description: The display name of the property.
        tenantCode:
          type: string
          description: The tenant in which the property was deleted.
        projectId:
          type: string
          description: The project in which the property was deleted.
        derivedDependentsDeleted:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.DependentDTO'
          description: The derived dependents that were deleted along with the property.
        referenceDependentsIgnored:
          type: array
          items:
            $ref: '#/components/schemas/servicing.objectconfiguration.DependentDTO'
          description: Dependents that reference the property and were ignored during deletion.
      description: Details about a successful property deletion.
    servicing.objectconfiguration.PropertyTypeDTO:
      type: object
      properties:
        simple:
          allOf:
            - $ref: '#/components/schemas/servicing.objectconfiguration.SimplePropertyTypeDTO'
          description: The simple property type, which provides a single value directly from the data.
        calculated:
          allOf:
            - $ref: '#/components/schemas/servicing.objectconfiguration.CalculatedPropertyTypeDTO'
          description: The calculated property type, which derives its value using a formula.
    servicing.objectconfiguration.SimplePropertyTypeDTO:
      type: object
      properties:
        dataType:
          type: string
          description: The data type of the property, such as Categorical, HourDuration, or Ratio.
    servicing.objectconfiguration.TagsDTO:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: The tag ids.
      description: Wrapper to distinguish between an empty list and a null/unset list.
    servicing.AccessibleTenantProfileAssignmentRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to assign this profile.
        targetTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TargetTenantCodeDTO'
          description: A list of objects representing the  analytic tenants for profiles assigned to the users.
        validityStartTime:
          type: string
          description: An inclusive date-time when this profile is active.
        validityEndTime:
          type: string
          description: An exclusive date-time when this profile is no longer active.
    servicing.AccessibleTenantProfileAssignmentResponseDTO:
      type: object
      properties:
        errors:
          type: boolean
          description: If true, an error is generated by the request.
        badTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TenantCodeErrorDTO'
          description: A list of objects representing any tenants that returned errors.
        badUserIds:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserIdErrorDTO'
          description: A list of objects representing the user IDs that may not be valid.
        failedAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.FailedAccessibleTenantProfileAssignmentDTO'
          description: A list of objects representing any errors during the assignment operation.
        successfulAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulAccessibleTenantProfileAssignmentDTO'
          description: A list of user IDs that were successfully assigned the profiles.
    servicing.AccessibleTenantProfileRevokeRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to remove this profile from.
        targetTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TargetTenantCodeDTO'
          description: A list of objects representing the  analytic tenants for removing profiles from each target user ID.
    servicing.AccessibleTenantProfileRevokeResponseDTO:
      type: object
      properties:
        badTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ReducedTenantCodeErrorDTO'
          description: A list of objects representing any tenants that returned errors.
        badUserIds:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ReducedUserIdErrorDTO'
          description: A list of objects representing the user IDs that may not be valid.
        unaffectedUsers:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of objects representing the valid user IDs that were not affected.
        succeeded:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of objects representing the valid user IDs that succeeded.
    servicing.AdditionalCapabilitiesDTO:
      type: object
      properties:
        additionalCapabilities:
          type: array
          items:
            type: string
          description: The additional capabilities assigned to this profile.
    servicing.AdminCapabilityConfigDTO:
      type: object
      properties:
        allCapabilitiesAccess:
          type: boolean
          description: If `true`, the permission has all possible capabilities.
        capabilities:
          type: array
          items:
            type: string
          description: A list of the capabilities assigned in the permission. Not required if `allCapabilitiesAccess` is true.
    servicing.AllPermissionsAssignedForLocalTenantDTO:
      type: object
      properties:
        assignedPermissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionAssignedForLocalTenantDTO'
          description: A list of objects representing the user's permissions.
    servicing.AllProfileAssignedForAccessibleTenantDTO:
      type: object
      properties:
        assignedProfilesForAccessibleTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProfileAssignedForAccessibleTenantDTO'
          description: A list of objects representing the user profiles assigned to the user and their validity range.
    servicing.AllProfileAssignedForLocalTenantDTO:
      type: object
      properties:
        assignedProfiles:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProfileAssignedForLocalTenantDTO'
          description: A list of objects representing the user profiles assigned to the user and their validity range.
    servicing.AllUserGroupsAssignedForLocalTenantDTO:
      type: object
      properties:
        assignedUserGroups:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserGroupAssignedForLocalTenantDTO'
          description: A list of objects representing the available user groups.
    servicing.AllUsersGetAPIResponseDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserGetAPIResponseDTO'
          description: A list of available users.
        limit:
          type: integer
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
    servicing.AnalyticObjectDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object.
        displayName:
          type: string
          description: An identifiable name to display in Visier, such as "Employee".
        objectType:
          enum:
            - Event
            - Subject
            - BusinessOutcomeOverlay
            - PlanOrBudgetOverlay
            - ExternalBenchmark
            - VisierBenchmark
            - UsageOverlay
            - OtherOverlay
            - InternalComparison
            - PlanAnalyticObject
          type: string
          description: The analytic object type.
          format: enum
        relatedObjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.RelatedAnalyticObjectDTO'
          description: The analytic objects related to the data security object.
        securableProperties:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SecurablePropertyDTO'
          description: All available properties from the data security object and its related analytic objects that you can configure data access for.
        securableDimensions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SecurableDimensionDTO'
          description: A list of dimensions that are available to define population access filters in the permission.
    servicing.AssignRevokePermissionByPermissionDTO:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/servicing.PermissionAssignedForLocalTenantDTO'
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionByUserDTO'
          description: A list of objects representing the users that was permission was assigned to or removed from.
      description: The results of the permission assignment or removal.
    servicing.AssignRevokePermissionByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionByPermissionDTO'
          description: A list of objects representing the assigned or removed permissions.
        status:
          enum:
            - Unknown
            - Succeed
            - Failed
          type: string
          description: The state of the permission assignment. Valid values are Succeed or Failed.
          format: enum
        message:
          type: string
          description: A detailed description of the request outcome, if available.
        projectId:
          type: string
          description: The ID of the project that the change was made in, if applicable.
      description: The permissions organized by tenant.
    servicing.AssignRevokePermissionByUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        message:
          type: string
          description: A meaningful message about the user permission.
      description: The results of the permission assignment or removal by user.
    servicing.AssignRevokePermissionRequestDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with a permission.
        userIds:
          type: array
          items:
            type: string
          description: A list of strings representing unique user IDs.
      description: |-
        Set permission detail
         permissionId with assign to userIds
    servicing.AssignRevokePermissionsRequestDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionRequestDTO'
          description: A list of objects representing the permissions to assign to or remove from users.
        targetProjectForTenantsList:
          allOf:
            - $ref: '#/components/schemas/admin.TargetProjectForTenantsListDTO'
          description: |-
            Administrating tenants can specify the tenants and projects in which to assign permissions to users or remove permissions from users. Specify one `projectId` per `tenantCode`.
             If omitted, the request is immediately published to production or applied to the `ProjectID` in the request header, if available, for the administrating tenant or TargetTenantID, if available.
      description: |-
        Set permissions request
         List of permissionId with assign to user Ids
    servicing.AssignRevokePermissionsResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionByTenantDTO'
          description: A list of objects representing the users that were assigned permissions, organized by the tenants the users belong to.
      description: The results of the permission assignment or removal.
    servicing.BulkDataAccessSetRequestDTO:
      type: object
      properties:
        shareablePropertyAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetDTO'
          description: The data access sets to be created or updated.
    servicing.BulkDataAccessSetResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetSuccessDTO'
          description: The successfully created data access sets.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetFailureDTO'
          description: The data access sets that failed to be created and any relevant error information.
    servicing.CapabilitiesDTO:
      type: object
      properties:
        capability:
          type: string
          description: The name of the capability.
        accessLevel:
          type: string
          description: The access level of the profile for the given capability.
        viewLevel:
          type: string
          description: The view level of the profile for the given capability.
    servicing.CapabilityDTO:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the capability.
        displayName:
          type: string
          description: An identifiable capability name to display in Visier, such as "Schedule Analysis".
        description:
          type: string
          description: A description of the capability.
    servicing.CloneFilesIntoSourceParametersDTO:
      type: object
      properties:
        originSource:
          type: string
          description: The unique identifier of the source to clone files from.
        targetSource:
          type: string
          description: The unique identifier of the source to clone files into.
        dateRange:
          allOf:
            - $ref: '#/components/schemas/servicing.DateRangeDTO'
          description: The date range of the files to clone. If undefined, clones all files.
      description: The parameters for the `cloneFilesIntoSource` option, such as the source to clone files from, the source to clone files into, and the date range of the files to clone.
    servicing.CommitAndPublishOperationResponseDTO:
      type: object
      properties:
        publishedVersion:
          allOf:
            - $ref: '#/components/schemas/servicing.ProjectDTO'
          description: The project version that was published to production.
    servicing.CommitDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the committed change.
        name:
          type: string
          description: An identifiable name of the committed change to display in Visier.
        description:
          type: string
          description: A description of the committed change.
    servicing.ContentPackageDTO:
      type: object
      properties:
        contentPackageId:
          type: string
          description: The unique ID of the content package.
        displayName:
          type: string
          description: An identifiable content package name to display in Visier, such as "Talent Acquisition Core Content".
        description:
          type: string
          description: A description of the content package.
    servicing.DataAccessSetDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the data access set.
        displayName:
          type: string
          description: An identifiable data access set name to display in Visier, such as "Aggregate(Employee)".
        description:
          type: string
          description: A description of the data access set.
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object that the data access set is for.
        propertyAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PropertyAccessConfigDTO'
          description: The data access assigned to properties in the data access set.
    servicing.DataAccessSetErrorDTO:
      type: object
      properties:
        message:
          type: string
          description: Error message
        rci:
          type: string
          description: A root cause identifier that allows Visier to determine the source of the problem.
    servicing.DataAccessSetFailureDTO:
      type: object
      properties:
        dataAccessSetId:
          type: string
          description: The unique identifier associated with the data access set.
        displayName:
          type: string
          description: An identifiable data access set name to display in Visier, such as "Detailed(Employee)".
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.DataAccessSetErrorDTO'
          description: The error associated with the failure.
    servicing.DataAccessSetSuccessDTO:
      type: object
      properties:
        dataAccessSetId:
          type: string
          description: The unique identifier associated with the created data access set.
        displayName:
          type: string
          description: An identifiable data access set name to display in Visier, such as "Detailed(Employee)".
    servicing.DataCategoriesResponseDTO:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataCategoryResponseDTO'
      description: A list of data categories.
    servicing.DataCategoryResponseDTO:
      type: object
      properties:
        name:
          type: string
          description: The display name of the data category.
        id:
          type: string
          description: The UUID of the data category.
        objectName:
          type: string
          description: The object name of the data category.
      description: The data category's details.
    servicing.DataSecurityProfileDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object assigned data security in this permission.
        propertySetConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.PropertySetConfigDTO'
          description: A list of objects representing the data access for an analytic object’s properties.
        allDataPointAccess:
          type: boolean
          description: If `true`, the permission grants access to the entire population. If `false`, define `memberFilterConfigs` to set custom population access.
        memberFilterConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.MemberFilterConfigDTO'
          description: Custom filters that define population access for an item in the permission.
        inheritedAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.InheritedAccessConfigDTO'
          description: |-
            The events and related objects inherited from the analytic object.
             By default, all events and related objects associated with the analytic object will be inherited from the analytic object in a permission.
             For example, if you assign access to Employee, then access to the Employee Exit event is inherited in the permission.
             To remove access to an event or related object, add the object to `inheritedAccessConfigs` with `removeAccess`: true.
             To add custom filters to an event or related object, add the object to `inheritedAccessConfigs` and define `memberFilterConfigs`.
        inheritedReferenceMemberFilterConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.InheritedReferenceMemberFilterConfigDTO'
          description: |-
            Configures the analytic object to inherit population access filters from. The target analytic object must be assigned population access in the permission and have a binding (strong) reference from the source analytic object.
             * For example, assume `Applicant` -> `Requisition` is configured to be a binding (strong) reference.
             For `Applicant` (source analytic object) to inherit population access filters from `Requisition` (target analytic object), in the Applicant `dataSecurityProfile`, set `inheritedReferenceMemberFilterConfig` to `Requisition`. In this example, Applicant will inherit filters from Requisition because Requsition is assigned data security in this permission and there is a binding (strong) reference from Applicant to Requisition.
        analyticObjectStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The analytic object's validity status. Valid values: Valid, NoData, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.DateRangeDTO:
      type: object
      properties:
        start:
          type: string
          description: The start date in ISO 8601 format.
        end:
          type: string
          description: The end date in ISO 8601 format. If undefined, the end date is the current date.
      description: The range of dates for the request.
    servicing.DeletePermissionsRequestDTO:
      type: object
      properties:
        permissionIds:
          type: array
          items:
            type: string
          description: The identifiers of the permissions to delete.
    servicing.DimensionFilterDTO:
      type: object
      properties:
        staticDimensionFilter:
          $ref: '#/components/schemas/servicing.StaticDimensionFilterDTO'
        dynamicDimensionFilter:
          $ref: '#/components/schemas/servicing.DynamicDimensionFilterDTO'
    servicing.DirectDataJobConfigDTO:
      type: object
      properties:
        supplementalMode:
          enum:
            - UNCHANGED
            - IS_PRIMARY
            - IS_SUPPLEMENTAL
          type: string
          description: "The configuration for the processing job as a primary job (default) or a supplemental job. If a primary job is already defined, the direct data \n intake job must be supplemental. The valid values are `IS_PRIMARY`, `IS_SUPPLEMENTAL`, and `UNCHANGED`."
          format: enum
        extendObjects:
          type: array
          items:
            type: string
          description: |-
            The target analytic objects to load using extension tables.
             You can extend objects if the job type is supplemental and the target objects already contain data from a previous data version.
             This allows you to load data for objects that already contain data in Visier.
      description: Whether the direct data intake job is a primary job or a supplemental job.
    servicing.DirectDataJobStatusResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant for the data load.
        transactionId:
          type: string
          description: The unique identifier of the committed transaction.
        jobId:
          type: string
          description: The unique identifier of the processing job.
        status:
          type: string
          description: The status of the processing job.
        message:
          type: string
          description: If the processing job fails, this field contains details specific to the failure.
      description: The job status information for a committed transaction.
    servicing.DirectDataListTransactionsResponseDTO:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DirectDataTransactionDTO'
          description: The list of open transactions.
      description: A list of all currently open transactions.
    servicing.DirectDataLoadConfigDTO:
      type: object
      properties:
        job:
          allOf:
            - $ref: '#/components/schemas/servicing.DirectDataJobConfigDTO'
          description: The direct data intake job configuration.
      description: The configuration for the direct data intake, such as the  direct data intake job type.
    servicing.DirectDataSchemaDTO:
      type: object
      properties:
        schema:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DirectDataSchemaFieldDTO'
          description: The schema definition for loading a specific object
      description: Public API Direct Intake schema response object
    servicing.DirectDataSchemaFieldDTO:
      type: object
      properties:
        name:
          type: string
          description: The field's column name. Column names are case sensitive.
        dataType:
          type: string
          description: The column's data type.
        formats:
          type: array
          items:
            type: string
          description: The column's accepted formats, such as date formats like "yyyy-MM-dd".
        isMandatory:
          type: boolean
          description: If true, the field must contain a value to successfully load data into the object.
        emptyValuesAllowed:
          type: boolean
          description: If true, the value may be empty.
      description: The definition of each field in an object's schema.
    servicing.DirectDataTransactionDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant for the data load.
        transactionId:
          type: string
          description: The transaction's unique identifier.
        created:
          type: string
          description: The transaction's creation date and time. The format is YYYY-MM-DDTHH:mm:ss.SSSZ (ISO 8601).
        updated:
          type: string
          description: The transaction's last update date and time. The format is YYYY-MM-DDTHH:mm:ss.SSSZ (ISO 8601).
        status:
          type: string
          description: The status of the transaction, such as open, progressing, or committed.
      description: An open transaction.
    servicing.DirectDataTransactionStartResponseDTO:
      type: object
      properties:
        transactionId:
          type: string
          description: The transaction's unique identifier.
      description: The response after successfully creating a transaction.
    servicing.DirectDataUploadFileResponseDTO:
      type: object
      properties:
        transactionId:
          type: string
          description: The unique transaction identifier.
        status:
          type: string
          description: The status of the request.
        message:
          type: string
          description: Upload response message from the provisioning service
      description: |-
        The transaction results.

         If uploading a file, a success response means the upload was successful and doesn't always mean the file
         was successfully loaded into its target object.
    servicing.DocumentSearchLinkDTO:
      type: object
      properties:
        href:
          type: string
          description: The URL pointing to the specific document.
        verb:
          type: string
          description: The verb to use when formulating the web request. This is commonly `GET`.
      description: Defines the attributes of a web request to reference documents in the search results.
    servicing.DynamicDimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The dimension ID associated with the filter.
        subjectReferencePath:
          type: array
          items:
            type: string
          description: The subject reference path.
        dynamicPropertyMappings:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DynamicPropertyMappingDTO'
          description: The properties assigned population access in the dynamic filter.
        dimensionStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The dimension's validity status. Valid values: Valid, NoData, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.DynamicPropertyMappingDTO:
      type: object
      properties:
        hierarchyPropertyId:
          type: string
          description: The unique ID of the property.
        userProperty:
          allOf:
            - $ref: '#/components/schemas/servicing.UserPropertyDTO'
          description: The user property that you want to link the name property or organization head to.
        hierarchyPropertyStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The property's validity status. Valid values: `Valid`, `NotFound`.
             * **Valid**: The object exists and has loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.ErrorDTO:
      type: object
      properties:
        rootCauseId:
          type: string
          description: The root cause identifier that allows Visier to determine the source of the problem.
        errorCode:
          type: string
          description: A brief identifier of the type of error.
        errorMessage:
          type: string
          description: A description of the error that occurred.
    servicing.ExportProductionVersionsAPIOperationParametersDTO:
      type: object
      properties:
        startVersion:
          type: string
          description: The unique identifier of the version to start exporting versions from. The range is inclusive.
        endVersion:
          type: string
          description: The unique identifier of the version to stop exporting versions at. The range is inclusive.
        excludedVersions:
          type: array
          items:
            type: string
          description: A list of versions between `startVersion` and `endVersion` to exclude.
    servicing.ExportProductionVersionsAPIOperationResponseDTO:
      type: object
      properties: {}
    servicing.ExportSourcesAPIOperationResponseDTO:
      type: object
      properties: {}
    servicing.FailedAccessibleTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The impacted user ID.
        tenantCode:
          type: string
          description: The tenant code.
        forAllChildren:
          type: boolean
          description: If true, the target assignment is for all analytic tenants.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.FailedLocalTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The impacted user ID.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.FailedLocalTenantProfileRevokeDTO:
      type: object
      properties:
        userId:
          type: string
          description: The impacted user ID.
        message:
          type: string
          description: The details about the error.
    servicing.GetCapabilitiesAPIResponseDTO:
      type: object
      properties:
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilityDTO'
          description: A list of objects representing the available capabilities.
    servicing.GetContentPackagesAPIResponseDTO:
      type: object
      properties:
        contentPackages:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ContentPackageDTO'
          description: A list of objects representing the available content packages.
    servicing.GetDataAccessSetsAPIResponseDTO:
      type: object
      properties:
        dataAccessSets:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetDTO'
          description: A list of objects representing the shareable data access sets.
    servicing.GetDataSecurityObjectsAPIResponseDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AnalyticObjectDTO'
          description: A list of analytic objects and their related objects that are available to define data access to.
    servicing.GetPermissionsAPIResponseDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionDTO'
          description: A list of objects representing the available permissions.
      description: List of available permissions
    servicing.GetProductionVersionsAPIResponseDTO:
      type: object
      properties:
        publishedVersions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of projects that were published to production.
    servicing.GetProjectsAPIResponseDTO:
      type: object
      properties:
        openProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible open projects for the user.
        approvalProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible approval projects for the user.
        rejectedProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible rejected projects for the user.
        archivedProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible archived projects for the user.
    servicing.HierarchyPropertyDTO:
      type: object
      properties:
        hierarchyPropertyId:
          type: string
          description: The unique ID of the property.
        displayName:
          type: string
          description: An identifiable property name to display in Visier, such as "Name Property".
    servicing.InheritedAccessConfigDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The analytic object ID associated with the inherited access configuration.
        removeAccess:
          type: boolean
          description: The flag for removing access to the inherited analytic object.
        memberFilterConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.MemberFilterConfigDTO'
          description: Custom filters that define population access for an inherited analytic object in the permission.
    servicing.InheritedReferenceMemberFilterConfigDTO:
      type: object
      properties:
        targetAnalyticObjectId:
          type: string
          description: |-
            The unique ID of the analytic object that the source
            analytic object should inherit filters from. The target analytic object must have a binding (strong) reference from the source analytic object.
        analyticObjectReference:
          type: string
          description: |-
            The optional object name of a binding (strong) reference to the target analytic object. If not specified, uses the first binding reference from the source
            to the target analytic object.
    servicing.JobIdResponse:
      type: object
      properties:
        jobId:
          type: string
      description: The unique identifier of the returned job.
    servicing.LastLoginDTO:
      type: object
      properties:
        timestamp:
          type: string
          description: The time that the user last logged into Visier.
    servicing.LocalTenantProfileAssignmentRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to assign this profile.
        validityStartTime:
          type: string
          description: An inclusive date-time when this profile is active.
        validityEndTime:
          type: string
          description: An exclusive date-time when this profile is no longer active.
    servicing.LocalTenantProfileAssignmentResponseDTO:
      type: object
      properties:
        errors:
          type: boolean
          description: If true, an error was generated by the request.
        badUserIds:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserIdErrorDTO'
          description: A list of objects representing the user IDs that may not be valid.
        failedAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.FailedLocalTenantProfileAssignmentDTO'
          description: A list of objects representing any errors that occurred during the assignment operation.
        successfulAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of the user IDs that were successfully assigned the profile.
    servicing.LocalTenantProfileRevokeRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to remove this profile from.
    servicing.LocalTenantProfileRevokeResponseDTO:
      type: object
      properties:
        failed:
          type: array
          items:
            $ref: '#/components/schemas/servicing.FailedLocalTenantProfileRevokeDTO'
          description: A list of objects representing any errors that occurred during the assignment operation.
        succeeded:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of the user IDs that successfully had a profile removed.
    servicing.MemberFilterConfigDTO:
      type: object
      properties:
        dimensionFilters:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DimensionFilterDTO'
          description: "A list of objects representing the custom filters that define population access for the item. \n A custom filter can be a \"member filter\" (`staticDimensionFilter`) or a \"dynamic filter\" (`dynamicDimensionFilter`)."
    servicing.MemberSelectionDTO:
      type: object
      properties:
        namePath:
          type: array
          items:
            type: string
          description: The member name path.
        excluded:
          type: boolean
          description: If `true`, population access is granted for all members except this member.
        dimensionMemberStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The dimension member's validity status. Valid values: Valid, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.PermissionAssignedByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionAssignedUserDTO'
          description: A list of objects representing the users that the permission is assigned to.
      description: The users assigned a specific permission, grouped by tenant.
    servicing.PermissionAssignedForLocalTenantDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
        description:
          type: string
          description: A user-defined description of the permission.
    servicing.PermissionAssignedUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        permissionFrom:
          type: string
          description: |-
            The method through which the user was assigned the permission. The permission may be assigned through
             the following options:
              - User: The permission was directly assigned to the user.
              - UserGroup: The permission was assigned because the user belongs to a user group that is assigned the permission.
              - UserAndUserGroup: The permission was directly assigned to the user and assigned because the user belongs to
                a user group that is assigned the permission.
      description: The user and the method through which the user was assigned the permission.
    servicing.PermissionAssignedUsersDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionAssignedByTenantDTO'
          description: A list of objects representing the users that are assigned the specific permission, organized by the tenants the users belong to.
        limit:
          type: integer
          description: The number of results to return. The maximum number of tenants to retrieve is 100.
          format: uint32
        start:
          type: integer
          description: The index of the tenant to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
      description: Users that are assigned a specific permission.
    servicing.PermissionBulkOperationResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionSuccessDTO'
          description: The successfully processed permissions.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionFailureDTO'
          description: The permissions that did not process and any relevant error information.
    servicing.PermissionDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
        description:
          type: string
          description: A user-defined description of the permission.
        dataSecurityProfiles:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataSecurityProfileDTO'
          description: A list of objects representing the data security for each item in a permission.
        adminCapabilityConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.AdminCapabilityConfigDTO'
          description: The capabilities assigned in the permission.
        roleModulesConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.RoleModulesConfigDTO'
          description: A list of content packages assigned to the permission.
    servicing.PermissionErrorDTO:
      type: object
      properties:
        message:
          type: string
          description: Error message
        rci:
          type: string
          description: A root cause identifier that allows Visier to determine the source of the problem.
    servicing.PermissionFailureDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.PermissionErrorDTO'
          description: The error associated with the failure.
    servicing.PermissionSuccessDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
    servicing.ProductionVersionAPIOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknownProductionVersionAPIOperation
            - rollBackTo
          type: string
          description: |-
            The operation to perform. Valid values:
             * `rollBackTo`: Create a project that rolls back the production version to the specified version. The project contains uncommitted changes that reverse the published versions after the target production version.
          format: enum
    servicing.ProductionVersionAPIOperationResponseDTO:
      type: object
      properties:
        rollBackTo:
          allOf:
            - $ref: '#/components/schemas/servicing.ProjectDTO'
          description: The project created by the `rollBackTo` operation.
    servicing.ProductionVersionsAPIOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknownProductionVersionsAPIOperation
            - export
          type: string
          description: |-
            The operation to perform. Valid values:
             * `export`: Export the project changes of the requested production versions and their related files, such as any Guidebook images. If successful, a ZIP file is returned containing any relevant image files and a JSON file with the production project changes.
          format: enum
        exportParameters:
          allOf:
            - $ref: '#/components/schemas/servicing.ExportProductionVersionsAPIOperationParametersDTO'
          description: The parameters for the `export` option, such as the production version to start exporting versions from. Required for `export` operations.
    servicing.ProductionVersionsAPIOperationResponseDTO:
      type: object
      properties:
        export:
          allOf:
            - $ref: '#/components/schemas/servicing.ExportProductionVersionsAPIOperationResponseDTO'
          description: The result of the `export` operation.
    servicing.ProfileAssignedForAccessibleTenantDTO:
      type: object
      properties:
        profileId:
          type: string
          description: The unique identifier associated with the profile.
        displayName:
          type: string
          description: An identifiable profile name to display in Visier such as "Partner Service Manager".
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant on which this profile is assigned.
        forAllChildren:
          type: boolean
          description: If true, the profile is assigned for all the analytic tenants of the administrating tenant.
        validityStartTime:
          type: string
          description: |-
            An inclusive date-time when this profile is active.

             Note: Long.Min_Value means that startTime is undefined.
        validityEndTime:
          type: string
          description: |-
            An exclusive date-time when this profile is no longer active.

             Note: Long.Max_Value means that endTime is undefined and is equivalent to permanent access.
    servicing.ProfileAssignedForLocalTenantDTO:
      type: object
      properties:
        profileId:
          type: string
          description: The unique identifier associated with the profile.
        displayName:
          type: string
          description: An identifiable profile name to display in Visier, such as "Partner Service Manager".
        validityStartTime:
          type: string
          description: An inclusive date-time when this profile is active.
        validityEndTime:
          type: string
          description: An exclusive date-time when this profile is no longer active.
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilitiesDTO'
          description: A list of objects representing the access that this profile has for the capabilities of this profile.
        additionalCapabilities:
          allOf:
            - $ref: '#/components/schemas/servicing.AdditionalCapabilitiesDTO'
          description: A list of the additional capabilities that are assigned to this profile.
    servicing.ProfileGetAPIResponseDTO:
      type: object
      properties:
        profileId:
          type: string
          description: The unique identifier associated with the profile.
        displayName:
          type: string
          description: An identifiable profile name to display in Visier. For example, "Partner Service Manager".
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilitiesDTO'
          description: A list of objects representing the access that this profile has for the capabilities of this profile.
        additionalCapabilities:
          type: array
          items:
            type: string
          description: A list of the additional capabilities that are assigned to this profile.
    servicing.ProfilesGetAPIResponseDTO:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProfileGetAPIResponseDTO'
          description: A list of objects representing the available profiles.
    servicing.ProjectCommitsAPIResponseDTO:
      type: object
      properties:
        commits:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CommitDTO'
          description: A list of committed changes in the project.
    servicing.ProjectDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the project. Omit when creating a new project.
        name:
          type: string
          description: An identifiable project name to display in Visier.
        description:
          type: string
          description: A description of the project.
        releaseVersion:
          type: string
          description: The release version of the project.
        ticketNumber:
          type: string
          description: The change management ticket number of the project.
        versionNumber:
          type: integer
          description: The version number of the project.
          format: int32
        capabilities:
          type: array
          items:
            enum:
              - canRead
              - canWrite
              - canShare
              - owner
            type: string
            format: enum
          description: |-
            The current user's capabilities for the project. Users with `canWrite`, `canShare`, or `owner` capabilities can add and commit changes to the project.
             **canRead**: The project has been shared to the user with `View` access.
             **canWrite**: The project has been shared to the user with `Edit` access.
             **canShare**: The project has been shared to the user with `Share` access.
             **owner**: The user is the owner of the project.
             Omit when creating a new project.
    servicing.ProjectOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknown
            - commitAndPublish
          type: string
          description: |-
            The operation to perform on a draft project. Valid values:
             * `commitAndPublish`: Commits the requesting user's changes and publishes the draft project to production.
          format: enum
    servicing.ProjectOperationResponseDTO:
      type: object
      properties:
        commitAndPublish:
          allOf:
            - $ref: '#/components/schemas/servicing.CommitAndPublishOperationResponseDTO'
          description: The result of the `commitAndPublish` operation.
    servicing.PropertyAccessConfigDTO:
      type: object
      properties:
        propertyId:
          type: string
          description: The property ID associated with the property access configuration.
        analyticObjectId:
          type: string
          description: The analytic object ID of the property.
        analyticObjectReferencePaths:
          type: array
          items:
            type: string
          description: The path to the analytic object reference. Empty if the configuration is not a reference.
        accessLevel:
          enum:
            - None
            - Aggregate
            - Detailed
          type: string
          description: |-
            The access level of the property. Valid values are: `Aggregate`, `Detailed`.
             * **Aggregate**: The property can only be accessed as part of an aggregate.
             * **Detailed**: The property can be accessed at a detailed level.
          format: enum
        propertyStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The property's validity status. Valid values: `Valid`, `NoData`, `NotFound`.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.PropertySetConfigDTO:
      type: object
      properties:
        propertyAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PropertyAccessConfigDTO'
          description: The data access for a property.
        shareableDataAccessSet:
          allOf:
            - $ref: '#/components/schemas/servicing.ShareableDataAccessSet'
          description: A shareable data access set. Shareable data access sets may be linked in multiple permissions.
    servicing.QuestionCategoriesAPIResponseDTO:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/servicing.QuestionCategoryAPIResponseDTO'
          description: A list of available categories for Vee sample questions.
      description: The Vee question categories.
    servicing.QuestionCategoryAPIResponseDTO:
      type: object
      properties:
        categoryId:
          type: string
          description: The unique identifier of the question category.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "About individuals".
      description: Information about the Vee question category.
    servicing.ReducedErrorDTO:
      type: object
      properties:
        errorMessage:
          type: string
          description: A meaningful message for the end user.
    servicing.ReducedTenantCodeErrorDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The bad tenant code.
        forAllChildren:
          type: boolean
          description: If true, the assignment is for all the analytic tenants of the specified tenant.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ReducedErrorDTO'
          description: The details about the error.
    servicing.ReducedUserIdErrorDTO:
      type: object
      properties:
        userId:
          type: string
          description: The bad user ID.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ReducedErrorDTO'
          description: The details about the error.
    servicing.RelatedAnalyticObjectDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The analytic object ID.
        displayName:
          type: string
          description: An identifiable analytic object name to display in Visier, such as "Recognition".
    servicing.RoleModulesConfigDTO:
      type: object
      properties:
        contentPackageIds:
          type: array
          items:
            type: string
          description: The unique IDs of the content packages assigned to the permission.
    servicing.SampleQuestionAPIResponseDTO:
      type: object
      properties:
        question:
          type: string
          description: A question in plain language.
        questionId:
          type: string
          description: The unique identifier of the sample question.
        visibleInVee:
          type: boolean
          description: If `true`, the sample question is visible in Vee.
        categoryId:
          type: string
          description: The unique identifier of the question category.
        userGroupAssignment:
          allOf:
            - $ref: '#/components/schemas/servicing.UserGroupAssignmentDTO'
          description: The user group IDs assigned to the sample question.
      description: Information about the sample question.
    servicing.SampleQuestionsAPIResponseDTO:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SampleQuestionAPIResponseDTO'
          description: A list of sample questions to help your users start using Vee.
      description: The list of Vee sample questions.
    servicing.SecurableDimensionDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The dimension ID.
        displayName:
          type: string
          description: An identifiable dimension name to display in Visier, such as "Contract Type".
        analyticObjectIds:
          type: array
          items:
            type: string
          description: A list of analytic object IDs.
        hierarchyProperties:
          type: array
          items:
            $ref: '#/components/schemas/servicing.HierarchyPropertyDTO'
          description: The list of hierarchies you can map to a user in a permission's dynamic filter.
    servicing.SecurablePropertyDTO:
      type: object
      properties:
        propertyId:
          type: string
          description: The property ID.
        displayName:
          type: string
          description: An identifiable property name to display in Visier, such as "Job Pay Level".
        analyticObjectId:
          type: string
          description: The property's analytic object ID.
        isPrimaryKey:
          type: boolean
          description: If true, this property is the analytic object's primary key.
        referenceSymbolName:
          type: string
          description: The reference symbol name.
    servicing.ShareableDataAccessSet:
      type: object
      properties:
        dataAccessSetId:
          type: string
          description: The unique identifier of the shareable data access set.
    servicing.SimpleDocumentHeaderSearchResponseDTO:
      type: object
      properties:
        documentHeaders:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SimpleDocumentHeaderSearchResultDTO'
          description: The ordered collection of document header search results. The results are sorted according to their relevance in a descending order.
      description: The response body structure for Simple document header search operations.
    servicing.SimpleDocumentHeaderSearchResultDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the element in the search result.
        description:
          type: string
          description: The `Web Template Framework` representation of the search result element. This commonly displayed alongside the result by search portals.
        relevance:
          type: number
          description: The relevance of the search result and a number between `0` and `100`.
          format: double
        viewLink:
          allOf:
            - $ref: '#/components/schemas/servicing.DocumentSearchLinkDTO'
          description: Use the `viewLink` to build a web request to view this document.
      description: Structure of a single document header search using the Simple search operation.
    servicing.SourcesAPIOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknownSourcesAPIOperation
            - exportSources
            - cloneFilesIntoSource
          type: string
          description: |-
            The operation to perform. Valid values:
             * `exportSources`: Export all sources from the tenant. If successful, returns a ZIP file containing a compressed JSON file with the sources.
             * `cloneFilesIntoSource`: Clone a source's files into a different source. If successful, returns a receiving job ID. Use the job ID to monitor the cloning results.
          format: enum
        cloneFilesIntoSourceParameters:
          allOf:
            - $ref: '#/components/schemas/servicing.CloneFilesIntoSourceParametersDTO'
          description: The parameters for the `cloneFilesIntoSource` option, such as the source to clone files from, the source to clone files into, and the date range of the files to clone.
    servicing.StaticDimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The dimension ID associated with the filter.
        subjectReferencePath:
          type: array
          items:
            type: string
          description: The subject reference path.
        memberSelections:
          type: array
          items:
            $ref: '#/components/schemas/servicing.MemberSelectionDTO'
          description: A list of objects representing the dimension members assigned population access in the member filter.
        dimensionStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The dimension's validity status. Valid values: Valid, NoData, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.SuccessfulAccessibleTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The user ID.
        tenantCode:
          type: string
          description: The tenant code.
        forAllChildren:
          type: boolean
          description: If true, the target assignment is for all analytic tenants.
    servicing.SuccessfulLocalTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The user ID.
    servicing.TargetTenantCodeDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code.
        forAllChildren:
          type: boolean
          description: If true, the assignment is for all the analytic tenants of the specified tenant.
    servicing.TenantCodeErrorDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The bad tenant code.
        forAllChildren:
          type: boolean
          description: If true, the target assignment is for all analytic tenants.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.TenantDataUploadStatusResponseDTO:
      type: object
      properties:
        uploadTime:
          type: string
          description: The upload time of the data upload.
        included:
          type: boolean
          description: If "true", the data upload is included.
    servicing.TenantDataUploadUpdateStatusResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The analytic tenant that the exclusion operation was conducted for.
        uploadTime:
          type: string
          description: The upload time of the data upload
        status:
          type: string
          description: The outcome of the exclusion operation.
        message:
          type: string
          description: If applicable, the message explains why errors were encountered during the exclusion operation.
    servicing.TenantDataUploadsListResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TenantDataUploadsResponseDTO'
          description: A list of objects representing analytic tenants and their data uploads.
        limit:
          type: integer
          description: The number of analytic tenants to retrieve. The maximum number of analytic tenants to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
    servicing.TenantDataUploadsResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant owning the data uploads.
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TenantDataUploadStatusResponseDTO'
          description: The data uploads completed for the specified analytic tenant. The list is empty if no previous data uploads are found for the analytic tenant.
    servicing.TenantDataUploadsUpdateResponseDTO:
      type: object
      properties:
        totalFailures:
          type: integer
          description: The number of data uploads that failed during the exclusion operation.
          format: uint32
        totalSuccess:
          type: integer
          description: The number of data uploads that were excluded successfully.
          format: uint32
        uploads:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TenantDataUploadUpdateStatusResponseDTO'
          description: A list of objects representing the results of the data upload exclusion.
    servicing.UserCreationAPIRequestDTO:
      type: object
      properties:
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If false, the user account is disabled.
        email:
          type: string
          description: The user's email. This is used if the user's email is different from their username. For example, "john.doe@visier.com".
    servicing.UserGetAPIResponseDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: boolean
          description: If false, the user account is disabled.
        profiles:
          allOf:
            - $ref: '#/components/schemas/servicing.AllProfileAssignedForLocalTenantDTO'
          description: A list of objects representing the list of available profiles. Not returned if the user has no profiles.
        permissions:
          allOf:
            - $ref: '#/components/schemas/servicing.AllPermissionsAssignedForLocalTenantDTO'
          description: A list of objects representing the user's permissions.
        userGroups:
          allOf:
            - $ref: '#/components/schemas/servicing.AllUserGroupsAssignedForLocalTenantDTO'
          description: A list of objects representing the available user groups.
        lastLogin:
          allOf:
            - $ref: '#/components/schemas/servicing.LastLoginDTO'
          description: An object that represents the time that the user last logged into Visier.
        email:
          type: string
          description: The user's email address.
    servicing.UserGroupAssignedForLocalTenantDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The user group ID.
        displayName:
          type: string
          description: An identifiable user group name to display in Visier, such as "Leadership User Group".
    servicing.UserGroupAssignmentDTO:
      type: object
      properties:
        userGroupIds:
          type: array
          items:
            type: string
          description: A list of user group IDs assigned to the sample question.
      description: The Vee sample question's assigned user groups.
    servicing.UserIdErrorDTO:
      type: object
      properties:
        userId:
          type: string
          description: The bad user ID.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.UserPropertyDTO:
      type: object
      properties:
        name:
          type: string
          description: The name property to map to in the dynamic filter. Valid values are one of `username`, `email`, `employeeId`.
    servicing.UserUpdateAPIRequestDTO:
      type: object
      properties:
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com. If a user's username changes, they must authenticate using the new username.
    servicing.UsersAPIErrorMessageDTO:
      type: object
      properties:
        message:
          type: string
          description: Error message
        rci:
          type: string
          description: The unique identifier associated to this error
    servicing.UsersAPIFailureDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        userName:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.UsersAPIErrorMessageDTO'
          description: The error thrown during creation.
    servicing.UsersAPIResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UsersAPISuccessDTO'
          description: The users for which the request succeeded.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UsersAPIFailureDTO'
          description: The users for which the request failed.
    servicing.UsersAPISuccessDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
    servicing.UsersCreationAPIRequestDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserCreationAPIRequestDTO'
          description: A list of objects representing users to create. Maximum 100 users can be created in a single request.
    servicing.UsersDeleteAPIRequestDTO:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: string
          description: A list of objects representing users to delete. Maximum 100 users can be deleted in a single request.
    servicing.UsersUpdateAPIRequestDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UsersUpdateAPIUserDTO'
          description: A list of objects representing users to update. Maximum 100 users can be updated in a single request.
    servicing.UsersUpdateAPIUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com. If a user's username changes, they must authenticate using the new username.
    servicing.VeeQuestionChangeDefinitionDTO:
      type: object
      properties:
        question:
          type: string
          description: A question in plain language to display in Vee.
        questionId:
          type: string
          description: The unique identifier of the sample question. Omit if creating a new sample question.
        visibleInVee:
          type: boolean
          description: If `true`, the question is visible in Vee. Default is `true`.
        categoryId:
          type: string
          description: The unique identifier of the question category.
        userGroupAssignment:
          allOf:
            - $ref: '#/components/schemas/servicing.UserGroupAssignmentDTO'
          description: The user group IDs assigned to the sample question.
      description: The Vee sample question details.
    servicing.VeeQuestionChangeDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the tenant in which to update sample questions.
        projectId:
          type: string
          description: To make changes in a project, specify a project ID.
        questions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.VeeQuestionChangeDefinitionDTO'
          description: The list of sample questions to update.
      description: Information about the sample question and the context of the API request, such as the tenant code and project ID.
    servicing.VeeQuestionChangeFailureDTO:
      type: object
      properties:
        question:
          type: string
          description: The question in plain language that was not successfully changed.
        questionId:
          type: string
          description: The unique identifier of the sample question that was not successfully changed.
        categoryId:
          type: string
          description: The unique identifier of the category of the sample question that was not successfully changed.
        userGroupAssignment:
          allOf:
            - $ref: '#/components/schemas/servicing.UserGroupAssignmentDTO'
          description: The user group IDs that were not successfully assigned to the sample question.
        message:
          type: string
          description: An error message describing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        tenantCode:
          type: string
          description: The tenant that the object was not successfully changed in.
        projectId:
          type: string
          description: The project that the object was not successfully changed in.
      description: The list of failed changes.
    servicing.VeeQuestionChangeSuccessDTO:
      type: object
      properties:
        question:
          type: string
          description: The sample question in plain language that was successfully changed.
        questionId:
          type: string
          description: The unique identifier of the sample question that was successfully changed.
        visibleInVee:
          type: boolean
          description: If `true`, the question is visible in Vee.
        categoryId:
          type: string
          description: The unique identifier of the category of the question that was successfully changed.
        userGroupAssignment:
          allOf:
            - $ref: '#/components/schemas/servicing.UserGroupAssignmentDTO'
          description: The user group IDs that were successfully assigned to the sample question.
        tenantCode:
          type: string
          description: The tenant that the sample question was changed in.
        projectId:
          type: string
          description: The project that the sample question was changed in.
      description: The list of successful changes.
    servicing.VeeQuestionDeleteDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant to delete sample questions from. Default is the current tenant.
        projectId:
          type: string
          description: The project in which to delete sample questions. If omitted and the `ProjectID` request header is not defined, the change is published to production immediately.
        questionIds:
          type: array
          items:
            type: string
          description: The IDs of the sample questions to delete for a specific tenant.
      description: Information about the sample question and the context of the API request, such as the tenant code and project ID.
    servicing.VeeQuestionsBulkChangeResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.VeeQuestionChangeSuccessDTO'
          description: The sample questions that were successfully changed.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.VeeQuestionChangeFailureDTO'
          description: The sample questions that were not successfully changed.
      description: The results of the bulk change operation.
    servicing.VeeQuestionsChangeDefinitionsDTO:
      type: object
      properties:
        questionsByTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.VeeQuestionChangeDefinitionsByTenantDTO'
          description: The Vee sample question updates to make in each tenant.
      description: The changes to Vee sample questions.
    servicing.VeeQuestionsDeleteDefinitionsDTO:
      type: object
      properties:
        questionsByTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.VeeQuestionDeleteDefinitionsByTenantDTO'
          description: The sample questions to delete for each tenant.
      description: The Vee sample question to delete.
    servicing.v2.objectconfiguration.AnalyticObjectDefinitionDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the analytic object.
        objectName:
          type: string
          description: The object name of the analytic object.
        updateOperation:
          enum:
            - unspecified
            - revertToBP
          type: string
          description: |-
            Update the analytic object. Required for `PUT` requests. Valid values:
             - `unspecified`: Do not update the object.
             - `revertToBP`: Undo any tenant overrides and revert the object back to its Blueprint state.
          format: enum
      description: Information about the analytic object, such as its UUID and object name.
    servicing.v2.objectconfiguration.AnalyticObjectFilterDTO:
      type: object
      properties:
        analyticObjectName:
          type: string
          description: The analytic object name to which the dimension applies.
        dimensionFilterList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionFilterListDTO'
          description: The dimensions associated with the selection concept.
      description: The analytic objects associated with the object.
    servicing.v2.objectconfiguration.AnalyticObjectFilterListDTO:
      type: object
      properties:
        analyticObjectFilters:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectFilterDTO'
          description: The list of analytic object associated with the dimension.
      description: The analytic objects associated with the object.
    servicing.v2.objectconfiguration.AnalyticObjectNamesDTO:
      type: object
      properties:
        objectNames:
          type: array
          items:
            type: string
          description: The object names of the analytic objects associated with the object.
      description: The analytic objects associated with the object.
    servicing.v2.objectconfiguration.AnalyticObjectReferenceDTO:
      type: object
      properties:
        objectName:
          type: string
          description: The unique identifier name of the referenced analytic object.
      description: A reference to an analytic object that relates to another object in the system.
    servicing.v2.objectconfiguration.AnalyticObjectReferenceListDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectReferenceDTO'
          description: The list of analytic object references.
      description: A collection of references to analytic objects that relate to another object in the system.
    servicing.v2.objectconfiguration.AnalyticObjectRequestDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectWithContextDTO'
          description: The analytic objects in the request.
      description: The analytic objects to create or update.
    servicing.v2.objectconfiguration.AnalyticObjectWithContextDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The context of the API request, such as the tenant code and project ID.
        analyticObject:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectDefinitionDTO'
          description: Information about the analytic object, such as its UUID and object name.
      description: Information about the analytic object and the context of the API request, such as the tenant code and project ID.
    servicing.v2.objectconfiguration.BasicInformationDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The user-friendly name for the object.
        shortDisplayName:
          type: string
          description: A shortened version of the display name. If the object is visible in the solution experience, this name is displayed in visualization titles.
        description:
          type: string
          description: A short description of the object. Descriptions provide in-context help for your users while working in Visier.
        explanation:
          type: string
          description: A longer description of the object that typically includes a definition, calculation details, and other guidance about how to use the object.
        designerNotes:
          type: string
          description: An admin-only description of the object that provides design-specific information or considerations.
        synonymList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.SynonymListDTO'
          description: Alternative words or phrases for the object.
      description: Fields that identify and describe the object, such as its display name, description, and explanation.
    servicing.v2.objectconfiguration.BulkChangeResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.SuccessfulChangeDTO'
          description: The list of successful changes.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.FailedChangeDTO'
          description: The list of failed changes.
    servicing.v2.objectconfiguration.CalculatedPropertyTypeDTO:
      type: object
      properties:
        dataType:
          type: string
          description: |-
            The property's data type. Valid values:

             `Number`, `Integer`, `Ordinal`, `Categorical`, `Currency`, `Boolean`, `Percent`,
             `IntegerPercent`, `PercentNoScaling`, `PercentagePoint`, `String`, `Text`, `LargeText`,
             `Date`, `HourDuration`, `DayDuration`, `MonthDuration`, `YearDuration`.
        primitiveType:
          type: string
          description: The primitive data type, such as String, Integer, or Boolean.
        formula:
          type: string
          description: The property's formula written in Visier Formula Language (VFL).
      description: A calculated property that takes a value that comes directly from the data and creates a new value through a formula.
    servicing.v2.objectconfiguration.CalculatedSelectionConceptDTO:
      type: object
      properties:
        formula:
          type: string
          description: The calculation concept formula.
        analyticObjectNames:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectNamesDTO'
          description: The object name of the analytic object associated with the concept.
        tagList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.TagReferenceListDTO'
          description: The tags assigned to the object.
        visibleInAnalytics:
          type: boolean
          description: If `true`, the object is visible to end users in the solution.
        includeWithVee:
          type: boolean
          description: If `true`, the object is available in Vee's responses.
      description: Information about the concept.
    servicing.v2.objectconfiguration.ConceptDefinitionDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the concept.
        objectName:
          type: string
          description: The object name of the concept.
        basicInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.BasicInformationDTO'
          description: Fields that identify and describe the concept, such as its display name, description, and explanation.
        details:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptTypeDetailsDTO'
          description: The concept type and its details.
        versionInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.VersionInformationDTO'
          description: The object's version information. Version information is read-only. It indicates where the object originates from and whether the object has been modified in your tenant.
      description: Information about the concept, such as its UUID and concept type.
    servicing.v2.objectconfiguration.ConceptDeleteRequestDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptDeleteWithContextDTO'
          description: The concepts in the request.
      description: The concepts to delete.
    servicing.v2.objectconfiguration.ConceptDeleteWithContextDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The context of the API request, such as the tenant code and project ID.
        concept:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ObjectIdDTO'
          description: Information identifying the concept to delete.
      description: Information about the concept to delete and the context of the API request, such as the tenant code and project ID.
    servicing.v2.objectconfiguration.ConceptRequestDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptWithContextDTO'
          description: The concepts in the request.
      description: The concepts to create or update.
    servicing.v2.objectconfiguration.ConceptResponseDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptWithContextDTO'
          description: The concepts in the response.
      description: The response for retrieving concepts.
    servicing.v2.objectconfiguration.ConceptTypeDetailsDTO:
      type: object
      properties:
        process:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptDefinitionDTO'
          description: The process concept's associated objects, such as its analytic object and status dimension.
        memberSelection:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.MemberSelectionConceptDTO'
          description: The member selection concept's configuration, such as its dimension members.
        calculatedSelection:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.CalculatedSelectionConceptDTO'
          description: The calculated selection concept's configuration, such as its formula.
    servicing.v2.objectconfiguration.ConceptWithContextDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The context of the API request, such as the tenant code and project ID.
        concept:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ConceptDefinitionDTO'
          description: Information about the concept, such as its UUID and concept type.
      description: Information about the concept and the context of the API request, such as the tenant code and project ID.
    servicing.v2.objectconfiguration.DimensionDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier of the dimension.
        objectName:
          type: string
          description: The unique name of the dimension.
        basicInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.BasicInformationDTO'
          description: Fields that identify and describe the dimension, such as its display name, description, and explanation.
        details:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionDetailsDTO'
          description: The dimension type and its details.
        tagList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.TagReferenceListDTO'
          description: A list of tags assigned to the object.
        visibleInApp:
          type: boolean
          description: If `true`, the object is visible to end users in the solution.
        includeWithVee:
          type: boolean
          description: If `true`, the object is available in Vee's responses.
        versionInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.VersionInformationDTO'
          description: The object's version information. Version information is read-only. It indicates where the object originates from and whether the object has been modified in your tenant.
      description: Information about the dimension.
    servicing.v2.objectconfiguration.DimensionDeleteRequestDTO:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionDeleteWithContextDTO'
          description: The dimensions in the request.
      description: The dimensions to delete.
    servicing.v2.objectconfiguration.DimensionDeleteWithContextDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The context of the API request, such as the tenant code and project ID.
        dimension:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ObjectIdDTO'
          description: Information identifying the dimension to delete.
      description: Information about the dimension to delete and the context of the API request, such as the tenant code and project ID.
    servicing.v2.objectconfiguration.DimensionDetailsDTO:
      type: object
      properties:
        leveled:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.LeveledDetailsDTO'
          description: The leveled dimension's configuration, such as its levels and settings.
        parentChild:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ParentChildDetailsDTO'
          description: The parent-child dimension's configuration, such as its levels and name property.
      description: The dimension type and its details.
    servicing.v2.objectconfiguration.DimensionFilterDTO:
      type: object
      properties:
        dimensionName:
          type: string
          description: The display name of the dimension.
        qualifyingPath:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.QualifyingPathDTO'
          description: The objects that qualify the path to the dimension from its parent analytic object. For example, let's say the analytic object is `Applicant` and the dimension is `Location`. To get from `Location` to `Applicant` there are multiple paths, one of which is to follow references `Requisition` and then `Hiring Manager` to `Location`. `Location` is available on `Hiring_Manager` because a hiring manager is an `Employee`. In this example, the qualifying path is `Requisition.Hiring_Manager`.
        memberSelectionList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.MemberSelectionListDTO'
          description: The dimension members in a member selection concept.
      description: A dimension associated with the selection concept.
    servicing.v2.objectconfiguration.DimensionFilterListDTO:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionFilterDTO'
          description: The dimensions associated with the selection concept.
      description: The dimensions associated with the selection concept.
    servicing.v2.objectconfiguration.DimensionRequestDTO:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionWithContextDTO'
          description: The dimensions in the request.
      description: The dimensions in the API request.
    servicing.v2.objectconfiguration.DimensionResponseDTO:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionWithContextDTO'
          description: The returned dimensions.
      description: The dimensions in the response.
    servicing.v2.objectconfiguration.DimensionWithContextDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The context of the API request, such as the tenant code and project ID.
        dimension:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.DimensionDTO'
          description: Information about the dimension.
      description: Information about the dimension and the context of the API request, such as the tenant code and project ID.
    servicing.v2.objectconfiguration.ExecutionContextDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code.
        projectId:
          type: string
          description: The project ID.
      description: The context of the API request, such as the tenant code and project ID.
    servicing.v2.objectconfiguration.FailedChangeDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The tenant and, optionally, project that change was attempted on.
        objectName:
          type: string
          description: The object name of the object that was attempted to be changed.
        uuid:
          type: string
          description: The UUID of the object that was attempted to be changed.
        displayName:
          type: string
          description: The display name of the object that was attempted to be changed.
        messages:
          type: array
          items:
            type: string
          description: The error messages.
    servicing.v2.objectconfiguration.LevelDTO:
      type: object
      properties:
        objectName:
          type: string
          description: The object name of the level.
        displayName:
          type: string
          description: The display name of the level.
        description:
          type: string
          description: The description of the level.
        type:
          type: string
          description: The level data type, such as string or ordinal.
        propertyDependencyList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.PropertyDependencyListDTO'
          description: The references for the level properties.
        uuid:
          type: string
          description: The unique identifier of the dimension level.
      description: A level in a leveled dimension or parent-child dimension.
    servicing.v2.objectconfiguration.LevelListDTO:
      type: object
      properties:
        levels:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.LevelDTO'
          description: The list of dimension levels.
      description: The levels in a leveled dimension or parent-child dimension.
    servicing.v2.objectconfiguration.LeveledDetailsDTO:
      type: object
      properties:
        levelList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.LevelListDTO'
          description: The levels in the dimension.
        hideNullValues:
          type: boolean
          description: If `true`, the dimension hides null values in visualizations. Default is `false`.
        enableLargeDimensionSearch:
          type: boolean
          description: If `true`, you can search for members in a dimension with more than 300,000 members. Default is `false` to help with performance.
        analyticObjectList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectReferenceListDTO'
          description: The analytic objects associated with the dimension.
      description: The leveled dimension's configuration, such as its levels and settings.
    servicing.v2.objectconfiguration.MemberSelectionConceptDTO:
      type: object
      properties:
        analyticObjectFilterList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectFilterListDTO'
          description: The list of analytic object associated with the concept.
        tagList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.TagReferenceListDTO'
          description: The tags assigned to the object.
        visibleInAnalytics:
          type: boolean
          description: If `true`, the object is visible to end users in the solution.
        includeWithVee:
          type: boolean
          description: If `true`, the object is available in Vee's responses.
      description: Information about the concept.
    servicing.v2.objectconfiguration.MemberSelectionDTO:
      type: object
      properties:
        namePath:
          type: array
          items:
            type: string
          description: The members in the object's qualifying path. For example, `["Requisition", "Hiring Manager"]`.
        isExcluded:
          type: boolean
          description: If `true`, the member is excluded from the concept. Default is `false`.
      description: A dimension member in a member selection concept.
    servicing.v2.objectconfiguration.MemberSelectionListDTO:
      type: object
      properties:
        memberSelections:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.MemberSelectionDTO'
          description: The dimension members in a member selection concept.
      description: The population members that the concept selects.
    servicing.v2.objectconfiguration.MetricDefinitionDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the metric.
        objectName:
          type: string
          description: The object name of the metric.
        basicInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.BasicInformationDTO'
          description: Fields that identify and describe the metric, such as its display name, description, and explanation.
        details:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.MetricTypeDetailsDTO'
          description: The metric type and its details.
        additiveType:
          enum:
            - fullyAdditive
            - balance
            - nonAdditive
            - unknown
          type: string
          description: |-
            How to sum the metric's values. Valid values:
             - `fullyAdditive`: Sums the metric over any dimension, concept, or time period.
             - `balance`: Sums the metric over any dimension or concept, but not time period.
             - `nonAdditive`: Metric values are not additive.
          format: enum
      description: Information about the metric, such as its object name, basic information, and additive type.
    servicing.v2.objectconfiguration.MetricTypeDetailsDTO:
      type: object
      properties:
        processConcept:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptMetricDefinitionDTO'
          description: Information about the metric, such as its formula and data type.
    servicing.v2.objectconfiguration.ObjectIdDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the object.
        objectName:
          type: string
          description: The object name of the object.
      description: The identifier for the object.
    servicing.v2.objectconfiguration.ParentChildDetailsDTO:
      type: object
      properties:
        levelList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.LevelListDTO'
          description: The levels in the dimension.
        hideNullValues:
          type: boolean
          description: If `true`, the dimension hides null values in visualizations. Default is `false`.
        enableLargeDimensionSearch:
          type: boolean
          description: If `true`, you can search for members in a dimension with more than 300,000 members. Default is `false` to help with performance.
        id:
          type: string
          description: The primary key for the member and is automatically generated from the data source.
        parentId:
          type: string
          description: The foreign key for the member used to associate a parent member and is automatically generated from the data source.
        name:
          type: string
          description: The member name corresponding with the ID (or primary key).
        analyticObjectList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.AnalyticObjectReferenceListDTO'
          description: The analytic objects associated with the dimension.
      description: The parent-child dimension's configuration, such as its levels and name property.
    servicing.v2.objectconfiguration.ProcessConceptDefinitionDTO:
      type: object
      properties:
        analyticObjectName:
          type: string
          description: The object name of the analytic object for the process concept.
        statusDimensionObjectName:
          type: string
          description: The object name of the status dimension for the process concept.
        participationConceptUuid:
          type: string
          description: The UUID of the participation concept for the process concept.
        onHoldConceptUuid:
          type: string
          description: The UUID of the on-hold concept for the process concept.
        stageList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptStageListDTO'
          description: The process concept's stages.
        outcomeList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptOutcomeListDTO'
          description: The process concept's outcomes.
        metricList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptMetricListDTO'
          description: The process concept's associated metrics.
        propertyList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptPropertyListDTO'
          description: The process concept's associated properties.
        tagList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.TagReferenceListDTO'
          description: The tags assigned to the object.
        visibleInAnalytics:
          type: boolean
          description: If `true`, the object is visible to end users in the solution.
        includeWithVee:
          type: boolean
          description: If `true`, the object is available in Vee's responses.
      description: The process concept's associated objects, such as its analytic object and status dimension.
    servicing.v2.objectconfiguration.ProcessConceptMemberDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the mapped member.
        namePath:
          type: array
          items:
            type: string
          description: The name path of the mapped member.
      description: Each member mapped to a stage or outcome in the process concept.
    servicing.v2.objectconfiguration.ProcessConceptMemberListDTO:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptMemberDTO'
          description: Each member mapped to a stage or outcome in the process concept.
      description: The members mapped to a stage or outcome in the process concept.
    servicing.v2.objectconfiguration.ProcessConceptMetricDefinitionDTO:
      type: object
      properties:
        formula:
          type: string
          description: The metric's formula written in Visier Formula Language (VFL).
        dataType:
          type: string
          description: |-
            The metric's data type. Valid values:

             `Number`, `Integer`, `Ordinal`, `Categorical`, `Currency`, `Boolean`, `Percent`,
             `IntegerPercent`, `PercentNoScaling`, `PercentagePoint`, `String`, `Text`, `LargeText`,
             `Date`, `HourDuration`, `DayDuration`, `MonthDuration`, `YearDuration`.
        visibleInAnalytics:
          type: boolean
          description: If `true`, the object is visible to end users in the solution. Default is `true`.
      description: Information about the metric, such as its formula and data type.
    servicing.v2.objectconfiguration.ProcessConceptMetricListDTO:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.MetricDefinitionDTO'
          description: Each metric in the process concept.
      description: The process concept's associated metrics.
    servicing.v2.objectconfiguration.ProcessConceptOutcomeDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the process concept outcome.
        objectName:
          type: string
          description: The object name of the process concept outcome.
        basicInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.BasicInformationDTO'
          description: Fields that identify and describe the concept outcome, such as its display name, description, and explanation.
        outcomeSemantic:
          enum:
            - Success
            - Fail
          type: string
          description: |-
            The end result of the process. Valid values:
             - `Success`: The outcome is considered successful; for example, Hired. This is the default.
             - `Fail`: The outcome is considered a failure; for example, Rejected.
          format: enum
        mappedMemberList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptMemberListDTO'
          description: Each member mapped to the process concept outcome.
      description: Information about a process concept outcome.
    servicing.v2.objectconfiguration.ProcessConceptOutcomeListDTO:
      type: object
      properties:
        outcomes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptOutcomeDTO'
          description: Each outcome in the process concept.
      description: The process concept's outcomes.
    servicing.v2.objectconfiguration.ProcessConceptPropertyListDTO:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.PropertyDefinitionDTO'
          description: Each property in the process concept.
      description: The process concept's associated properties.
    servicing.v2.objectconfiguration.ProcessConceptPropertyTypeDTO:
      type: object
      properties:
        dataType:
          type: string
          description: |-
            The property's data type. Valid values:

             `Number`, `Integer`, `Ordinal`, `Categorical`, `Currency`, `Boolean`, `Percent`,
             `IntegerPercent`, `PercentNoScaling`, `PercentagePoint`, `String`, `Text`, `LargeText`,
             `Date`, `HourDuration`, `DayDuration`, `MonthDuration`, `YearDuration`.
        primitiveType:
          type: string
          description: The primitive data type, such as String, Integer, or Boolean.
        formula:
          type: string
          description: The property's formula written in Visier Formula Language (VFL).
      description: A process concept property that takes a value that comes directly from the data and creates a new value through a formula.
    servicing.v2.objectconfiguration.ProcessConceptStageDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the process concept stage.
        objectName:
          type: string
          description: The object name of the process concept stage.
        basicInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.BasicInformationDTO'
          description: Fields that identify and describe the concept stage, such as its display name, description, and explanation.
        mappedMemberList:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptMemberListDTO'
          description: The members mapped to the process concept stage.
      description: Information about a process concept stage.
    servicing.v2.objectconfiguration.ProcessConceptStageListDTO:
      type: object
      properties:
        stages:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptStageDTO'
          description: Each stage in the process concept.
      description: The process concept's stages.
    servicing.v2.objectconfiguration.PropertyDefinitionDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID identifying the property.
        objectName:
          type: string
          description: The object name of the property.
        basicInformation:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.BasicInformationDTO'
          description: Fields that identify and describe the property, such as its display name, description, and explanation.
        details:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.PropertyTypeDetailsDTO'
          description: The property type and its details.
    servicing.v2.objectconfiguration.PropertyDependencyDTO:
      type: object
      properties:
        analyticObjectName:
          type: string
          description: The analytic object associated with the dimension. Must be the analytic object's object name; for example, Employee_Experience.
        propertyObjectName:
          type: string
          description: The display name of the property associated with the dimension. Must be the property's qualified name; for example, Candidate.Location.
      description: Each analytic object and property associated with the dimension.
    servicing.v2.objectconfiguration.PropertyDependencyListDTO:
      type: object
      properties:
        propertyDependencies:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.PropertyDependencyDTO'
          description: Each analytic object and property associated with the dimension.
      description: The dimension's associated analytic objects and properties.
    servicing.v2.objectconfiguration.PropertyTypeDetailsDTO:
      type: object
      properties:
        simple:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.SimplePropertyTypeDTO'
          description: The simple property type, which provides a single value directly from the data.
        calculated:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.CalculatedPropertyTypeDTO'
          description: The calculated property type, which derives its value using a formula.
        processConcept:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ProcessConceptPropertyTypeDTO'
          description: The process concept property type, which describes the relationship between subject member properties and a subject member in the process pipeline.
      description: The property type.
    servicing.v2.objectconfiguration.QualifyingPathDTO:
      type: object
      properties:
        namePath:
          type: array
          items:
            type: string
          description: The members in the object's qualifying path. For example, `["Requisition", "Hiring Manager"]`.
      description: The objects that qualify the path to the dimension from its parent analytic object. For example, let's say the analytic object is `Applicant` and the dimension is `Location`. To get to `Location` from `Applicant` there are multiple paths, one of which is to follow references `Requisition` and then `Hiring Manager` to `Location`. `Location` is available on `Hiring_Manager` because a hiring manager is an `Employee`. In this example, the qualifying path is `Requisition.Hiring_Manager`.
    servicing.v2.objectconfiguration.SimplePropertyTypeDTO:
      type: object
      properties:
        dataType:
          type: string
          description: |-
            The property's data type. Valid values:

             `Number`, `Integer`, `Ordinal`, `Categorical`, `Currency`, `Boolean`, `Percent`,
             `IntegerPercent`, `PercentNoScaling`, `PercentagePoint`, `String`, `Text`, `LargeText`,
             `Date`, `HourDuration`, `DayDuration`, `MonthDuration`, `YearDuration`.
        primitiveType:
          type: string
          description: The primitive data type, such as String, Integer, or Boolean.
      description: A simple property that provides single-level detail to an analytic object and contains one value at a time.
    servicing.v2.objectconfiguration.SuccessfulChangeDTO:
      type: object
      properties:
        executionContext:
          allOf:
            - $ref: '#/components/schemas/servicing.v2.objectconfiguration.ExecutionContextDTO'
          description: The tenant and, optionally, project that change was made on.
        objectName:
          type: string
          description: The object name of the object that was changed.
        uuid:
          type: string
          description: The UUID of the object that was changed.
        displayName:
          type: string
          description: The display name of the object that was changed.
    servicing.v2.objectconfiguration.SynonymListDTO:
      type: object
      properties:
        synonyms:
          type: array
          items:
            type: string
          description: Alternative words or phrases for the object.
      description: The object's synonyms.
    servicing.v2.objectconfiguration.TagReferenceDTO:
      type: object
      properties:
        objectName:
          type: string
          description: The object name of the tag.
      description: A reference to a tag.
    servicing.v2.objectconfiguration.TagReferenceListDTO:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/servicing.v2.objectconfiguration.TagReferenceDTO'
          description: A list of tags assigned to the object.
      description: The tags assigned to the object.
    servicing.v2.objectconfiguration.VersionInformationDTO:
      type: object
      properties:
        versionType:
          enum:
            - Unknown
            - BP
            - Tenant
            - TenantOverride
            - TenantShared
            - Draft
          type: string
          description: |-
            Indicates where the object originates from and whether the object has been modified. Valid values:
             - `Unknown`: The source is not known.
             - `BP`: The object originates from Visier's Blueprint and is not changed at the tenant level.
             - `Tenant`: The object only exists in the tenant and doesn't exist in Visier's Blueprint.
             - `TenantOverride`: The object originates from Visier's Blueprint and is changed at the tenant level.
             - `TenantShared`: The object is non-versioned, only exists in the tenant and doesn’t exist in Visier's Blueprint, and is shareable with other users in the tenant.
             - `Draft`: The object only exists in the specified draft project.
          format: enum
        edited:
          type: string
          description: The UTC time of the latest change in ISO 8601 format. For example, `2023-10-01T12:00:00Z`.
        editor:
          type: string
          description: The user who made the latest change.
      description: The object's version information. Version information is read-only. It indicates where the object originates from and whether the object has been modified in your tenant.
    servicing.CapabilityGroupDTO:
      type: object
      properties:
        group:
          enum:
            - unknown
            - Any
            - NotRequired
            - Data
            - Application
            - ApplicationManagement
            - Security
            - UserManagement
            - Model
            - TenantManagement
            - Settings
            - DataUpload
            - FileSharing
            - Approve
            - TwoStepPublish
            - DirectPublish
            - TenantPreview
            - OpenAPI
            - OpenPlatform
            - ManageJobs
            - SupportPowerUser
            - LMSPowerUser
            - SupportProjectManager
            - SupportStandardUser
            - Translation
            - ModuleManagement
            - AnalyticObjectCreation
            - ClassicAdminConfig
            - ClassicReadOnlyAdminConfig
            - ClassicManageTenant
            - ClassicAnalysis
            - ClassicDraft
            - ClassicInternalDebugging
            - ClassicAPIRestricted
            - InfrastructureOperations
            - SolutionDesigner
            - AccessToAllData
            - FeatureToggle
            - SystemDiagnostics
            - SystemDiagnosticsSensitive
            - ConsumptionPricingAdmin
            - ReadImpersonator
            - WriteImpersonator
            - ReadImpersonated
            - WriteImpersonated
            - MasterImpersonator
            - Impersonator
            - WillowUser
            - WillowAdmin
            - GeminiManager
            - GeminiSupport
            - GeminiAdmin
            - GeminiSysAdmin
            - ConsolidatedAnalytics
            - RequestSecureTicket
            - RequestAuthToken
            - OAuth2ClientRegistration
            - AccessToAllProperties
            - AccessToKeyProperties
            - PlanningManagement
            - WillowVantageCrawler
            - DataValidation
            - ContentReassignment
            - ReportDownloading
            - PlutoUser
            - ReportingManagement
            - QuotaManagement
            - WebhookManagement
            - ProfileManagement
            - UserGroupManagement
            - ProactiveAlertManagement
            - PermissionManagement
          type: string
          format: enum
        accessLevel:
          enum:
            - NoAccess
            - ReadOnly
            - Write
          type: string
          format: enum
        viewLevel:
          enum:
            - Simple
            - Detailed
            - API
            - Certified
            - Embedded
          type: string
          format: enum
        apiAccessLevel:
          enum:
            - NoAccess
            - ReadOnly
            - Write
          type: string
          format: enum
        apiViewLevel:
          enum:
            - Simple
            - Detailed
            - API
            - Certified
            - Embedded
          type: string
          format: enum
    servicing.ServicingCapabilityProtoEnumAccessLookupDTO:
      type: object
      properties:
        capabilityGroups:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilityGroupDTO'
    systemstatus.SystemStatusDTO:
      type: object
      properties:
        overall:
          type: string
          description: The overall status of Visier's platform and services.
    systemstatus.VeeStatusDTO:
      type: object
      properties:
        overall:
          type: string
          description: The overall status of Vee.
    SourceImportResultSummaryDTO:
      type: object
      properties:
        created:
          type: integer
          description: The number of imported sources that were newly created in the target tenant.
          format: int32
        updated:
          type: integer
          description: The number of imported sources that already existed and were updated in the target tenant.
          format: int32
        ignored:
          type: integer
          description: The number of imported sources that already existed and were unchanged in the target tenant.
          format: int32
        deleted:
          type: integer
          description: The number of imported sources that existed in the target tenant prior to the import and were deleted during the import.
          format: int32
    SourcesAPIPutResponseDTO:
      type: object
      properties:
        summary:
          allOf:
            - $ref: '#/components/schemas/SourceImportResultSummaryDTO'
          description: The changes made to the sources during the operation.
    UserCreationAPIResponseDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
    GenerateImpersonationTokenRequest:
      description: The details of the user to impersonate.
      type: object
      properties:
        TargetUsername:
          type: string
          description: The username of the user to impersonate.
    AuthenticationRequest:
      type: object
      properties:
        username:
          type: string
          description: The unique identifier of the API user requesting a security token.
        password:
          type: string
          description: The password that corresponds to the user making the request.
      description: Your username and password credentials to request an authentication token.
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: The access token to be used for API calls.
        refresh_token:
          type: string
          description: The token used to obtain new access tokens.
        id_token:
          type: string
          description: The ID token containing user identity information.
        token_type:
          type: string
          description: The type of the token, typically "Bearer".
        expires_in:
          type: integer
          description: The duration in seconds for which the access token is valid.
    TokenRequestBody:
      type: object
      properties:
        grant_type:
          description: |-
            The grant type. Supported values:
            - `authorization_code`: The authorization code grant type.
            - `password`: The password grant type.
            - `urn:ietf:params:oauth:grant-type:saml2-bearer`: The saml2-bearer grant type.
            - `urn:visier:params:oauth:grant-type:asid-token`: The ASID token grant type.
          type: string
        client_id:
          description: The ID of the pre-registered client application.
          type: string
        client_secret:
          description: The secret of the pre-registered client application.
          type: string
        redirect_uri:
          description: The optional URI to redirect to after authorization.
          type: string
        code:
          description: The authorization code. Applicable only for authorization code grant type.
          type: string
        username:
          description: The username of the user to authenticate. Applicable only for password grant type.
          type: string
        password:
          description: The password of the user to authenticate. Applicable only for password grant type.
          type: string
        asid_token:
          description: The ASID token. Applicable only for ASID token grant type.
          type: string
        assertion:
          description: The SAML assertion. Applicable only for saml2-bearer grant type.
          type: string
        refresh_token:
          description: The refresh token. Applicable only for refresh_token grant type.
          type: string
      description: |-
        Token request body definition.
    DirectDataUploadFileResponseDTO:
      type: object
      properties:
        transactionId:
          type: string
          description: The unique transaction identifier.
        status:
          type: string
          description: The status of the request.
        message:
          type: string
          description: The upload response message from the provisioning service.
      description: |-
        The transaction results.

        If uploading a file, a success response means the upload was successful and doesn't always mean the file was successfully loaded into its target object.
    PlanDataUploadResponseDTO:
      type: object
      properties:
        updatedCellsCount:
          type: integer
          description: The number of cells that were updated from the data load process.
        potentialUpdatedCellsCount:
          type: integer
          description: The number of cells that would have been updated if all changes were saved.
        errors:
          type: array
          description: The collection of errors encountered during the data load process.
          items:
            $ref: '#/components/schemas/planning.PlanDataLoadErrorDTO'
        changelists:
          type: array
          description: |-
            The collection of changes grouped by plan item made during the data load process.
            This list only contains the changes specified by the load.
            If you indicated in the request that the changes are to be rolled up or distributed,
            the values modified as a result of the calculations are not listed here.
          items:
            $ref: '#/components/schemas/PlanDataLoadChangeListDTO'
    PlanDataLoadChangeListDTO:
      type: object
      properties:
        planItem:
          type: string
          description: The ID of the plan item.
        changes:
          type: array
          description: The collection of changes made for the plan item.
          items:
            $ref: '#/components/schemas/PlanDataLoadChangeDTO'
    PlanDataLoadChangeDTO:
      type: object
      properties:
        rowMembers:
          type: array
          description: The collection of member ids that describe the row in the plan.
          items:
            type: string
        period:
          type: string
          description: The display name of the time period.
        oldValue:
          type: number
          format: double
          description: The value that was replaced.
        newValue:
          type: number
          format: double
          description: The new value loaded into the plan from the data load.
    PlanRowDataLoadResponseDTO:
      type: object
      properties:
        addedRowsCount:
          type: integer
          description: The number of rows added to the plan.
        removedRowsCount:
          type: integer
          description: The number of rows removed from the plan.
        potentialAddedRowsCount:
          type: integer
          description: The number of rows that could have been added to the plan.
        potentialRemovedRowsCount:
          type: integer
          description: The number of rows that could have been removed from the plan.
        errors:
          type: array
          description: The errors that occurred while loading the data.
          items:
            $ref: '#/components/schemas/planning.PlanDataLoadErrorDTO'
        customMembers:
          type: array
          description: The custom members and their corresponding IDs in the plan.
          items:
            $ref: '#/components/schemas/planning.PlanSegmentLevelMemberDTO'
    DvExportStatus:
      type: object
      properties:
        localizedMessage:
          type: string
          description: Localized error message describing the root cause of the error.
        errorCode:
          type: string
          description: Error classification.
        message:
          type: string
          description: Not used.
        rci:
          type: string
          description: Optional root cause identifier.
        userError:
          type: boolean
          description: Indicates whether the error is a user error.
      description: The response structure for errors.
    TableResponseDTO:
      type: object
      properties:
        header:
          type: object
          additionalProperties:
            type: string
          description: Description of the columns in the result set.
        rows:
          type: array
          description: Result rows in key-value format.
          items:
            type: object
            additionalProperties:
              type: string
    Status:
      type: object
      properties:
        localizedMessage:
          type: string
          description: Localized error message describing the root cause of the error.
        code:
          type: string
          description: Error classification.
        message:
          type: string
          description: Not used.
        rci:
          type: string
          description: Optional root cause identifier.
        userError:
          type: boolean
          description: Indicates whether the error is a user error.
      description: The response structure for errors.
    BenchmarkValue:
      title: BenchmarkValue
      description: |
        The compensation benchmark value.
      type: object
      properties:
        percentile10:
          type: integer
          description: |
            The 10th percentile base pay.
        percentile25:
          type: integer
          description: |
            The 25th percentile base pay.
        percentile50:
          type: integer
          description: |
            The 50th percentile base pay.
        percentile75:
          type: integer
          description: |
            The 75th percentile base pay.
        percentile90:
          type: integer
          description: |
            The 90th percentile base pay.
        alignedRangeMin:
          type: integer
          description: |
            The lower bound of salaries that are aligned with the market.
        alignedRangeMax:
          type: integer
          description: |
            The upper bound of salaries that are aligned with the market.
        referenceDate:
          type: string
          description: |
            The date that benchmark values are calculated for.
        releaseDate:
          type: string
          description: |
            The date that benchmark values are released.
        industryId:
          type: string
          description: |
            The industry member ID for the returned benchmarks.
        careerLevelId:
          type: string
          description: |
            The career level member ID for the returned benchmarks.
      required:
        - percentile10
        - percentile25
        - percentile50
        - percentile75
        - percentile90
        - alignedRangeMin
        - alignedRangeMax
        - referenceDate
        - releaseDate
        - industryId
        - careerLevelId
    BenchmarkInfo:
      title: BenchmarkInfo
      description: |
        Metadata that summarizes the benchmark dataset and API such as the release date.
      type: object
      properties:
        referenceDate:
          type: string
          description: |
            The date that benchmark values are calculated for.
        releaseDate:
          type: string
          description: |
            The date that benchmark values are released.
        apiReleaseDate:
          type: string
          description: |
            The date that API changes are released.
      required:
        - referenceDate
        - releaseDate
        - apiReleaseDate
    DimensionMember:
      title: DimensionMember
      description: |
        An element of a dimension that can be organized hierarchically.
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the member.
        name:
          type: string
          description: Name of the member.
        description:
          type: string
          description: Description of the member.
        hasBenchmarkValue:
          type: boolean
          description: |
            True if this member has available benchmark values.
            False if this member has no available benchmark values.
        hasChildren:
          type: boolean
          description: |
            True if this member has children.
            False if this member has no children. For example, a leaf member.
        status:
          type: string
          description: Status of the member. If status is `archived`, the dimension member does not have a benchmark value.
          enum:
            - active
            - archived
        displayId:
          type: string
          description: A user-friendly identifier of the member. This field will be excluded from the response if there is no displayId for the member.
        shortDescriptionSections:
          type: array
          description: A short description of the member in structured format.
          items:
            type: object
            title: DescriptionEntry
            properties:
              label:
                type: string
                description: "A word or phrase that describes a section of the member description. \nThis field will be excluded from the response if the member description does not have sections.\n"
              text:
                type: string
                description: |
                  The body text for a section of the member description.
                  This field will be excluded from the response if the member description does not have sections.
        jobDomain:
          type: string
          description: Domain of a job member. This field will be excluded from the response if there is no domain for the member.
        jobSubdomain:
          type: string
          description: Subdomain of a job member. This field will be excluded from the response if there is no subdomain for the member.
        typicalTitles:
          type: array
          description: Similar job titles for a job member. This field will be excluded from the response if there are no similar job titles.
          items:
            type: string
        relatedJobs:
          type: array
          description: The job IDs for similar jobs, sorted in descending order of similarity. This field will be excluded from the response if there are no similar jobs.
          items:
            type: string
        naicsId:
          type: string
          description: The North American Industry Classification System (NAICS) code that matches the provided naicsCode, using NAICS version 2022.
        naicsName:
          type: string
          description: The name of the North American Industry Classification System (NAICS) category that matches the provided naicsCode, using NAICS version 2022.
        naicsDescription:
          type: string
          description: The description of the North American Industry Classification System (NAICS) category that matches the provided naicsCode, using NAICS version 2022.
        socCode:
          type: string
          description: The Standard Occupational Classification (SOC) code for the job member, using SOC version 2018. This optional field is returned if a single SOC code maps to the job member.
        socName:
          type: string
          description: The detailed occupation name from the Standard Occupational Classification (SOC) system for the job member, using SOC version 2018. This optional field is returned if a single SOC code maps to the job member.
        socCodes:
          type: object
          description: The Standard Occupational Classification (SOC) codes for the job member mapped to career level ids, using SOC version 2018. This optional field is returned if multiple SOC codes map to different career levels of the job member.
        socNames:
          type: object
          description: The detailed occupation names from the Standard Occupational Classification (SOC) system for the job member mapped to career level ids, using SOC version 2018. This optional field is returned if multiple SOC codes map to different career levels of the job member.
      required:
        - id
        - name
        - description
        - hasBenchmarkValue
        - hasChildren
        - status
    Hierarchy:
      title: Hierarchy
      description: |
        Information describing a hierarchy, which is used to organize members of a dimension.
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the hierarchy.
        name:
          type: string
          description: Name of the hierarchy.
        description:
          type: string
          description: Description of the hierarchy.
      required:
        - id
        - name
        - hasChildren
    LocationSearchInput:
      description: |
        A list of location query parameters for bulk operation. The maximum batch size is 1000.
      type: object
      properties:
        searchInputs:
          type: array
          items:
            title: LocationSearchInput
            type: object
            properties:
              uuid:
                type: string
                description: |
                  A unique identifier of the individual requests.
              countryCode:
                type: string
                description: |
                  The **ISO 3166-1** country code to look up. Returns location members that match the country code.
                  Currently, the only supported country code is `US`.
              postalCode:
                type: string
                description: |
                  The postal code to look up. Returns location members that match both the country code and postal code.
            required:
              - uuid
              - countryCode
              - postalCode
        hasBenchmarkValue:
          type: boolean
          description: "Filter members based on the availability of benchmark values. \nIf `true`, members with benchmark values are returned. \nIf `false`, members without benchmark values are returned. \nIf no value is specified, all members are returned.\n"
      required:
        - searchInputs
    LocationSearchOutput:
      type: object
      properties:
        successes:
          type: array
          description: |
            The locations retrieved for successful inputs.
          items:
            title: LocationSearchSuccessfulOutput
            type: object
            properties:
              uuid:
                type: string
                description: |
                  A unique identifier of the individual requests.
              results:
                type: array
                description: |
                  A list of matching location members.
                items:
                  $ref: "#/components/schemas/DimensionMember"
            required:
              - uuid
              - results
        failures:
          type: array
          description: |
            Error description for failed inputs.
          items:
            title: LocationSearchFailureOutput
            type: object
            properties:
              uuid:
                type: string
                description: |
                  A unique identifier of the individual requests.
              httpStatus:
                type: string
                description: |
                  A three-digit code that indicates the outcome of a request.
              message:
                type: string
                description: |
                  The details of the error.
              rci:
                type: string
                description: |
                  A root cause identifier that allows Visier to determine the source of the problem.
              errorCode:
                type: string
                description: |
                  A brief identifier of the type of error.
            required:
              - uuid
              - httpStatus
              - message
              - rci
              - errorCode
      required:
        - successes
        - failures
    JobSearchInput:
      type: object
      properties:
        jobIDs:
          type: array
          description: |
            A list of job IDs to search jobs. The maximum number of job IDs is 1000.
          items:
            type: "string"
      required:
        - jobIDs
    JobSearchOutput:
      type: object
      properties:
        successes:
          type: array
          description: |
            The jobs retrieved for successful inputs.
          items:
            $ref: "#/components/schemas/DimensionMember"
        failures:
          type: array
          description: |
            Error description for failed inputs.
          items:
            title: JobSearchFailureOutput
            type: object
            properties:
              httpStatus:
                type: string
                description: |
                  A three-digit code that indicates the outcome of a request.
              message:
                type: string
                description: |
                  The details of the error.
              rci:
                type: string
                description: |
                  A root cause identifier that allows Visier to determine the source of the problem.
              errorCode:
                type: string
                description: |
                  A brief identifier of the type of error.
            required:
              - httpStatus
              - message
              - rci
              - errorCode
      required:
        - successes
        - failures
    SalaryBenchmarkInputs:
      description: |
        A list of salary query parameters for bulk operation. The maximum batch size is 1000.
      type: "array"
      items:
        title: SalaryBenchmarkInput
        type: object
        properties:
          uuid:
            type: "string"
            description: |
              A unique identifier of the individual requests.
          job:
            type: "string"
            description: |
              The job member ID.
          industry:
            type: string
            description: |
              The industry member ID. If the ID is not provided, the response returns the benchmark value across all industries.
          naicsCode:
            type: string
            description: |
              The North American Industry Classification System (NAICS) code.

              If the NAICS code is not provided, the response returns the benchmark value across all industries.
              If both `naicsCode` and `industry` are provided, the response returns the benchmark value for the `industry` parameter. The entered `naicsCode` will not be applied.
          location:
            type: string
            description: |
              The location member ID. If the ID is not provided, the response returns the benchmark value across all locations.
          companySize:
            type: string
            description: |
              The company size member ID. If the ID is not provided, the response returns the benchmark value across all company sizes.
          careerLevel:
            type: string
            description: |
              The career level member ID. If the ID is not provided, the response returns the benchmark value across all career levels.
        required:
          - uuid
          - job
    SalaryBenchmarksBatchProcessingOutputs:
      description: |
        All operations in the bulk request were completed.
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/SalaryBenchmarksBatchProcessingSuccessfulOutput'
        failures:
          type: array
          items:
            $ref: '#/components/schemas/SalaryBenchmarksBatchProcessingFailureOutput'
    SalaryBenchmarksBatchProcessingSuccessfulOutput:
      description: |
        The compensation benchmark values for individual requests within a bulk request.
      type: object
      properties:
        uuid:
          type: string
          description: |
            A unique identifier of the individual requests.
        percentile10:
          type: integer
          description: |
            The 10th percentile base pay.
        percentile25:
          type: integer
          description: |
            The 25th percentile base pay.
        percentile50:
          type: integer
          description: |
            The 50th percentile base pay.
        percentile75:
          type: integer
          description: |
            The 75th percentile base pay.
        percentile90:
          type: integer
          description: |
            The 90th percentile base pay.
        alignedRangeMin:
          type: integer
          description: |
            The lower bound of salaries that are aligned with the market.
        alignedRangeMax:
          type: integer
          description: |
            The upper bound of salaries that are aligned with the market.
        referenceDate:
          type: string
          description: |
            The date that benchmark values are calculated for.
        releaseDate:
          type: string
          description: |
            The date that benchmark values are released.
        industryId:
          type: string
          description: |
            The industry member ID for the returned benchmarks.
        careerLevelId:
          type: string
          description: |
            The career level member ID for the returned benchmarks.
      required:
        - uuid
        - percentile10
        - percentile25
        - percentile50
        - percentile75
        - percentile90
        - alignedRangeMin
        - alignedRangeMax
        - referenceDate
        - releaseDate
        - industryId
        - careerLevelId
    SalaryBenchmarksBatchProcessingFailureOutput:
      title: SalaryBenchmarksBatchProcessingFailureOutput
      description: |
        Error description for individual requests within a bulk request.
      type: object
      properties:
        uuid:
          type: string
          description: |
            A unique identifier of the individual requests.
        httpStatus:
          type: string
          description: |
            A three-digit code that indicates the outcome of a request.
        message:
          type: string
          description: |
            The details of the error.
        rci:
          type: string
          description: |
            A root cause identifier that allows Visier to determine the source of the problem.
        errorCode:
          type: string
          description: |
            A brief identifier of the type of error.
      required:
        - uuid
        - httpStatus
        - message
        - rci
        - errorCode
    JobFeedbackInput:
      title: JobFeedbackInput
      description: |
        The data structure used to submit negative feedback for the job match results returned by the Get jobs endpoint.
      type: object
      properties:
        term:
          type: string
          description: |
            The search term (job title) you entered when using the Get jobs endpoint. You're providing feedback on the quality of the search results for this term. This field is required.
            The minimum is 2 characters and the maximum is 100 characters.
        naicsCode:
          type: string
          description: If provided, the naicsCode entered when using the Get jobs endpoint. You're providing feedback on the quality of the results for the search term and code.
        additionalComments:
          type: string
          description: "Additional written feedback about the job match results returned by the Get jobs endpoint. \nThe maximum is 150 characters.\n"
      required:
        - term
    JobStandardizationInput:
      description: |
        The custom job titles to standardize.
      type: "object"
      properties:
        terms:
          type: "array"
          description: "A list of input search terms. The job members that are the most semantically similar to the search term are returned with the most relevant job members displayed first. \nYour search term may not be included in the results as semantic search goes beyond keyword matching and attempts to interpret the meaning behind the query to provide search results.\n\nThe maximum number of search terms is 30.\n\nFor the individual search term, the minimum length is 2 characters and the maximum length is 100 characters.\n"
          items:
            type: "string"
        naicsCode:
          type: "string"
          description: |
            The North American Industry Classification System (NAICS) code.

            If `naicsCode` is provided, the most relevant job titles associated with the naicsCode are returned first.
        numMatches:
          type: "integer"
          description: |
            The number of top matches to retrieve.
          default: 5
        semanticOnly:
          type: boolean
          description: |
            If `true`, only semantic search will be used to find matches. Ensure the parameter `lexicalOnly` is set to `false`.
            Default is `false`. By default, both semantic and lexical search are used to find matches.
          default: False
        lexicalOnly:
          type: boolean
          description: |
            If `true`, only lexical search will be used to find matches. Ensure the parameter `semanticOnly` is set to `false`.
            Default is `false`. By default, both semantic and lexical search are used to find matches.
          default: False
        typicalTitlesSearch:
          type: boolean
          description: |
            If `true`, similar job titles for a job member are included in the lexical search for matches.
            Default is `false`.
          default: False
      required:
        - "terms"
    JobStandardizationOutput:
      type: "array"
      items:
        title: OutputEntry
        type: object
        properties:
          job:
            type: "string"
            description: |
              The custom job title input.
          matches:
            type: array
            description: |
              The top standardized job matches.
            items:
              $ref: "#/components/schemas/DimensionMember"
        required:
          - job
          - matches
    ApiError:
      title: ApiError
      description: |
        Description of an API error.
      type: object
      properties:
        errorCode:
          type: string
          description: |
            A brief identifier of the type of error.
        message:
          type: string
          description: |
            The details of the error.
        rci:
          type: string
          description: |
            A root cause identifier that allows Visier to determine the source of the problem.
      required:
        - errorCode
        - message
        - rci
    Job:
      description: |
        Details describing a job.
      type: "object"
      properties:
        id:
          type: "string"
          description: |
            The unique ID of the job.
        name:
          type: "string"
          description: |
            The localized display name of the job.
        description:
          type: "string"
          description: |
            The localized description of the job.
        iscoCode:
          type: "string"
          description: |
            The International Standard Classification of Occupations (ISCO) code of the job.

            This field will be omitted if the job is not associated with an ISCO code.
        socCode:
          type: "string"
          description: |
            The Standard Occupational Classification (SOC) code of the job.

            This field will be omitted if the job is not associated with a SOC code.
        alternativeTitles:
          type: "array"
          items:
            type: "string"
          description: |
            List of alternative localized names for this job.
        essentialSkills:
          type: "array"
          items:
            $ref: "#/components/schemas/Skill"
          description: |
            List of essential skills for this job.
        optionalSkills:
          type: "array"
          items:
            $ref: "#/components/schemas/Skill"
          description: |
            List of optional skills for this job.
        remoteIndex:
          type: "number"
          description: |
            The Remote Index represents how readily a job can be done through remote work. The index ranges from 0 to 100, where a value of 100 means the job can be done entirely remotely.

            This field will be omitted if remotability is not applicable to the job.
        automationIndex:
          type: "integer"
          description: |
            The Automation Index represents how readily a job can be automated. The index ranges from 0 to 100, where a value of 100 means the job is completely automatable.

            This field will be omitted if automation is not applicable to the job.
      required:
        - "id"
        - "name"
        - "description"
        - "alternativeTitles"
        - "essentialSkills"
        - "optionalSkills"
    JobList:
      type: "array"
      items:
        type: "object"
        title: "JobEntry"
        properties:
          id:
            type: "string"
            description: |
              The unique ID of the job.
          name:
            type: "string"
            description: |
              The localized display name of the job.
          description:
            type: "string"
            description: |
              The localized description of the job.
        required:
          - id
          - name
          - description
    JobStandardizationInputSkills:
      description: |
        The custom job titles to standardize.
      type: "object"
      properties:
        jobs:
          type: "array"
          items:
            type: "string"
        naicsCode:
          type: "string"
          description: |
            The North American Industry Classification System (NAICS) code.

            If `naicsCode` is provided, the most relevant job titles associated with the naicsCode are returned first.
      required:
        - "jobs"
    JobStandardizationOutputSkills:
      type: "array"
      items:
        title: OutputEntry
        type: object
        properties:
          job:
            type: "string"
            description: |
              The custom job title input.
          matches:
            type: array
            description: |
              The top standardized job matches.
            items:
              type: object
              properties:
                id:
                  type: "string"
                  description: |
                    The unique ID of the job.
                name:
                  type: "string"
                  description: |
                    The localized display name of the job.
                description:
                  type: "string"
                  description: |
                    The localized description of the job.
                score:
                  type: "integer"
                  description: |
                    The score representing the confidence level of the match between the standardized job and the custom job title input. The score ranges from 0 to 100.
              required:
                - id
                - name
                - description
                - score
        required:
          - job
          - matches
    Skill:
      description: |
        The details describing a skill.
      type: "object"
      properties:
        id:
          type: "string"
          description: |
            The unique ID of the skill.
        name:
          type: "string"
          description: |
            The localized display name of the skill.
        description:
          type: "string"
          description: |
            The localized description of the skill.
        skillGroupId:
          type: "string"
          description: |
            ID of the skill group that this skill belongs to.
        skillCategoryId:
          type: "string"
          description: "ID of the skill category that this skill belongs to. \n"
        isKnowledge:
          type: "boolean"
          description: |
            Indicates whether the skill is a knowledge skill.
        skillType:
          type: "string"
          description: |
            The type of skill. Valid values are `Soft`, `Hard`, and `Unknown`.
        alternativeTitles:
          type: "array"
          items:
            type: "string"
          description: |
            List of alternative localized names for this skill.
        remoteIndex:
          type: "number"
          description: |
            The Remote Index represents how readily a skill can be done through remote work. The index ranges from 0 to 100, where a value of 100 means the skill can be done entirely remotely.

            This field will be omitted if remotability is not applicable to the skill.
        automationIndex:
          type: "integer"
          description: |
            The Automation Index represents how readily a skill can be automated. The index ranges from 0 to 100, where a value of 100 means the skill is completely automatable.

            This field will be omitted if automation is not applicable to the skill.
      required:
        - "id"
        - "name"
        - "description"
        - "skillGroupId"
        - "skillCategoryId"
        - "isKnowledge"
        - "skillType"
        - "alternativeTitles"
    SkillList:
      type: "array"
      items:
        type: "object"
        title: "SkillEntry"
        properties:
          id:
            type: "string"
            description: |
              The unique ID of the skill.
          name:
            type: "string"
            description: |
              The localized display name of the skill.
          description:
            type: "string"
            description: |
              The localized description of the skill.
        required:
          - id
          - name
          - description
    SkillGroup:
      description: |
        Details describing a skill group.
      type: "object"
      properties:
        id:
          type: "string"
          description: |
            The unique ID of the skill group.
        name:
          type: "string"
          description: |
            The localized display name of the skill group.
        description:
          type: "string"
          description: |
            The localized description of the skill group.
        skillCategoryId:
          type: "string"
          description: |
            ID of the parent skill category.
        skills:
          type: "array"
          items:
            $ref: "#/components/schemas/Skill"
          description: |
            List of skills under this skill group.
      required:
        - "id"
        - "name"
        - "description"
        - "skillCategoryId"
        - "skills"
    SkillGroupList:
      type: "array"
      items:
        type: "object"
        title: "SkillGroupEntry"
        properties:
          id:
            type: "string"
            description: |
              The unique ID of the skill group.
          name:
            type: "string"
            description: |
              The localized display name of the skill group.
          description:
            type: "string"
            description: |
              The localized description of the skill group.
        required:
          - id
          - name
          - description
    SkillCategory:
      description: |
        Details describing a skill category.
      type: "object"
      properties:
        id:
          type: "string"
          description: |
            The unique ID of the skill category.
        name:
          type: "string"
          description: |
            The localized display name of the skill category.
        description:
          type: "string"
          description: |
            The localized description of the skill category.
        skillGroups:
          type: "array"
          items:
            $ref: "#/components/schemas/SkillGroup"
          description: |
            List of skill groups under this skill category.
      required:
        - "id"
        - "name"
        - "description"
        - "skillGroups"
    SkillCategoryList:
      type: "array"
      items:
        type: "object"
        title: "SkillCategoryEntry"
        properties:
          id:
            type: "string"
            description: |
              The unique ID of the skill category.
          name:
            type: "string"
            description: |
              The localized display name of the skill category.
          description:
            type: "string"
            description: |
              The localized description of the skill category.
        required:
          - id
          - name
          - description
    SkillExtractionInput:
      description: |
        The text to extract skills from, such as a job description or course outline.
      type: object
      properties:
        content:
          type: string
          maxLength: 7500
          minLength: 4
          description: |
            The body of text to extract skills from.

            The maximum length is 7500 characters. The minimum length is 4 characters.
        languageCode:
          type: string
          description: |
            Identifies the language of the input text.

            Format: **ISO 639-1** language code. For a list of supported languages, see "Supported Languages" in the Skills Intelligence Engine API documentation.

            If no value is specified, the response language is used.
        limit:
          type: integer
          minimum: 1
          maximum: 50
          description: |
            The limit on the number of skills extracted from the text. The minimum is 1 and the maximum is 50 skills.

            If no value is specified, the default limit of 10 skills is used.
      required:
        - content
    SkillExtractionOutput:
      type: "array"
      items:
        title: ExtractedSkill
        type: object
        properties:
          id:
            type: "string"
            description: |
              The unique ID of the skill.
          name:
            type: "string"
            description: |
              The localized display name of the skill.
          description:
            type: "string"
            description: |
              The localized description of the skill.
          score:
            type: "integer"
            description: |
              The score representing the confidence level of the match between the extracted skill and the standardized skill in Visier’s Skills Library. The score ranges from 0 to 100.
        required:
          - id
          - name
          - description
          - score
    SkillMatchInput:
      description: |
        The skill set and the group of skill sets (targets) to be matched.
      type: object
      properties:
        skillSet:
          type: array
          minItems: 1
          uniqueItems: true
          items:
            oneOf:
              - type: string
              - type: integer
            minItems: 2
            maxItems: 2
            items:
              description: |
                The skills that make up the skill set to be matched. The skills included in each skill set are entered in the following format [skill_id, score]. The skill_id is the unique identifier of a skill in the Skills Library. The score represents how prevalent the skill was in the source and is used as a weighting factor when determining the best match.
          description: |
            The skills that make up the skill set that will be matched against a group of skill sets (targets).
          example:
            - - "21795"
              - 85
            - - "19391"
              - 50
            - - "21577"
              - 40
        targetSkillSets:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 1
            description: |
              The group of skill sets (targets) that is matched to the input skill set.
            items:
              type: array
              oneOf:
                - type: string
                - type: integer
              minItems: 2
              maxItems: 2
              items:
                description: |
                  The skills that make up the skill set to be matched. The skills included in each skill set are entered in the following format [skill_id, score]. The skill_id is the unique identifier of a skill in the Skills Library. The score represents how prevalent the skill was in the source and is used as a weighting factor when determining the best match.
          description: |
            A comma-separated list of strings that represent the group of skill sets (targets).
          example:
            - - - "21795"
                - 75
              - - "19391"
                - 70
              - - "21577"
                - 40
            - - - "15812"
                - 90
              - - "16835"
                - 88
              - - "30645"
                - 76
            - - - "21577"
                - 90
              - - "19391"
                - 67
              - - "19237"
                - 66
      required:
        - content
    SkillMatchOutput:
      type: array
      minItems: 1
      description: |
        Ranked list of the skill sets (targets) with the best match appearing at the top of the list. The integer value indicates the position of the target in the request body.
        list. The groups are ranked by the best matched skill set to worst matched skill set to the input 'skills' candidate.
      example:
        - 0
        - 2
        - 1
      items:
        type: integer
        description: The position of the target skill set in the request body. The number sequence starts at 0.
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: VisierASIDToken
      in: cookie
    ApiKeyAuth:
      type: apiKey
      name: apikey
      in: header
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /v1/auth/oauth2/authorize
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
        password:
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
    api_key:
      type: "apiKey"
      in: "header"
      name: "x-api-key"
      x-amazon-apigateway-api-key-source: "HEADER"
tags:
  - name: BasicAuthentication
    x-displayName: Basic Authentication
    description: |-
      Request an authentication token through basic authentication. With basic authentication, use your username and password to request a secure token. The response returns an ASID token that you can use in your API calls.
  - name: OAuth2
    x-displayName: OAuth 2.0
    description: "Request an authentication token through OAuth 2.0 with Open ID Connect (OIDC). With OAuth 2.0 with OIDC, use an OAuth 2.0 grant to request an authentication token. \nThe response returns a JSON Web Token (JWT) that you can use in your API calls."
  - name: DirectDataIntake
    x-displayName: Direct Data Intake
    description: |-
      Use the Direct Data Intake API to load data directly into Visier objects. These objects can be delivered as part of Visier Blueprint, locally modified objects, or even completely custom objects. Objects must be released to production to receive data through the DDI API.
      You can load data into:
      - Subjects
      - Events
      - Parent-child dimensions
      - Multi-value properties
  - name: DataIntake
    x-displayName: Data Intake
    description: |-
      Send raw or untransformed data to Visier. After we receive the data, Visier runs business rules to transform your data into the expected format for the existing mappings.
      <br>**Note:** <em>This API is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
  - name: DataAndJobHandling
    x-displayName: Data and Job Handling
    description: |-
      Initiate and manage jobs, included or excluded data, and data connector credentials. Administrating tenant users can manage jobs and data for their analytic tenants.
  - name: PGPKeys
    x-displayName: PGP Keys
    description: |-
      The Pretty Good Privacy (PGP) Keys API generates key pairs and provides a public key to encrypt data that you send to Visier. PGP encryption adds an additional layer of security against data disclosure.
      <br><br>After you generate a key pair and retrieve the public encryption key, you can encrypt your data files before sending them to Visier. When Visier receives files encrypted with the public key, we retrieve the associated private key to decrypt and process the file.
  - name: PlanningDataLoad
    x-displayName: Planning Data Load
    description: |-
      Send data directly to your plan's scenario and optionally add or remove rows from your plan.
  - name: DataUpload
    x-displayName: Data Upload
    description: |-
      Send data files to Visier. After we receive the data, Visier starts a receiving job and a processing job to process the data.
  - name: DataQuery
    x-displayName: Data Query
    description: |-
      Query against your data in Visier to get aggregate and list data.
  - name: DataVersionExport
    x-displayName: Data Version Export
    description: |-
      Export Visier data version information, such as tables, columns, and file information, in CSV format.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Vee
    description: |-
      Use Vee through Visier APIs, such as asking questions, submitting feedback, and getting sample questions.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Search
    description: |-
      Search for documents, such as analyses, in Visier.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: SourceFilesDownload
    x-displayName: Source Files Download
    description: |-
      Download a tenants source files.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Reporting
    description: |-
      Create, retrieve, delete, copy, and download reports.
      <br>**Note**: This API is available for Embedded Partners.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Projects
    description: |-
      Create projects, publish projects, and retrieve project details.
  - name: ProductionVersions
    x-displayName: Production Versions
    description: |-
      Use this API to retrieve information about data versions that were published to production.
      In Visier, production is the version of Visier available to your end users.
  - name: UsersV2
    x-displayName: Users V2
    description: |-
      Manage users in bulk, such as creating, updating, and deleting many users.
      <br>**Tip:** Visier recommends that administrating tenant users focus primarily on managing users at the administrating tenant level. These users likely belong directly to your organization, such as customer support, customer value managers, account executives, and customer success. These users work with clients to manage their day-to-day solution needs.
  - name: UserGroupsV2
    x-displayName: User Groups V2
    description: |-
      Manage user groups in Visier, such as creating, updating, and deleting user groups in bulk.
  - name: UsersV1
    x-displayName: Users V1
    description: |-
      Manage users within an organization, such as assigning permissions to users and retrieving user permission assignments and application logs.
      <br>**Tip:** Visier recommends that administrating tenant users focus primarily on managing users at the administrating tenant level. These users likely belong directly to your organization, such as customer support, customer value managers, account executives, and customer success. These users work with clients to manage their day-to-day solution needs
  - name: Profiles
    description: |-
      Manage the profiles assigned to users, such as assigning or removing a profile from a list of users and retrieving profile details. Administrating tenant users can manage profiles at the administrating tenant level and analytic tenant level.
  - name: Permissions
    description: |-
      Manage permissions in Visier, such as retrieving the details of a permission, content package, or data access set, creating new permissions and data access sets, and updating or deleting permissions. To assign permissions to users, see Users V1.
  - name: TenantsV2
    x-displayName: Tenants V2
    description: |-
      Create analytic tenants, deprovision tenants, retrieve tenant information, and update tenant information. Tenants V2 improves upon Tenants V1 in the following ways:
        * Programmatically assign a Home analysis to your analytic tenants.
        * Specify whether to merge or replace values when updating the details of an analytic tenant.
        * Specify the property fields to include in the response for GET requests.
  - name: TenantsV1
    x-displayName: Tenants V1
    description: |-
      Create analytic tenants, retrieve tenant information, and validate metric values.
  - name: ConsolidatedAnalytics
    x-displayName: Consolidated Analytics
    description: |-
      Manage your consolidated analytics (CA) tenants in Visier, such as retrieving the details of CA tenants, creating CA tenants, adding or deleting source tenants from CA tenants, and excluding sources from CA tenants.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Sources
    description: |-
      Export and import sources in Visier.
      <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: SystemStatus
    x-displayName: System Status
    description: |-
      Check the health and status of Visier's platform and services.
  - name: EmailDomains
    x-displayName: Email Domains
    description: |-
      Manage the list of user email address domains that are allowed in your tenant.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: EncryptionKeys
    x-displayName: Encryption Keys
    description: |-
      Manage the encryption keys in your Visier tenant. Administrating tenants can specify the tenant in which to manage keys using the `TargetTenantID` header. For PGP keys, see `/v1/api/pgp-keys`.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: NetworkSubnets
    x-displayName: Network Subnets
    description: |-
      Manage the IP addresses that can call Visier APIs.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: ReleaseVersionConfiguration
    x-displayName: Release Versions
    description: |-
      Manage the Visier product release versions for your tenants.
      <br>**Note:** <em>This API is available for Embedded Partners.</em>
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: DataModel
    x-displayName: Data Model
    description: |-
      Discover the objects that make up your Visier solution and provide detailed information on the object's schema.
      You can retrieve detailed information about objects in Visier by retrieving a list of all objects or retrieving information about an object by object ID.
      The types of objects you can retrieve using the data model API are:
        * Analytic objects
        * Properties
        * Dimensions
        * Selection concepts
        * Metrics
        * Predictions
  - name: ObjectConfiguration
    x-displayName: Object Configuration
    description: |-
      Manage objects in your analytic model.
  - name: ConceptsV2
    x-displayName: Concepts V2
    description: |-
      Create, retrieve, update, and delete concepts in your analytic model. You can create, update, and delete one or more concepts in an API call.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: DimensionsV2
    x-displayName: Dimensions V2
    description: |-
      Create, retrieve, update, and delete dimensions in your analytic model. You can create, update, and delete one or more dimensions in an API call.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Webhooks
    x-displayName: Webhooks
    description: |-
      Create, manage, and retrieve webhook definitions. Use webhooks to register your own HTTPS endpoints with Visier and listen for specific events. When these events occur, Visier sends an API request to your registered endpoint. For example, you can create a webhook to monitor job status events with Visier. Visier sends you a success or failure notification to your registered endpoint after the job completes.

      <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Benchmarks
    description: |
      Get benchmark values.
  - name: Dimensions
    description: "Discover dimensions and members.\n\nA dimension organizes unique values of an attribute into a list or a hierarchical structure of members. \nThe structure can be navigated to discover the members, and the members can be used to look up benchmark values.\n"
  - name: Jobs Library
    description: |
      Access over 3,300 standard jobs and get complete details in 27 languages, such as alternative titles, descriptions, and skills.
  - name: Skills Library
    description: |
      Access over 14,000 skills and get complete skill details in 27 languages, such as alternative titles, descriptions, and hierarchies.
x-tagGroups:
  - name: authentication
    tags:
      - BasicAuthentication
      - OAuth2
  - name: data in
    tags:
      - DirectDataIntake
      - DataIntake
      - DataAndJobHandling
      - PGPKeys
      - PlanningDataLoad
      - DataUpload
  - name: data out
    tags:
      - DataQuery
      - DataVersionExport
      - Vee
      - Search
      - SourceFilesDownload
      - Reporting
  - name: administration
    tags:
      - Projects
      - ProductionVersions
      - UsersV2
      - UserGroupsV2
      - UsersV1
      - Profiles
      - Permissions
      - TenantsV2
      - TenantsV1
      - ConsolidatedAnalytics
      - Sources
      - SystemStatus
      - EmailDomains
      - EncryptionKeys
      - NetworkSubnets
      - ReleaseVersionConfiguration
  - name: analytic model
    tags:
      - DataModel
      - ObjectConfiguration
      - ConceptsV2
      - DimensionsV2
  - name: webhooks
    tags:
      - Webhooks
  - name: compensation benchmarks
    tags:
      - Benchmarks
      - Dimensions
  - name: skills intelligence
    tags:
      - Jobs Library
      - Skills Library
security:
  - ApiKeyAuth: []
    BearerAuth: []
  - ApiKeyAuth: []
    CookieAuth: []
  - ApiKeyAuth: []
    OAuth2Auth: []
x-amazon-apigateway-gateway-responses:
  MISSING_AUTHENTICATION_TOKEN:
    statusCode: 404
    responseParameters: {}
    responseTemplates:
      application/json: "{\"errorCode\":\"USER_INPUT_ERROR\",\"message\":\"Resource not found\",\"rci\":\"RCI9000001\"}"
  DEFAULT_4XX:
    statusCode: 500
    responseParameters: {}
    responseTemplates:
      application/json: "{\"errorCode\":\"INTERNAL_SERVER_ERROR\",\"message\":\"Internal server error\",\"rci\":\"RCI9000002\"}"
  DEFAULT_5XX:
    statusCode: 500
    responseParameters: {}
    responseTemplates:
      application/json: "{\"errorCode\":\"INTERNAL_SERVER_ERROR\",\"message\":\"Internal server error\",\"rci\":\"RCI9000003\"}"
