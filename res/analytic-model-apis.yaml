# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
  title: Visier Analytic Model APIs
  description: Visier APIs for retrieving and configuring your analytic model in Visier.
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 22222222.99201.1607
paths:
  /v1/admin/calculation-concepts:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve all calculation concepts
      description: Retrieve the calculation concepts available in production.
      operationId: ObjectConfiguration_GetCalculationConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculationConceptListDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/calculation-concepts/{conceptId}:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve the configuration of a calculation concept
      description: Retrieve the configuration details of a calculation concept in production.
      operationId: ObjectConfiguration_GetCalculationConcept
      parameters:
        - name: conceptId
          in: path
          description: The ID of the concept to retrieve the configuration for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalculationConceptDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/calculation-concepts/{conceptId}/configure:
    put:
      tags:
        - ObjectConfiguration
      summary: Map dimension members to nodes in a calculation concept
      description: |-
        Map dimension members to nodes in a calculation concept.
         The changes are applied in a new project and published to production.

         The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in
         the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
      operationId: ObjectConfiguration_MapCalculationConcept
      parameters:
        - name: conceptId
          in: path
          description: The UUID of the concept to configure.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculationConceptConfigurationMapDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptConfigurationResultDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/selection-concepts:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve all selection concepts
      description: Retrieve the selection concepts available in production.
      operationId: ObjectConfiguration_GetSelectionConcepts
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptListDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/selection-concepts/{conceptId}:
    get:
      tags:
        - ObjectConfiguration
      summary: Retrieve the configuration of a selection concept
      description: Retrieve the configuration details of a selection concept in production.
      operationId: ObjectConfiguration_GetSelectionConcept
      parameters:
        - name: conceptId
          in: path
          description: The ID of the concept to retrieve the configuration for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/selection-concepts/{conceptId}/configure:
    put:
      tags:
        - ObjectConfiguration
      summary: Map dimension members to a selection concept
      description: |-
        Map dimension members to a selection concept.
         The changes are applied to a new project and published to production.

         The body of this API is the source of truth for dimension members mapped to the concept. For example, if a node in
         the body does not have any dimension members, all existing dimension members mapped to that node will be removed.
      operationId: ObjectConfiguration_MapSelectionConcept
      parameters:
        - name: conceptId
          in: path
          description: The UUID of the concept to configure.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelectionConceptConfigurationMapDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptConfigurationResultDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of analytic objects
      description: Retrieve all the analytic objects in your Visier solution.
      operationId: DataModel_AnalyticObjects
      parameters:
        - name: id
          in: query
          description: The IDs of the analytic objects to retrieve. Default is all analytic objects.
          schema:
            type: array
            items:
              type: string
        - name: objectType
          in: query
          description: The object type to filter the returned analytic objects by.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticObjectsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object by ID
      description: If you know the ID of an analytic object, use this API to retrieve that object specifically.
      operationId: DataModel_AnalyticObject
      parameters:
        - name: id
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticObjectDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{id}/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of metrics for an analytic object by ID
      description: If you know the ID of an analytic object, use this API to retrieve metrics for that object specifically.
      operationId: DataModel_AnalyticMetrics
      parameters:
        - name: id
          in: path
          description: The ID of the analytic object to retrieve metrics for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of dimensions
      description: Retrieve a list of dimensions for a specific analytic object.
      operationId: DataModel_Dimensions
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the dimensions to retrieve. Default is all dimensions.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/mappings/validate:
    post:
      tags:
        - DataModel
      summary: Validate a member map's unmapped dimension members by ID
      description: "If you know the ID of a member map, use this API to validate one of the member map's dimensions. \n You must also know the dimension's ID and the analytic object's ID. \n The response returns the member map ID, the requested dimension ID, a list of the dimension's unmapped members, and a list of errors found."
      operationId: DataModel_DimensionMemberMapValidation
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object.
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of a dimension of the member map.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DimensionMappingValidationExecutionDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionMappingValidationDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/members:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of dimension members
      description: |-
        If you know the ID of a dimension, use this API to retrieve the members of that dimension specifically. You must
         also know the analytic object's ID. Dimension members exist in a hierarchy. The levels in the hierarchy may be
         fixed or non-uniform. Leveled dimensions have fixed hierarchies, while parent-child dimensions have non-uniform
         levels. When you retrieve dimension members with this API, the response returns the level of the dimension and the
         path to get to that level. For example, in a Location dimension, Vancouver is 3 levels deep:

         - All > Canada > British Columbia > Vancouver

         Parent-child hierarchies are non-uniform and exhibit distinct characteristics such as time dependence and data
         attributes. These traits reflect the dynamic nature of hierarchies, for example, organizational hierarchies. The API
         response includes elements that express the validity ranges for retrieved members.
      operationId: DataModel_Members
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object.
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of the dimension.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the members to retrieve. Default is all members.
          schema:
            type: array
            items:
              type: string
        - name: maxLevel
          in: query
          description: The maximum level in the hierarchy to fetch. The top level of the hierarchy is 0. Default is all levels.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: A regular expression that members must match to be retrieved. Default is to retrieve all members.
          schema:
            type: string
        - name: field
          in: query
          description: |-
            Indicates the aspect of the member to apply the filter to. Possible values are:
             - **id**: Match the filter to the member ID.
             - **display**: Match the filter to the member's display name.
             - **either**: Match the filter to the member ID or display name.

             Default is `id`.
          schema:
            type: string
        - name: includeDataMembers
          in: query
          description: Indicates whether data members are included in the response. Parent-child dimensions only. Default is `false`.
          schema:
            type: boolean
        - name: offset
          in: query
          description: For paginated member requests against high-cardinality dimensions, the offset of the first member to retrieve. Default is 0. If the `offset` value is specified to a non-default value, all other non-pagination parameters are ignored.
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: For paginated member requests against high-cardinality dimensions, the maximum number of members to retrieve. Default is -1, meaning no limit. If the `limit` value is specified to a non-default value, all other non-pagination parameters are ignored.
          schema:
            type: integer
            format: int32
        - name: sortType
          in: query
          description: |-
            The order of the members in the response. Valid values:
             - **configured**: Sorts the members according to their configuration; for example, the configured order of dimension members in the studio experience.
             - **natural**: Sorts the members by their natural order; for example, sorted in ascending order by level in a parent-child dimension.

             Default is `natural`.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/members/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a dimension member
      description: If you know the ID of a dimension member, use this API to retrieve that dimension member specifically. You must also know the dimension's ID and the analytic object's ID.
      operationId: DataModel_Member
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object.
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of the dimension.
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Id
          in: query
          description: The ID of the member to retrieve.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a dimension by ID
      description: If you know the ID of a dimension, use this API to retrieve that dimension specifically. You must also know the analytic object's ID.
      operationId: DataModel_Dimension
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the dimension to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/properties:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of properties
      description: Retrieve a list of properties for a specific analytic object.
      operationId: DataModel_Properties
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the properties to retrieve. Default is all properties.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/properties/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a property by ID
      description: If you know the ID of a property, use this API to retrieve that property specifically. You must also know the analytic object's ID..
      operationId: DataModel_Property
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the property to retrieve.
          required: true
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/selection-concepts:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object's selection concepts
      description: Retrieve a list of selection concepts for a specific analytic object.
      operationId: DataModel_SelectionConcepts
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the selection concepts to retrieve. Default is all selection concepts.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/selection-concepts/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object's selection concept by ID
      description: If you know the ID of a selection concept, use this API to retrieve that selection concept specifically. You must also know the analytic object's ID.
      operationId: DataModel_SelectionConcept
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the selection concept to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies:
    get:
      tags:
        - DataModel
      summary: Retrieve all currencies
      description: Retrieve all the available currencies in your Visier solution.
      operationId: DataModel_Currencies
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrenciesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a currency
      description: Retrieve a specific currency if you know the currency code.
      operationId: DataModel_Currency
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies/{id}/rates:
    get:
      tags:
        - DataModel
      summary: Retrieve all exchange rates for a currency
      description: |-
        Retrieve exchange rates for a specific currency from Visier.
         You can optionally specify query parameter options for the returned rates, such as the number of decimals to round the exchange rate to.
      operationId: DataModel_CurrencyRates
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency to get rates for.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: The earliest time instant to retrieve exchange rates from. Default is to use 0 milliseconds.
          schema:
            type: string
        - name: endTime
          in: query
          description: The latest time instant to retrieve exchange rates from. Default is to use the time of this request in milliseconds.
          schema:
            type: string
        - name: decimals
          in: query
          description: The number of decimals to round exchange rates to. Default is to round to 2 decimal places.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyRatesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies/{id}/rates/{toId}:
    get:
      tags:
        - DataModel
      summary: Retrieve exchange rates from one currency to another currency
      description: |-
        Retrieve exchange rates from a specific currency to another specific currency.
         You can optionally specify query parameter options for the returned rates, such as the number of decimals to round the exchange rate to.
      operationId: DataModel_CurrencyRatesWithToCurrency
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency to convert from.
          required: true
          schema:
            type: string
        - name: toId
          in: path
          description: The ISO 4217 3-letter code for the currency to convert to.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: The earliest time instant to retrieve exchange rates from. Default is to use 0 milliseconds.
          schema:
            type: string
        - name: endTime
          in: query
          description: The latest time instant to retrieve exchange rates from. Default is to use the time of this request in milliseconds.
          schema:
            type: string
        - name: decimals
          in: query
          description: The number of decimals to round exchange rates to. Default is to round to 2 decimal places.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyRatesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/dimensions:
    patch:
      tags:
        - DataModel
      summary: Update dimensions
      description: |-
        Change the display name, short display name, and description of one or more dimensions. This API supports updating leveled dimensions.
         In each API request, update up to 10 dimensions per tenant with a maximum of 500 tenants.
      operationId: DataModel_UpdateDimensions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DimensionsChangeDefinitionsDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsBulkChangeResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of metrics
      description: Retrieve all the metrics in your Visier solution.
      operationId: DataModel_Metrics
      parameters:
        - name: id
          in: query
          description: The IDs of the metrics to retrieve. Default is all metrics.
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          description: The category to filter the returned metrics by.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric by ID
      description: If you know the ID of a metric, use this API to retrieve that metric specifically.
      operationId: DataModel_Metric
      parameters:
        - name: id
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics/{metricId}/dimensions:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric's dimensions
      description: Retrieve a list of dimensions for a specific metric.
      operationId: DataModel_MetricDimensions
      parameters:
        - name: metricId
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the dimensions to retrieve. Default is all dimensions.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics/{metricId}/selection-concepts:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric's selection concepts
      description: Retrieve a list of selection concepts for a specific metric.
      operationId: DataModel_MetricSelectionConcepts
      parameters:
        - name: metricId
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the selection concepts to retrieve. Default is all selection concepts.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of planning models
      description: Retrieve all the planning models you have access to.
      operationId: DataModel_PlanningModels
      parameters:
        - name: id
          in: query
          description: The IDs of the planning models to retrieve. Default is all models.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningModelsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a planning model by ID
      description: Retrieve a specific planning model you have access to.
      operationId: DataModel_PlanningModel
      parameters:
        - name: id
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningModelDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{id}/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve metrics by planning model ID
      description: Retrieve all the metrics you have access to for a planning model.
      operationId: DataModel_PlanningMetrics
      parameters:
        - name: id
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{modelId}/plans:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of plans by planning model ID
      description: Retrieve all the plans you have access to for a planning model.
      operationId: DataModel_PlanningPlans
      parameters:
        - name: modelId
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the plans to retrieve. Default is all plans.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningPlansDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{modelId}/plans/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a plan by planning model ID and plan ID
      description: Retrieve a specific plan that you have access to in a planning model.
      operationId: DataModel_PlanningPlan
      parameters:
        - name: modelId
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the plan to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningPlanDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/predictions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of predictions
      description: Retrieve all the predictions in your Visier solution.
      operationId: DataModel_Predictions
      parameters:
        - name: id
          in: query
          description: The IDs of the predictions to retrieve. Default is all predictions.
          schema:
            type: array
            items:
              type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/predictions/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a prediction by ID
      description: If you know the ID of a prediction, use this API to retrieve that prediction specifically.
      operationId: DataModel_Prediction
      parameters:
        - name: id
          in: path
          description: The ID of the prediction to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/properties:
    patch:
      tags:
        - DataModel
      summary: Update properties
      description: Change the display name, short display name, and description of one or more properties. In each API request, update up to 10 properties per tenant with a maximum of 500 tenants.
      operationId: DataModel_UpdateProperties
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertiesChangeDefinitionsDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectsBulkChangeResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1alpha/planning/model/plans:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of plans
      description: "Retrieve all the plans you have access to. The response returns plan information you can use to call the Planning Data Load API.\n \n <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.\n If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>"
      operationId: DataModel_PlanDataLoadlList
      parameters:
        - name: displayName
          in: query
          description: Returns plans that match the specified display name. Ignores text case and includes partial matches. For example, `displayName=WFP Plan` returns plans named "WFP Plan 2024", "WFP plan v1", and "WFP plan - Product".
          schema:
            type: string
        - name: model
          in: query
          description: Returns plans that belong to the specified planning model ID.
          schema:
            type: string
        - name: planStatus
          in: query
          description: |-
            Returns plans with the specified plan status. Valid values:
             - **ASSIGNED**: The subplan has been assigned to a subplanner.
             - **IN_PROGRESS**: The subplanner has opened the subplan.
             - **OVERDUE**: The subplan was not completed on time.
             - **SUBMITTED**: The subplan has been submitted for review.
             - **SENT_BACK**: The subplan was rejected and returned to the subplanner for editing.
             - **CONSOLIDATED**: The subplan has been accepted and combined into the primary plan.
          schema:
            type: string
        - name: createdStart
          in: query
          description: Returns plans created on or after this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: createdEnd
          in: query
          description: Return plans created on or before this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: editedStart
          in: query
          description: Returns plans edited on or after this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: editedEnd
          in: query
          description: Returns plans edited on or before this date. The format is YYYY-MM-DD.
          schema:
            type: string
        - name: orderBy
          in: query
          description: |-
            Orders plan results by the specified value. Valid values:
             - **LAST_EDITED_DATE**: Orders plans by the last edited date. This is the default.
             - **CREATED_DATE**: Orders plans by the creation date.
             - **PLAN_MODEL**: Orders plans alphabetically by planning model.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: Sorts plan results by the specified value. Valid values are `ASCENDING` or `DESCENDING`. Default is `DESCENDING`.
          schema:
            type: string
        - name: excludeSubplans
          in: query
          description: If `true`, the response doesn't return subplans. Default is `true`.
          schema:
            type: boolean
        - name: maxResults
          in: query
          description: Sets the maximum number of results to return per page. Default is 50.
          schema:
            type: string
        - name: page
          in: query
          description: Sets the results page to return. If undefined, returns the first 50 results. To get the next 50 results, specify `page=2`.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPlanListResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1alpha/planning/model/plans/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a plan's details
      description: "Retrieve the details of a specific plan. The response returns plan information you can use to call the Planning Data Load API.\n  \n <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.\n If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>"
      operationId: DataModel_PlanInfoWithSchema
      parameters:
        - name: id
          in: path
          description: The unique identifier of the plan.
          required: true
          schema:
            type: string
        - name: withSchema
          in: query
          description: If `true`, the response returns the plan's schema. Default is `false`.
          schema:
            type: boolean
        - name: segmentIdFilter
          in: query
          description: If defined, returns segment levels and members for the specified segment.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanWithSchemaDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
components:
  schemas:
    AggregationTypeOptionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter option.
        displayName:
          type: string
          description: The localized display name of the parameter option.
        propertyName:
          type: string
          description: The property name of the parameter option.
        aggregationFunction:
          type: string
          description: The aggregation function of the parameter option.
        isDefault:
          type: boolean
          description: '`true` if the parameter option is the default one and `false` otherwise.'
      description: The definition of an aggregation option.
    AggregationTypeParameterDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter.
        displayName:
          type: string
          description: The localized display name of the parameter.
        description:
          type: string
          description: The localized description of the parameter.
        parameterOptions:
          type: array
          items:
            $ref: '#/components/schemas/AggregationTypeOptionDTO'
          description: The options defined for the parameter.
      description: |-
        The definition of an aggregation parameter. These parameters resolve metrics that use aggregation parameters.
         For example, Visier Benchmarks metrics often use aggregation parameters to enable callers to aggregate metric values according to their average or different percentiles.
    AnalyticObjectDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the analytic object.
             Note: See `AnalyticObjects` to get the ID.
        displayName:
          type: string
          description: The localized display name of the analytic object.
        description:
          type: string
          description: The localized description of the analytic object.
        type:
          enum:
            - SUBJECT
            - EVENT
            - OVERLAY
          type: string
          description: 'The analytic object type: SUBJECT, EVENT, or OVERLAY.'
          format: enum
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this analytic object.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this analytic object.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        propertyIds:
          type: array
          items:
            type: string
          description: A list of strings representing IDs of the properties that belong to this analytic object.
        dimensionIds:
          type: array
          items:
            type: string
          description: A list of strings representing IDs of the dimensions that belong to this analytic object.
        selectionConceptIds:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing IDs of the selection concepts that belong to this analytic object.
             Note: If there are no selection concepts, this field is omitted.
        objectReferences:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReferenceDTO'
          description: |-
            A list of references from this analytic object to other analytic objects.
             Note: If there are no references, this field is omitted.
        populationConfiguration:
          allOf:
            - $ref: '#/components/schemas/PopulationConfigurationDTO'
          description: |-
            A set of property and dimension references configured by Visier or an administrator to tell the platform what
             properties and dimensions to use when doing population insight calculations. These are the distinguishing
             properties, change history properties, and grouping dimensions to use in AI insights. This field is optional and
             is only available for subjects.
      description: Analytic objects are the various items that users can analyze in Visier. Analytic objects include subjects, events, and overlays.
    AnalyticObjectFilterDTO:
      type: object
      properties:
        analyticObjectUuid:
          type: string
          description: The UUID of the analytic object used in the selection concept.
        symbolName:
          type: string
          description: The symbol name of the analytic object.
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionFilterDTO'
          description: A list of dimensions included in the concept.
    AnalyticObjectsDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticObjectDTO'
      description: A collection of analytic objects
    CalculationConceptConfigurationDTO:
      type: object
      properties:
        perspectives:
          type: array
          items:
            $ref: '#/components/schemas/PerspectiveConfigurationDTO'
          description: A list of objects representing the perspectives in the calculation concept.
    CalculationConceptConfigurationMapDTO:
      type: object
      properties:
        perspectivesToMap:
          type: array
          items:
            $ref: '#/components/schemas/PerspectiveConfigurationDTO'
          description: A list of objects representing the list of perspectives in the calculation concept.
      description: The configuration to apply to the concept.
    CalculationConceptDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The unique identifier associated with the calculation concept.
        name:
          type: string
          description: The display name of the calculation concept.
        configuration:
          allOf:
            - $ref: '#/components/schemas/CalculationConceptConfigurationDTO'
          description: A list of objects representing the configuration for the calculation concept.
    CalculationConceptListDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/CalculationConceptDTO'
          description: A list of objects representing calculation concepts.
    ConceptConfigurationResultDTO:
      type: object
      properties:
        conceptId:
          type: string
          description: The unique identifier of the configured concept.
        projectId:
          type: string
          description: The unique identifier of the system-generated project.
        message:
          type: string
          description: A meaningful message about the API result.
    CurrenciesDTO:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyDTO'
      description: A collection of currencies.
    CurrencyDTO:
      type: object
      properties:
        currencyCode:
          type: string
          description: The ISO 4217 3-letter code for the currency.
        displayName:
          type: string
          description: The display name for the currency.
        symbol:
          type: string
          description: The symbol name for the currency.
        shortSymbol:
          type: string
          description: |-
            The shortened symbol name for the currency.
             Removes all alphabetic characters. If **symbol** only has alphabetic characters, **shortSymbol** is empty.
             If **symbol** contains only non-alphabetic characters, **shortSymbol** is the same as **symbol**.
             For example, if **symbol** is CA$, **shortSymbol** is $. If **symbol** is $, then **shortSymbol** is $.
      description: Information about a currency type.
    CurrencyRateDTO:
      type: object
      properties:
        fromCurrencyCode:
          type: string
          description: |-
            The currency to convert **from**.
             **Note:** If USD is the `fromCurrencyCode`, you are retrieving the exchange rates from USD to a different currency.
        toCurrencyCode:
          type: string
          description: |-
            The currency to convert **to**.
             **Note:** If USD is the `toCurrencyCode`, you are retrieving the exchange rates from a different currency to USD.
        rate:
          type: number
          description: |-
            The numeric value of the exchange rate.
             **Note:** If **decimals** is specified, rate rounds to that value. If **decimals** is undefined, **rate** rounds to 2 significant figures after the decimal point.
          format: double
        startTime:
          type: string
          description: |-
            The earliest time instant to retrieve exchange rates from.
             **Note:** Format is the number of milliseconds since Jan 1, 1970 12:00 AM UTC.
        endTime:
          type: string
          description: |-
            The latest time instant to retrieve exchange rates from.
             **Note:** Format is the number of milliseconds since Jan 1, 1970 12:00 AM UTC.
      description: Information about a currency exchange rate.
    CurrencyRatesDTO:
      type: object
      properties:
        currencyRates:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyRateDTO'
      description: |-
        A collection of currency exchange rates.
         Note: Currencies may have different exchange rates in different time intervals, depending what rate data is stored in Visier.
         For example, USD:CAD can be 1.2 between January 1 - March 1, while USD:EUR can be 0.92 between January 1 - February 1, but 0.88 between February  1 - March 1.
    DimensionChangeDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the dimension; for example, `Career_Level` or `Employee.Vaccination_Status`
        displayName:
          type: string
          description: The user-friendly name for the dimension.
        shortDisplayName:
          type: string
          description: A shortened version of the display name. If the dimension is visible in the solution experience, this name is displayed in visualization titles.
        description:
          type: string
          description: A short description of the dimension. Descriptions provide in-context help for your users while working in Visier.
    DimensionChangeDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the tenant in which to update dimensions.
        projectId:
          type: string
          description: To make changes in a project, specify a project ID.
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionChangeDefinitionDTO'
          description: The list of dimensions to update.
    DimensionDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the dimension.
             Note: See `Dimensions` to get the ID`.
        displayName:
          type: string
          description: The localized display name of the dimension.
        description:
          type: string
          description: The localized description of the dimension.
        levels:
          type: array
          items:
            $ref: '#/components/schemas/LevelDTO'
          description: 'The levels defined for the dimension. Note: For parent-child dimensions, a level name is generated by Visier.'
        unknownMember:
          type: array
          items:
            type: string
          description: The optional path to the unknown member, if defined.
        memberCount:
          type: integer
          description: The total number of members for the dimension, excluding the (All) member.
          format: int32
        visibleInApp:
          type: boolean
          description: '`true` if this dimension is set to be visible in your solution.'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagMapElementDTO'
          description: The optional collection of tags defined for this element.
        explanation:
          type: string
          description: The localized explanation of the dimension.
      description: A dimension organizes unique values of an attribute into a list or a hierarchical structure for use as a filter or group-by in your solution.
    DimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The UUID of the dimension.
        symbolName:
          type: string
          description: The symbol name of the dimension.
        dimensionMembers:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberDTO'
          description: |-
            A list of dimension members to map to the perspective node.

             Note: If this array is empty, all dimension members will be removed for the node.
    DimensionMappingValidationDTO:
      type: object
      properties:
        dimensionMapId:
          type: string
        dimensionId:
          type: string
        unmappedMembers:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
        failures:
          type: array
          items:
            type: string
    DimensionMappingValidationExecutionDTO:
      type: object
      properties:
        memberMapId:
          type: string
          description: memberMapId == dimensionMapId
        analyticObject:
          type: string
          description: the analytic object associated with the dimension map
      description: Instruction to execute a mapping validation query
    DimensionMemberDTO:
      type: object
      properties:
        dimensionMember:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the dimension members. Dimension members in a hierarchical dimension
             will have an array with multiple strings.
    DimensionMemberReferenceDTO:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the members within a dimension path. For example, a dimension for Location
             may have the paths "Canada, BC, Vancouver" and "US, California, San Francisco".
      description: The members of a dimension.
    DimensionReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the dimension. See `Dimensions` to get the ID.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the dimension in Visier, such as the analytic object or event the dimension is
             associated with. If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a dimension to query.
    DimensionsChangeDefinitionsDTO:
      type: object
      properties:
        dimensionsByTenant:
          type: array
          items:
            $ref: '#/components/schemas/DimensionChangeDefinitionsByTenantDTO'
          description: The dimension updates to make in each tenant.
    DimensionsDTO:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionDTO'
      description: A collection of dimensions.
    GetPlanListResponseDTO:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanInfoDTO'
          description: A list of plans accessible to the user.
        page:
          type: integer
          description: The current page number of results that the user is viewing.
          format: int32
      description: A collection of plans.
    GoogleProtobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the serialized message.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
    LevelDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of a level within a dimension.
        displayName:
          type: string
          description: The localized display name of the dimension.
        depth:
          type: integer
          description: The level depth of the dimension.
          format: int32
      description: Levels are the hierarchical structure of members within a dimension.
    MemberDTO:
      type: object
      properties:
        fullName:
          type: string
          description: The fully qualified name of the member. This is the dimension's object name and the member's display name, separated by a period.
        displayName:
          type: string
          description: The localized display name of the member.
        level:
          type: integer
          description: The numeric level of the hierarchy the member belongs to.
          format: sint32
        path:
          type: array
          items:
            type: string
          description: A comma-separated list of identifiers that reference members on the query axis as part of dimensionMemberSelection.
        validityRanges:
          type: array
          items:
            $ref: '#/components/schemas/ValidityRangeDTO'
          description: The validity ranges that exist for this member.
        displayNamePath:
          type: array
          items:
            type: string
          description: The display names for each level in the member's ancestral path.
      description: |-
        A member is an element of a dimension. Dimension members are organized hierarchically. For example, Argentina is
         a member of the Location dimension at the Country level of the hierarchy Region > Country > Province > City.
    MemberParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the member parameter.
        displayName:
          type: string
          description: The localized display name of the member parameter.
        description:
          type: string
          description: The localized description of the member parameter.
        dimensionId:
          type: string
          description: The unique ID of the dimension on which the member parameter is based.
        referencePath:
          type: array
          items:
            type: string
          description: The analytic object reference path from the metric to the dimension.
        default:
          allOf:
            - $ref: '#/components/schemas/MemberValuesDTO'
          description: The default value if the end user does not select a member at run time.
      description: The definition of a filter parameter. These elements are returned as part of the definition for metrics that include parameters in their definition.
    MemberValuesDTO:
      type: object
      properties:
        included:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
          description: The unique IDs of members to include when evaluating the metric.
        excluded:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
          description: The unique IDs of members to exclude when evaluating the metric.
      description: |-
        Member filter values are discrete member references in a dimension filter. You can define
         included and excluded members simultaneously. This is typically done with filtering applied on
         dimensions with multiple levels. For example, a Location parameter may include “South
         America” and exclude “Brazil” which results in the metric being evaluated for all South American
         countries except Brazil.
    MembersDTO:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDTO'
      description: A collection of members.
    MetricDTO:
      type: object
      properties:
        id:
          type: string
          description: 'The unique ID of the metric. Note: See `Metrics` to get the ID.'
        displayName:
          type: string
          description: The localized display name of the metric.
        description:
          type: string
          description: The localized description of the metric.
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this metric.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this metric.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinitionDTO'
          description: The collection of parameters defined for the metric.
        category:
          enum:
            - REGULAR
            - DERIVED
            - PLANNING
          type: string
          description: 'The category of the metric. Will be one of: `REGULAR`, `DERIVED` or `PLANNING`.'
          format: enum
        visibleInApp:
          type: boolean
          description: // `true` if this metric is set to be visible in your solution.
      description: A metric is a calculation based on one or more attribute values of analytic objects.
    MetricsDTO:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MetricDTO'
      description: A collection of metrics.
    NumericParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the numeric parameter.
        displayName:
          type: string
          description: The localized display name of the numeric parameter.
        description:
          type: string
          description: The localized description of the numeric parameter.
        lowerBound:
          type: number
          description: The lowest value for the numeric parameter.
          format: double
        upperBound:
          type: number
          description: The highest value for the numeric parameter.
          format: double
        default:
          type: number
          description: The default value if the end user does not select a member at run time.
          format: double
      description: The definition of a numeric parameter. These elements are returned as part of the query definition for metric parameter values.
    ObjectChangeFailureDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the object that was not successfully changed.
        displayName:
          type: string
          description: The display name of the object.
        message:
          type: string
          description: An error message describing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        tenantCode:
          type: string
          description: The tenant that the object was not successfully changed in.
        projectId:
          type: string
          description: The project that the object was not successfully changed in.
    ObjectChangeSuccessDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the object that was successfully changed.
        displayName:
          type: string
          description: The display name of the object.
        tenantCode:
          type: string
          description: The tenant that the object was changed in.
        projectId:
          type: string
          description: The project that the object was changed in.
    ObjectReferenceDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the object reference.
        displayName:
          type: string
          description: The localized display name of the object reference.
        description:
          type: string
          description: The localized description of the object reference.
        fromObject:
          type: string
          description: The ID of the referencing analytic object.
        toObject:
          type: string
          description: The ID of the referenced analytic object.
        type:
          enum:
            - SUBJECT_REFERENCE
            - MULTI_VALUE_REFERENCE
          type: string
          description: The type of object reference.
          format: enum
        isStrongReference:
          type: boolean
          description: True if this is a strong reference.
      description: |-
        A link between one analytic object and another. An ObjectReference allows you to discover the relationships between
         analytic objects. In some queries, you may need to provide a qualifyingPath, which is built from ObjectReference information.
    ObjectsBulkChangeResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/ObjectChangeSuccessDTO'
          description: The objects that were successfully changed.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/ObjectChangeFailureDTO'
          description: The objects that were not successfully changed.
    ParameterDefinitionDTO:
      type: object
      properties:
        memberParameter:
          allOf:
            - $ref: '#/components/schemas/MemberParameterDefinitionDTO'
          description: A filter parameter that can be set with dimension members for the end user to select.
        numericParameter:
          allOf:
            - $ref: '#/components/schemas/NumericParameterDefinitionDTO'
          description: A parameter with a numeric data type. A numeric parameter can be set with an optional default value and value range.
        planParameter:
          allOf:
            - $ref: '#/components/schemas/PlanParameterDefinitionDTO'
          description: A parameter on a planning metric. Plan parameters resolve planning model metrics to a specific plan and scenario or snapshot.
        aggregationTypeParameter:
          allOf:
            - $ref: '#/components/schemas/AggregationTypeParameterDTO'
          description: An aggregation parameter. Such parameters enable control over how applicable metrics aggregate their results.
      description: Parameters generalize object definitions so that end users can provide values at query run time.
    PerspectiveConfigurationDTO:
      type: object
      properties:
        perspectiveId:
          type: string
          description: The UUID of the perspective.
        perspectiveName:
          type: string
          description: The display name of the perspective.
        perspectiveNodes:
          type: array
          items:
            $ref: '#/components/schemas/PerspectiveNodeDTO'
          description: A list of nodes in the perspective.
    PerspectiveNodeDTO:
      type: object
      properties:
        selectionConceptUuid:
          type: string
          description: The UUID of the node's selection concept. Perspective nodes are generated as selection concepts to enable filtering.
        symbolName:
          type: string
          description: The symbol name of the selection concept. For example, "isExitActualSystemTermination".
        analyticObjectFilters:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticObjectFilterDTO'
          description: A list of analytic object filters indicating the analytic object and dimensions used for the selection concept.
    PlanInfoDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the plan.
        displayName:
          type: string
          description: The display name of the plan.
        modelId:
          type: string
          description: The unique identifier of the planning model that the plan is using.
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioInfoDTO'
          description: Information about the plan's scenarios.
        parentPlanUuid:
          type: string
          description: If the plan is a subplan, the response returns its parent plan's UUID. Not returned for main plans.
        currencyCode:
          type: string
          description: The 3-digit ISO 4217 currency code of the plan's data.
      description: Information about a plan and its scenarios.
    PlanItemDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the plan item.
        displayName:
          type: string
          description: The display name of the plan item.
        dataType:
          enum:
            - unknown
            - number
            - currency
            - decimal
            - rate
          type: string
          description: |-
            The data type of the plan item. The data types are:
             - rate
               - Converts values into a percentage in the planning grid. The provided value is multiplied by 100 to get the display value.
                 For example, a provided value of 0.5 is displayed as 50% in the grid.
             - number
               - Displays values as whole numbers. Decimal values are rounded to a whole number when displayed in the planning grid.
             - currency
               - Displays values as a currency. Values must not contain thousand separators, currency codes, or currency symbols.
             - decimal
               - Displays values with decimals.
          format: enum
      description: A plan item is a metric in your plan. The available plan items depend on the planning model.
    PlanParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter.
        displayName:
          type: string
          description: The localized display name of the parameter.
        description:
          type: string
          description: The localized description of the parameter.
        modelName:
          type: string
          description: The name of the planning model to which the parameter applies.
      description: |-
        The definition of a plan parameter. These parameters resolve planning model metrics to a specific plan and scenario
         or snapshot values at query runtime.
    PlanSchemaDTO:
      type: object
      properties:
        planItems:
          type: array
          items:
            $ref: '#/components/schemas/PlanItemDTO'
          description: A collection of editable plan items in a plan.
        timePeriods:
          type: array
          items:
            $ref: '#/components/schemas/PlanTimePeriodDTO'
          description: The editable time periods in a plan. These time periods are the columns in the planning grid.
        planSegmentLevels:
          type: array
          items:
            $ref: '#/components/schemas/PlanSegmentLevelDTO'
          description: The dimensions that the plan is segmented by.
        planSegmentLevelMembers:
          type: array
          items:
            $ref: '#/components/schemas/PlanSegmentLevelMemberListDTO'
          description: |-
            A collection of members grouped by their dimension and level.
             The combination of these member IDs points to a specific row in the plan.
      description: Information about a plan's schema.
    PlanSegmentLevelDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the dimension appended with its level ID.
        displayName:
          type: string
          description: The display name of the dimension level.
        order:
          type: integer
          description: The number that describes the segment's position in the plan's overall structure.
          format: int32
        segmentId:
          type: string
          description: The symbol name of the dimension.
        segmentDisplayName:
          type: string
          description: The display name of the dimension.
      description: A dimension and dimension level that segments the plan.
    PlanSegmentLevelMemberDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the dimension member.
        displayName:
          type: string
          description: The display name of the dimension member.
        isCustom:
          type: boolean
          description: If `true`, this is a custom member created for use in the plan and all its subplans.
        parentId:
          type: string
          description: The unique identifier of the dimension member's parent.
      description: A member in the dimension.
    PlanSegmentLevelMemberListDTO:
      type: object
      properties:
        segmentLevelId:
          type: string
          description: The unique identifier of the dimension and dimension level.
        members:
          type: array
          items:
            $ref: '#/components/schemas/PlanSegmentLevelMemberDTO'
          description: The dimension members.
        segmentId:
          type: string
          description: The unique identifier of the dimension.
      description: A collection of dimension members.
    PlanTimePeriodDTO:
      type: object
      properties:
        date:
          type: string
          description: The date of the time period. The format is YYYY-MM-DD.
        displayName:
          type: string
          description: The display name of the time period; for example, March 2024.
      description: A time period in the plan.
    PlanWithSchemaDTO:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/PlanInfoDTO'
        schema:
          $ref: '#/components/schemas/PlanSchemaDTO'
      description: Details about the plan, including its schema.
    PlanningConceptFilterContextDTO:
      type: object
      properties:
        name:
          type: string
          description: The object name of the selection concept.
      description: A plan context defined using a selection concept.
    PlanningHierarchyFilterContextDTO:
      type: object
      properties:
        hierarchyName:
          type: string
          description: The object name of the hierarchy.
        includedMembers:
          type: array
          items:
            type: string
          description: The unique IDs of the included dimension members.
        excludedMembers:
          type: array
          items:
            type: string
          description: The unique IDs of excluded dimension members.
      description: A plan context defined using hierarchy members
    PlanningModelDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique identifier of the planning model.
             Note: See `PlanningModels` to get the ID.
        displayName:
          type: string
          description: The localized display name of the planning model.
        description:
          type: string
          description: The localized description of the planning model.
      description: The basic information about the planning model. A planning model captures the planning intent, plan items, and the relationship between them.
    PlanningModelsDTO:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/PlanningModelDTO'
      description: A collection of planning modules.
    PlanningPlanContextDTO:
      type: object
      properties:
        hierarchyFilterContext:
          allOf:
            - $ref: '#/components/schemas/PlanningHierarchyFilterContextDTO'
          description: A plan context defined using hierarchy members.
        conceptFilterContext:
          allOf:
            - $ref: '#/components/schemas/PlanningConceptFilterContextDTO'
          description: A plan context defined using a selection concept.
      description: The filter context for a plan. Plan contexts are defined using a set of hierarchy members or a concept.
    PlanningPlanDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique identifier of the plan.
             Note: See `PlanningPlans` to get the ID.
        name:
          type: string
          description: The name of the plan.
        subjectId:
          type: string
          description: The ID of subject for the plan.
        defaultContexts:
          type: array
          items:
            $ref: '#/components/schemas/PlanningPlanContextDTO'
          description: The contexts defined for the plan.
        planDimensionIds:
          type: array
          items:
            type: string
          description: The IDs of the dimensions defined for the plan.
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioOrSnapshotDTO'
          description: The available scenarios for the plan.
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioOrSnapshotDTO'
          description: The available snapshots for the plan.
      description: The definition of a plan. Plans are defined on planning models, and each plan may define multiple scenarios or snapshots.
    PlanningPlansDTO:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanningPlanDTO'
      description: A collection of plan definitions.
    PopulationConfigurationDTO:
      type: object
      properties:
        distinguishingProperties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyReferenceDTO'
          description: Properties that are used by default to compare subject members.
        changeHistoryProperties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyReferenceDTO'
          description: Properties that are used by default to compare subject members over time.
        groupingDimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionReferenceDTO'
          description: Dimensions to use for grouping and clustering the population.
      description: |-
        A set of property and dimension references configured by Visier or an administrator to tell the platform what
         properties and dimensions to use when doing population insight calculations. These are the distinguishing properties,
         change history properties, and grouping dimensions to use in AI insights.
    PredictionDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the prediction.
             Note: See `Predictions` to get the ID.
        displayName:
          type: string
          description: The localized display name of the prediction.
        description:
          type: string
          description: The localized description of the prediction.
        subject:
          type: string
          description: The object name of the subject that the prediction applies to. For example, Employee.
        subjectKey:
          type: string
          description: The unique ID of the subject's property that the prediction applies to. For example, Employee.EmployeeID.
        subjectParentKey:
          type: string
          description: |-
            The unique ID of the reference that connects a subject member to other members. For example, Employee.Direct_Manager.
             Note: The `subjectParentKey` defines parent, child, and peer relationships between subject members.
        subjectFilter:
          type: string
          description: |-
            The object name of a selection concept to filter the subject population. Filtering the population selects
             specific subject members in the prediction's training data. For example, using the isHighPerformer concept will
             filter the prediction to only high performing employees.
        event:
          type: string
          description: |-
            The object name of the event to predict. The prediction's training data uses past occurrences of the event to
             make predictions. For example, the Predicted Risk of Resignation model uses the Employee_Exit event to estimate
             likelihood of exit from the organization.
        eventFilter:
          type: string
          description: The object name of a selection concept to filter event occurrences in the prediction's training data.
        labelProperty:
          type: string
          description: The unique ID of the property label for the prediction. This is automatically generated.
        factorProperties:
          type: array
          items:
            type: string
          description: |-
            The list of unique IDs of the properties used as prediction factors.
             Note: Factors are conditions used as part of a Visier prediction. For example, Compensation might be a factor in
             predicting an individual's risk of resignation. Factors are chosen based on:
             - Availability in tenants.
             - Prediction impact, such as salary.
             - Reducing bias.
        factorDimensions:
          type: array
          items:
            type: string
          description: The list of unique IDs of the dimensions used as prediction factors.
        factorConcepts:
          type: array
          items:
            type: string
          description: The list of unique IDs of the concepts used as prediction factors.
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this prediction.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this prediction.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        scoreName:
          type: string
          description: The unique name of the score property.  The prediction's formula references the score property as an object. This is automatically generated.
        factorsName:
          type: string
          description: The unique name of the factor property. The prediction's formula references the factor property as an object. This is automatically generated.
        minimumTrainingMonths:
          type: string
          description: The minimum amount of time, in months, to train the prediction model.
        isMultiTenant:
          type: boolean
          description: If `true`, this prediction applies to more than one tenant. If "false", the prediction only applies to the current tenant.
      description: A prediction is a forecast of future events with advanced machine learning models.
    PredictionsDTO:
      type: object
      properties:
        predictions:
          type: array
          items:
            $ref: '#/components/schemas/PredictionDTO'
      description: A collection of predictions.
    PropertiesChangeDefinitionsDTO:
      type: object
      properties:
        propertiesByTenant:
          type: array
          items:
            $ref: '#/components/schemas/PropertyChangeDefinitionsByTenantDTO'
          description: The property updates to make in each tenant.
    PropertiesDTO:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDTO'
      description: A collection of properties.
    PropertyChangeDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The symbol name of the property; for example, Employee.Birth_Date
        displayName:
          type: string
          description: The user-friendly name for the property.
        shortDisplayName:
          type: string
          description: A shortened version of the display name. If the property is visible in the solution experience, this name is displayed in visualization titles.
        description:
          type: string
          description: A short description of the property. Descriptions provide in-context help for your users while working in Visier.
    PropertyChangeDefinitionsByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the tenant in which to update properties.
        projectId:
          type: string
          description: To make changes in a project, specify a project ID.
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyChangeDefinitionDTO'
          description: The list of properties to update.
    PropertyDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the property.
             **Note:** See `Properties` to get the ID.
        displayName:
          type: string
          description: The localized display name of the property.
        description:
          type: string
          description: The localized description of the property.
        dataType:
          type: string
          description: The data type of the property, such as Categorical, HourDuration, or Ratio.
        primitiveDataType:
          type: string
          description: The primitive data type of the property, such as Number, String, or Boolean.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinitionDTO'
          description: The collection of parameters defined for the property.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagMapElementDTO'
          description: The optional collection of tags defined for this element.
        explanation:
          type: string
          description: The localized explanation of the property.
      description: Properties are qualities of an analytic object.
    PropertyReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the property. See `Properties` to get the ID.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the property in Visier, such as the analytic object or event the property is associated with.
             If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a property to query.
    ScenarioInfoDTO:
      type: object
      properties:
        uuid:
          type: string
          description: The UUID of the scenario.
        displayName:
          type: string
          description: The full display name of the scenario.
        versionedScenarioId:
          type: string
          description: If the scenario belongs to a managed plan, the response returns the scenario's user-readable symbol name.
      description: Information about a plan's scenario.
    ScenarioOrSnapshotDTO:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the scenario or snapshot.
        displayName:
          type: string
          description: The scenario or snapshot display name.
      description: The unique identifier and display name for plan scenarios and snapshots.
    SelectionConceptConfigurationMapDTO:
      type: object
      properties:
        analyticObjectFiltersToMap:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticObjectFilterDTO'
          description: |-
            A list of analytic object filters indicating the analytic object and dimension members used
             for the selection concept.

             Note: If this array is empty, all filters will be removed for the concept.
    SelectionConceptDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the selection concept
             Note: See `SelectionConcepts` to get the ID.
        displayName:
          type: string
          description: The localized display name of the selection concept.
        description:
          type: string
          description: The localized description of the selection concept.
        visibleInApp:
          type: boolean
          description: '`true` if this selection concept is set to be visible in your solution.'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagMapElementDTO'
          description: The optional collection of tags defined for this element.
        explanation:
          type: string
          description: The localized explanation of the selection concept.
      description: Selection concepts select a population of subject members of a given subject or event.
    SelectionConceptListDTO:
      type: object
      properties:
        concepts:
          type: array
          items:
            $ref: '#/components/schemas/SelectionConceptDTO'
          description: A list of objects representing selection concepts.
    SelectionConceptsDTO:
      type: object
      properties:
        selectionConcepts:
          type: array
          items:
            $ref: '#/components/schemas/SelectionConceptDTO'
      description: A collection of selection concepts
    TagMapElementDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the tag.
        displayName:
          type: string
          description: The localized display name of the tag.
      description: Tag identifier and display name pair.
    ValidityRangeDTO:
      type: object
      properties:
        start:
          type: string
          description: |-
            The date from which data becomes available.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
        end:
          type: string
          description: |-
            The date from which data is no longer available.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
      description: |-
        A pair of values that represent the time interval to which the data is valid.
         The validity range is defined in Unix epoch format and UTC timezone.
         Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
         limitation in representing large numbers.
    Status:
      type: object
      properties:
        errorCode:
          type: string
          description: Error classification.
        message:
          type: string
          description: Error message describing the root cause of the error.
        rci:
          type: string
          description: Optional root cause identifier.
      description: The response structure for errors.
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: VisierASIDToken
      in: cookie
    ApiKeyAuth:
      type: apiKey
      name: apikey
      in: header
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /v1/auth/oauth2/authorize
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
        password:
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
tags:
  - name: DataModel
    description: |-
      Discover the objects that make up your Visier solution and provide detailed information on the object's schema.
      You can retrieve detailed information about objects in Visier by retrieving a list of all objects or retrieving information about an object by object ID.
      The types of objects you can retrieve using the data model API are:
        * Analytic objects
        * Properties
        * Dimensions
        * Selection concepts
        * Metrics
        * Predictions
  - name: ObjectConfiguration
    description: |-
      Manage objects in your analytic model.
security:
  - ApiKeyAuth: []
    BearerAuth: []
  - ApiKeyAuth: []
    CookieAuth: []
  - ApiKeyAuth: []
    OAuth2Auth: []
