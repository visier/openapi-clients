# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
  title: Visier Public Direct Data Intake APIs
  description: Visier APIs for uploading data files.
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 22222222.99201.903
paths:
  /v1/data/directloads/:draftId/configs:
    put:
      tags:
        - DataIntake
      summary: Update the data intake configuration
      description: |-
        Configure the data intake settings, such as the direct data intake job type. Only provide values for the configuration options that should change.

         Configuration options that are not present in the PUT request are ignored and left unchanged.
      operationId: DataIntake_PutConfig
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectDataLoadConfigDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/directloads/:draftId/schemas/:objectName:
    get:
      tags:
        - DataIntake
      summary: Retrieve an object's data load schema
      description: |-
        Gets the load schema for a specified object. The object's load schema represents the structure that the data upload file must follow to upload data to the object.

         In the load schema, the listed columns must be present in the data file as column headers and exactly match the load schema (case sensitive), however,  only the columns whose `isMandatory` field is `true` must contain values in the data file.
      operationId: DataIntake_ObjectSchema
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
        - name: objectName
          in: query
          description: The name of the object to return the load schema for.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDataSchemaFieldDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/directloads/:draftId/transactions:
    post:
      tags:
        - DataIntake
      summary: Start a data intake transaction
      description: |-
        Create a transaction to contain your data files. To upload files to objects in Visier, you must first start a transaction.

         After starting a transaction and uploading files to the transaction, you can commit the transaction to process the uploaded files or roll back the transaction to discard the uploaded files.
      operationId: DataIntake_StartTransaction
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDataTransactionStartResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/directloads/:draftId/transactions/:transactionId:
    get:
      tags:
        - DataIntake
      summary: Check transaction status
      description: Retrieve the status of a committed transactionâ€™s processing job.
      operationId: DataIntake_JobStatus
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
        - name: transactionId
          in: query
          description: The unique identifier of the transaction.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDataJobStatusResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    post:
      tags:
        - DataIntake
      summary: Commit a transaction
      description: |-
        Process a transaction and its uploaded data files. This starts a processing job to load the data files into Visier.

         After committing a transaction, you cannot upload additional files to the transaction. Use the `Check transaction status` API to monitor the progress of the processing job.
      operationId: DataIntake_CommitTransaction
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
        - name: transactionId
          in: query
          description: The unique identifier of the transaction.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDataUploadFileResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    delete:
      tags:
        - DataIntake
      summary: Roll back a transaction
      description: |-
        Rolls back the specified transaction. This discards all files uploaded within the transaction and deletes the transaction.

         After rolling back a transaction, you cannot use the transaction to upload data files.
      operationId: DataIntake_RollbackTransaction
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
        - name: transactionId
          in: query
          description: The unique identifier of the transaction.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDataUploadFileResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/directloads/:draftId/transactions/:transactionId/:objectName:
    put:
      tags:
        - DataIntake
      summary: Upload files
      description: |-
        Send upload files to a previously-created transaction. Each upload file is associated with a target object in Visier. The files are not processed in Visier until you commit the transaction.
      operationId: DataIntake_UploadFile
      parameters:
        - name: draftId
          in: query
          description: The unique identifier of the project to load data into. Currently, the only supported value is `prod` to update the production version.
          schema:
            type: string
        - name: transactionId
          in: query
          description: The unique identifier of the transaction to load data files into.
          schema:
            type: string
        - name: objectName
          in: query
          description: |-
            The name of the object to upload the data to.

            If uploading data to a multi-value property (MVP), specify the property in `{object}--{property}` format; for example, `Employee--Employee_Budgeted_Compensation`.
          schema:
            type: string
      requestBody:
        content:
          application/octetstream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectDataUploadFileResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
components:
  schemas:
    DirectDataJobConfigDTO:
      type: object
      properties:
        supplementalMode:
          type: integer
          description: "The configuration for the processing job as a primary job (default) or a supplemental job. If a primary job is already defined, the direct data \n intake job must be supplemental. The valid values are `IS_PRIMARY`, `IS_SUPPLEMENTAL`, and `UNCHANGED`."
          format: enum
      description: Whether the direct data intake job is a primary job or a supplemental job.
    DirectDataJobStatusResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant for the data load.
        transactionId:
          type: string
          description: The unique identifier of the committed transaction.
        jobId:
          type: string
          description: The unique identifier of the processing job.
        status:
          type: string
          description: The status of the processing job.
        message:
          type: string
          description: If the processing job fails, this field contains details specific to the failure.
      description: The job status information for a committed transaction.
    DirectDataLoadConfigDTO:
      type: object
      properties:
        job:
          allOf:
            - $ref: '#/components/schemas/DirectDataJobConfigDTO'
          description: The direct data intake job configuration.
      description: The configuration for the direct data intake, such as the  direct data intake job type.
    DirectDataSchemaFieldDTO:
      type: object
      properties:
        name:
          type: string
          description: The field's column name. Column names are case sensitive.
        dataType:
          type: string
          description: The column's data type.
        formats:
          type: array
          items:
            type: string
          description: The column's accepted formats, such as date formats like "yyyy-MM-dd".
        isMandatory:
          type: boolean
          description: If true, the field must contain a value to successfully load data into the object.
        emptyValuesAllowed:
          type: boolean
          description: If true, the value may be empty.
      description: The definition of each field in an object's schema.
    DirectDataTransactionStartResponseDTO:
      type: object
      properties:
        transactionId:
          type: string
          description: The transaction's unique identifier.
      description: The response after successfully creating a transaction.
    DirectDataUploadFileResponseDTO:
      type: object
      properties:
        transactionId:
          type: string
          description: The unique transaction identifier.
        status:
          type: string
          description: The status of the request.
        message:
          type: string
          description: The upload response message from the provisioning service.
      description: |-
        The transaction results.

        If uploading a file, a success response means the upload was successful and doesn't always mean the file was successfully loaded into its target object.
    GoogleProtobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the serialized message.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
    Status:
      type: object
      properties:
        code:
          type: integer
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
          format: int32
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: VisierASIDToken
      in: cookie
    ApiKeyAuth:
      type: apiKey
      name: apikey
      in: header
    LegacyTicketAuth:
      type: apiKey
      name: VisierSecureTicket
      in: header
security:
  - CookieAuth: []
  - ApiKeyAuth: []
  - LegacyTicketAuth: []
tags:
  - name: DataIntake
    description: |-
      Use the Direct Data Intake API to load data directly into Visier objects. These objects can be delivered as part of Visier Blueprint, locally modified objects, or even completely custom objects. Objects must be released to production to receive data through the DDI API.
      You can load data into:
      - Subjects
      - Events
      - Parent-child dimensions
      - Multi-value properties
