# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
  title: Visier Public Platform APIs
  description: Visier APIs for querying data and model metadata
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 22222222.99201.1272
paths:
  /v1/data/model/analytic-objects:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of analytic objects
      description: Use this API to retrieve all the analytic objects in your Visier solution.
      operationId: DataModel_AnalyticObjects
      parameters:
        - name: id
          in: query
          description: The IDs of the analytic objects to retrieve. Default is all analytic objects.
          schema:
            type: array
            items:
              type: string
        - name: objectType
          in: query
          description: The object type to filter the returned analytic objects by.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticObjectsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object by ID
      description: If you know the ID of an analytic object, use this API to retrieve that object specifically.
      operationId: DataModel_AnalyticObject
      parameters:
        - name: id
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticObjectDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of dimensions
      description: Use this API to retrieve a list of dimensions for a specific analytic object.
      operationId: DataModel_Dimensions
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the dimensions to retrieve. Default is all dimensions.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/members:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of dimension members
      description: |-
        If you know the ID of a dimension, use this API to retrieve the members of that dimension specifically. You must
         also know the analytic object's ID. Dimension members exist in a hierarchy. The levels in the hierarchy may be
         fixed or non-uniform. Leveled dimensions have fixed hierarchies, while parent-child dimensions have non-uniform
         levels. When you retrieve dimension members with this API, the response returns the level of the dimension and the
         path to get to that level. For example, in a Location dimension, Vancouver is 3 levels deep:

         - All > Canada > British Columbia > Vancouver

         Parent-child hierarchies are non-uniform and exhibit distinct characteristics such as time dependence and data
         attributes. These traits reflect the dynamic nature of hierarchies, for example, organizational hierarchies. The API
         response includes elements that express the validity ranges for retrieved members.
      operationId: DataModel_Members
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of the dimension
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the members to retrieve. Default is all members.
          schema:
            type: array
            items:
              type: string
        - name: maxLevel
          in: query
          description: The maximum level in the hierarchy to fetch. The top level of the hierarchy is 0. Default is all levels.
          schema:
            type: integer
            format: int32
        - name: filter
          in: query
          description: A regular expression that members must match to be retrieved. Default is to retrieve all members.
          schema:
            type: string
        - name: field
          in: query
          description: |-
            Indicates the aspect of the member to apply the filter to. Possible values are:
             - **id**: Match the filter to the member ID.
             - **display**: Match the filter to the member's display name.
             - **either**: Match the filter to the member ID or display name.

             Default is id.
          schema:
            type: string
        - name: includeDataMembers
          in: query
          description: Indicates whether data members are included in the response. Parent-child dimensions only. Default is false.
          schema:
            type: boolean
        - name: offset
          in: query
          description: For paginated member requests against high-cardinality dimensions, the offset of the first member to retrieve. Default is 0. If the `offset` value is specified to a non-default value, all other non-pagination parameters are ignored.
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: For paginated member requests against high-cardinality dimensions, the maximum number of members to retrieve. Default is -1, meaning no limit. If the `limit` value is specified to a non-default value, all other non-pagination parameters are ignored.
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{dimensionId}/members/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a dimension member
      description: If you know the ID of a dimension member, use this API to retrieve that dimension member specifically. You must also know the dimension's ID and the analytic object's ID.
      operationId: DataModel_Member
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object
          required: true
          schema:
            type: string
        - name: dimensionId
          in: path
          description: The ID of the dimension
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: Id
          in: query
          description: The ID of the member to retrieve
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/dimensions/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a dimension by ID
      description: If you know the ID of a dimension, use this API to retrieve that dimension specifically. You must also know the analytic object's ID.
      operationId: DataModel_Dimension
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the dimension to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/properties:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of properties
      description: Use this API to retrieve a list of properties for a specific analytic object.
      operationId: DataModel_Properties
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the properties to retrieve. Default is all properties.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/properties/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a property by ID
      description: If you know the ID of a property, use this API to retrieve that property specifically. You must also know the analytic object's ID..
      operationId: DataModel_Property
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the property to retrieve.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/selection-concepts:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object's selection concepts
      description: Use this API to retrieve a list of selection concepts for a specific analytic object.
      operationId: DataModel_SelectionConcepts
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the selection concepts to retrieve. Default is all selection concepts.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/analytic-objects/{objectId}/selection-concepts/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve an analytic object's selection concept by ID
      description: If you know the ID of a selection concept, use this API to retrieve that selection concept specifically. You must also know the analytic object's ID.
      operationId: DataModel_SelectionConcept
      parameters:
        - name: objectId
          in: path
          description: The ID of the analytic object to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the selection concept to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies:
    get:
      tags:
        - DataModel
      summary: Retrieve all currencies
      description: Use this API to retrieve all the available currencies in your Visier solution.
      operationId: DataModel_Currencies
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrenciesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a currency
      description: Use this API to retrieve a specific currency if you know the currency code.
      operationId: DataModel_Currency
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies/{id}/rates:
    get:
      tags:
        - DataModel
      summary: Retrieve all exchange rates for a currency
      description: |-
        Use this API to retrieve exchange rates for a specific currency from Visier.
         You can optionally specify query parameter options for the returned rates, such as the number of decimals to round the exchange rate to.
      operationId: DataModel_CurrencyRates
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency to get rates for.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: The earliest time instant to retrieve exchange rates from. Default is to use 0 milliseconds.
          schema:
            type: string
        - name: endTime
          in: query
          description: The latest time instant to retrieve exchange rates from. Default is to use the time of this request in milliseconds.
          schema:
            type: string
        - name: decimals
          in: query
          description: The number of decimals to round exchange rates to. Default is to round to 2 decimal places.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyRatesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/currencies/{id}/rates/{toId}:
    get:
      tags:
        - DataModel
      summary: Retrieve exchange rates from one currency to another currency
      description: |-
        Use this API to retrieve exchange rates from a specific currency to another specific currency.
         You can optionally specify query parameter options for the returned rates, such as the number of decimals to round the exchange rate to.
      operationId: DataModel_CurrencyRatesWithToCurrency
      parameters:
        - name: id
          in: path
          description: The ISO 4217 3-letter code for the currency to convert from.
          required: true
          schema:
            type: string
        - name: toId
          in: path
          description: The ISO 4217 3-letter code for the currency to convert to.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: The earliest time instant to retrieve exchange rates from. Default is to use 0 milliseconds.
          schema:
            type: string
        - name: endTime
          in: query
          description: The latest time instant to retrieve exchange rates from. Default is to use the time of this request in milliseconds.
          schema:
            type: string
        - name: decimals
          in: query
          description: The number of decimals to round exchange rates to. Default is to round to 2 decimal places.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyRatesDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of metrics
      description: Use this API to retrieve all the metrics in your Visier solution.
      operationId: DataModel_Metrics
      parameters:
        - name: id
          in: query
          description: The IDs of the metrics to retrieve. Default is all metrics.
          schema:
            type: array
            items:
              type: string
        - name: category
          in: query
          description: The category to filter the returned metrics by.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric by ID
      description: If you know the ID of a metric, use this API to retrieve that metric specifically.
      operationId: DataModel_Metric
      parameters:
        - name: id
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics/{metricId}/dimensions:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric's dimensions
      description: Use this API to retrieve a list of dimensions for a specific metric.
      operationId: DataModel_MetricDimensions
      parameters:
        - name: metricId
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the dimensions to retrieve. Default is all dimensions.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/metrics/{metricId}/selection-concepts:
    get:
      tags:
        - DataModel
      summary: Retrieve a metric's selection concepts
      description: Use this API to retrieve a list of selection concepts for a specific metric
      operationId: DataModel_MetricSelectionConcepts
      parameters:
        - name: metricId
          in: path
          description: The ID of the metric to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the selection concepts to retrieve. Default is all selection concepts.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelectionConceptsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of planning models
      description: Use this API to retrieve all the planning models you have access to.
      operationId: DataModel_PlanningModels
      parameters:
        - name: id
          in: query
          description: The IDs of the planning models to retrieve. Default is all models.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningModelsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a planning model by ID
      description: Use this API to retrieve a specific planning model you have access to.
      operationId: DataModel_PlanningModel
      parameters:
        - name: id
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningModelDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{id}/metrics:
    get:
      tags:
        - DataModel
      summary: Retrieve metrics by planning model ID
      description: Use this API to retrieve all the metrics you have access to for a planning model.
      operationId: DataModel_PlanningMetrics
      parameters:
        - name: id
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{modelId}/plans:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of plans
      description: Use this API to retrieve all the plans you have access to for a planning model.
      operationId: DataModel_PlanningPlans
      parameters:
        - name: modelId
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: The IDs of the plans to retrieve. Default is all plans.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningPlansDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/plan-models/{modelId}/plans/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a plan by ID
      description: Use this API to retrieve a specific plan that you have access to in a planning model.
      operationId: DataModel_PlanningPlan
      parameters:
        - name: modelId
          in: path
          description: The ID of the planning model to retrieve.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the plan to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanningPlanDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/predictions:
    get:
      tags:
        - DataModel
      summary: Retrieve a list of predictions
      description: Use this API to retrieve all the predictions in your Visier solution.
      operationId: DataModel_Predictions
      parameters:
        - name: id
          in: query
          description: The IDs of the predictions to retrieve. Default is all predictions.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionsDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/model/predictions/{id}:
    get:
      tags:
        - DataModel
      summary: Retrieve a prediction by ID
      description: If you know the ID of a prediction, use this API to retrieve that prediction specifically.
      operationId: DataModel_Prediction
      parameters:
        - name: id
          in: path
          description: The ID of the prediction to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/query/aggregate:
    post:
      tags:
        - Query
      summary: Query aggregate data
      description: |-
        To retrieve aggregated values from your data in Visier, you can perform an aggregation. Usually, an aggregation
         retrieves values over a period of time, such as multiple months. You can also group and filter your data in an
         aggregation query to retrieve detailed information.
      operationId: Query_Aggregate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AggregationQueryExecutionDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CellSetDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/query/list:
    post:
      tags:
        - Query
      summary: Query a list of details
      description: |-
        To retrieve a list of values for specific objects, you can perform a list query. A list query provides information
         about values for selected data points, and is not an aggregated value. In Visier's interface, a list query is
         comparable to View Details for a specific data point in a visualization.
      operationId: Query_List
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListQueryExecutionDTO'
        required: true
      responses:
        "200":
          description: List query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
            application/octet-stream:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/query/snapshot:
    post:
      tags:
        - Query
      summary: Query a series of detailed snapshots
      description: |-
        To retrieve a collection of `list` query-style snapshots taken at the defined intervals, execute a `snapshot` query.
         Each snapshot in the result is associated with a timestamp, or the "effective date" at which date snapshot data was valid.
         This API allows you to request a detailed time series from Visier.

         Structurally, a `snapshot` query is similar to a `list` query, but has the following differences:
         * The `snapshot` query may contain a column, `effectiveDateProperty`, that specifies the time for each snapshot. To include the `effectiveDateProperty` column, add the following object to the columns array:
            ```json
            {
                "columnName": "Snapshot_Date",
                "columnDefinition": {
                    "effectiveDateProperty": {}
                }
            }
            ```
         * The `snapshot` query uses `timeIntervals` (like an `aggregate` query) instead of `timeInterval` (like a `list` query) because the `snapshot` query
            must specify the number of snapshots to generate. To specify the number of snapshots to generate, use the `intervalCount` property in the `timeIntervals` object, as shown next.
            ```json
            {
                "timeIntervals": {
                "fromDateTime": "2022-01-01",
                "intervalPeriodType": "MONTH",
                "intervalPeriodCount": 6,
                "intervalCount": 4
            }
            ```
      operationId: Query_Snapshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnapshotQueryExecutionDTO'
        required: true
      responses:
        "200":
          description: List query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
            application/octet-stream:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/data/query/sql:
    post:
      tags:
        - Query
      summary: Query aggregate or list data using SQL-like syntax
      description: "To retrieve a list of values for specific objects or aggregate values from metrics, you can write queries using SQL-like syntax.\n The response format matches the query type whether aggregate or list. If requested, aggregate query results may be flattened into tabular format. \n\n A SQL-like query is an aggregate if it contains at least one metric. Aggregate queries must specify a time interval divided into periods; for example:\n ```sql\n SELECT\n   employeeCount() AS \"Employee Count\",\n   level(Gender, \"Gender\") AS Gender\n FROM\n   Employee\n WHERE\n  Visier_Time IN periods(date(\"2023-01-01\"), 4, period(3, Month));\n ```\n\n A SQL-like query is a list if it does not contain any metrics. List queries define time intervals as simple intervals; for example:\n ```sql\n SELECT\n   EmployeeID AS \"Employee ID\",\n   level(Gender, \"Gender\") AS Gender\n FROM\n   Employee\n WHERE\n  Visier_Time BETWEEN date(\"2022-01-01\") AND date(\"2023-01-01\");\n ```"
      operationId: Query_SqlLike
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlLikeQueryExecutionDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: List query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CellSetDTO'
            application/octet-stream:
              schema:
                type: string
            text/csv:
              schema:
                type: string
components:
  schemas:
    AggregationQueryDTO:
      type: object
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/AggregationQuerySourceDTO'
          description: The source data, such as a metric or formula, to query.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/QueryFilterDTO'
          description: |-
            The objects by which to filter the query, such as dimensions or concepts.
             A filter defines the population to retrieve data from. Omit `filters` if no filtering is required.
        axes:
          type: array
          items:
            $ref: '#/components/schemas/QueryAxisDTO'
          description: |-
            The objects by which to group the query. An axis defines the groups that the data belongs to.
             Omit `axes` if no grouping is required.
        timeIntervals:
          allOf:
            - $ref: '#/components/schemas/QueryTimeIntervalsDTO'
          description: The time intervals to query.
        parameterValues:
          type: array
          items:
            $ref: '#/components/schemas/QueryParameterValueDTO'
          description: The values associated with parameters, if defined.
      description: |-
        An AggregationQuery defines the data to query in an aggregation query and returns a `cell set` calculated from
         the selected data points.
    AggregationQueryExecutionDTO:
      type: object
      properties:
        query:
          allOf:
            - $ref: '#/components/schemas/AggregationQueryDTO'
          description: |-
            The data to perform an aggregation on, such as a metric or formula. The query must include a time interval,
             and may optionally include filters and axes.
        options:
          allOf:
            - $ref: '#/components/schemas/QueryExecutionOptionsDTO'
          description: Additional instructions for your query, such as a calendar type or conversion information.
      description: An AggregationQueryExecution provides instructions to perform your aggregation query.
    AggregationQuerySourceDTO:
      type: object
      properties:
        formula:
          type: string
          description: |-
            An ad-hoc metric formula. The response returns the results of the aggregate.
             See the formula dictionary in Visier to find functions and objects you can use in a formula.
        metric:
          type: string
          description: The ID of an existing metric in your Visier solution. See `Metrics` to get the ID.
        metrics:
          allOf:
            - $ref: '#/components/schemas/AggregationQuerySourceMetricsDTO'
          description: |-
            The IDs of metrics to aggregate. All metrics in the query must reference the same analytic object.
             For example, you cannot query Headcount and Applicant Count because one uses the Employee subject and
             the other uses the Applicant subject. You can query Headcount and Employee Count for Women because both
             reference the Employee subject. Only available when the Accept header is text/csv. For more information,
             see `Aggregate`.
      description: An AggregationQuerySource defines the source data to query in an aggregation query.
    AggregationQuerySourceMetricDTO:
      type: object
      properties:
        columnName:
          type: string
          description: The column name in the CSV file. Default is to use id as the column name.
        id:
          type: string
          description: |-
            The unique ID of the metric. Note: See `Metrics` to get the ID.
             If columnName is omitted, id is the column name in the CSV file.
        formula:
          type: string
          description: |-
            An ad-hoc metric formula. The response returns the results of the aggregate.
             See the formula dictionary in Visier to find functions and objects you can use in a formula.
        qualifyingPath:
          type: string
          description: |-
            The base qualifying path to prefix the axes and filters' qualifying paths with.
             You must specify the qualifying path on a metric if the convergent analytic object of the metric doesn't match the
             starting object in the qualifying paths of the axes and filters.

             For example, consider a multi-metric query that contains metrics that count the number of applicants and requisitions,
             grouped by the country of the recruiter's direct manager. The following sample shows how to use qualifyingPath to specify
             the object reference traversal path from each metric's convergent analytic object to the start of the path for the axes.
             In this example, there is only one convergent analytic object.
             ```
             "source": {
                 "metrics": {
                    "columns": [
                        {
                            "id": "employeeCount"
                        },
                        {
                            "id": "applicantCount",
                            "qualifyingPath": "Applicant.Requisition.Recruiter"
                        },
                        {
                            "id": "requisitionCount",
                            "qualifyingPath": "Requisition.Recruiter"
                        }
                    ]
                }
             },
             "axes": [
                {
                    "dimensionLevelSelection": {
                        "dimension": {
                            "name": "Location",
                            "qualifyingPath": "Employee.Direct_Manager"
                        },
                        "levelIds": [
                            "Location_1"
                        ]
                    }
                }
             ]
             ```
             **Note:**
             * `employeeCount` doesn't need a `qualifyingPath` because it's already convergent with the start of the axis path.
             * The metrics' qualifying paths must provide the reference name that resolves to the first object of the axis' qualifying path as their last path segment. In this case, Recruiter is a named reference pointing to Employee. The final qualifying paths for the metrics are:
                 * `employeeCount`: Employee.Direct_Manager
                 * `applicantCount`: Applicant.Requisition.Recruiter.Direct_Manager
                 * `requisitionCount`: Requisition.Recruiter.Direct_Manager
      description: The column definition for a single metric within a `metrics` query.
    AggregationQuerySourceMetricsDTO:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/AggregationQuerySourceMetricDTO'
          description: An array of metric columns.
      description: |-
        The IDs and column names of multiple metrics.

         **Note:**
         Only available when the `Accept` header is text/csv. For more information, see `Aggregate`
    AggregationTypeOptionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter option.
        displayName:
          type: string
          description: The localized display name of the parameter option.
        propertyName:
          type: string
          description: The property name of the parameter option.
        aggregationFunction:
          type: string
          description: The aggregation function of the parameter option.
        isDefault:
          type: boolean
          description: '`true` if the parameter option is the default one and `false` otherwise.'
      description: The definition of an aggregation option.
    AggregationTypeParameterDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter.
        displayName:
          type: string
          description: The localized display name of the parameter.
        description:
          type: string
          description: The localized description of the parameter.
        parameterOptions:
          type: array
          items:
            $ref: '#/components/schemas/AggregationTypeOptionDTO'
          description: The options defined for the parameter.
      description: |-
        The definition of an aggregation parameter. These parameters resolve metrics that use aggregation parameters.
         For example, Visier Benchmarks metrics often use aggregation parameters to enable callers to aggregate metric values according to their average or different percentiles.
    AggregationTypeParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the aggregation parameter.
        aggregationOptionId:
          type: string
          description: The unique ID of the aggregation option.
      description: The value for an aggregation parameter.
    AnalyticObjectDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the analytic object.
             Note: See `AnalyticObjects` to get the ID.
        displayName:
          type: string
          description: The localized display name of the analytic object.
        description:
          type: string
          description: The localized description of the analytic object.
        type:
          enum:
            - SUBJECT
            - EVENT
            - OVERLAY
          type: string
          description: 'The analytic object type: SUBJECT, EVENT, or OVERLAY.'
          format: enum
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this analytic object.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this analytic object.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        propertyIds:
          type: array
          items:
            type: string
          description: A list of strings representing IDs of the properties that belong to this analytic object.
        dimensionIds:
          type: array
          items:
            type: string
          description: A list of strings representing IDs of the dimensions that belong to this analytic object.
        selectionConceptIds:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing IDs of the selection concepts that belong to this analytic object.
             Note: If there are no selection concepts, this field is omitted.
        objectReferences:
          type: array
          items:
            $ref: '#/components/schemas/ObjectReferenceDTO'
          description: |-
            A list of references from this analytic object to other analytic objects.
             Note: If there are no references, this field is omitted.
        populationConfiguration:
          allOf:
            - $ref: '#/components/schemas/PopulationConfigurationDTO'
          description: |-
            A set of property and dimension references configured by Visier or an administrator to tell the platform what
             properties and dimensions to use when doing population insight calculations. These are the distinguishing
             properties, change history properties, and grouping dimensions to use in AI insights. This field is optional and
             is only available for subjects.
      description: Analytic objects are the various items that users can analyze in Visier. Analytic objects include subjects, events, and overlays.
    AnalyticObjectsDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticObjectDTO'
      description: A collection of analytic objects
    CellDTO:
      type: object
      properties:
        value:
          type: string
          description: The value of the cell.
        support:
          type: string
          description: The number of data points contributing to this cell.
        coordinates:
          type: array
          items:
            type: integer
            format: int32
          description: A list of integers representing the coordinates of this cell, identifying its position along each axis.
        distribution:
          type: array
          items:
            $ref: '#/components/schemas/CellDistributionBinDTO'
          description: |-
            The optional distribution of this cell.
             This will be populated if distribution calculation is requested, and supported by the query.
      description: An individual value in a cell set.
    CellDistributionBinDTO:
      type: object
      properties:
        value:
          type: string
        support:
          type: string
      description: |-
        A cell distribution bin.
         Each bin has a metric value (of the bin) and the number of observations contributing to the bin.
    CellDistributionOptionsDTO:
      type: object
      properties:
        binCount:
          type: integer
          description: The number of bins to return, minimum of 2, and a maximum of 100.
          format: int32
      description: |-
        Cell distribution options for queries.
         Include with aggregation queries to enable distribution calculation per cell.
    CellSetAxisDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: The dimension associated with the axis.
        positions:
          type: array
          items:
            $ref: '#/components/schemas/CellSetAxisPositionDTO'
          description: A list of paths that represent the data's positions along the axis.
      description: The axis of a cell set associated with a dimension.
    CellSetAxisPositionDTO:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the members within a dimension path. For example,
             a dimension for Location may have the paths "Canada, BC, Vancouver" and "US, California, San Francisco".
        displayName:
          type: string
          description: The display name of the position. This is optional and is omitted if unavailable or not requested.
        displayNamePath:
          type: array
          items:
            type: string
          description: Optional display name path of the member.
      description: The position along the axis of a cell set.
    CellSetDTO:
      type: object
      properties:
        cells:
          type: array
          items:
            $ref: '#/components/schemas/CellDTO'
          description: The set of cells that represent the result of your query.
        axes:
          type: array
          items:
            $ref: '#/components/schemas/CellSetAxisDTO'
          description: The set of axes for the cell set that represent the objects the data is grouped by.
        lineage:
          allOf:
            - $ref: '#/components/schemas/LineageDTO'
          description: Lineage information for this cell set. This can be omitted if the cell has no lineage or the user did not request lineage information.
      description: |-
        The set of cells returned from executing an aggregation query.
         A CellSet represents a structured, multidimensional array of values.
    CohortFilterDTO:
      type: object
      properties:
        keyGroup:
          allOf:
            - $ref: '#/components/schemas/KeyGroupFilterDTO'
          description: A key group is a collection of filters that define the shape of the analysis population.
        exclude:
          type: boolean
          description: If true, the population is defined by those excluded by the filters. Default is false.
        timeInterval:
          allOf:
            - $ref: '#/components/schemas/QueryTimeIntervalDTO'
          description: The time at which to apply the key group, such as a specific day or period of months.
      description: |-
        Use a cohort filter to define a population as it existed during a specific time period.
         Cohort filters allow you to define a population in terms of a collection of filters, known as a key group.
         The cohort's defined time interval is independent of the query's time. The cohort's time interval is the
         time at which the key group should be applied.
         Cohorts are typically used to follow populations and understand changes to the population over time,
         such as promotion and resignation rates.
    CurrenciesDTO:
      type: object
      properties:
        currencies:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyDTO'
      description: A collection of currencies.
    CurrencyDTO:
      type: object
      properties:
        currencyCode:
          type: string
          description: The ISO 4217 3-letter code for the currency.
        displayName:
          type: string
          description: The display name for the currency.
        symbol:
          type: string
          description: The symbol name for the currency.
        shortSymbol:
          type: string
          description: |-
            The shortened symbol name for the currency.
             Removes all alphabetic characters. If **symbol** only has alphabetic characters, **shortSymbol** is empty.
             If **symbol** contains only non-alphabetic characters, **shortSymbol** is the same as **symbol**.
             For example, if **symbol** is CA$, **shortSymbol** is $. If **symbol** is $, then **shortSymbol** is $.
      description: Information about a currency type.
    CurrencyRateDTO:
      type: object
      properties:
        fromCurrencyCode:
          type: string
          description: |-
            The currency to convert **from**.
             **Note:** If USD is the `fromCurrencyCode`, you are retrieving the exchange rates from USD to a different currency.
        toCurrencyCode:
          type: string
          description: |-
            The currency to convert **to**.
             **Note:** If USD is the `toCurrencyCode`, you are retrieving the exchange rates from a different currency to USD.
        rate:
          type: number
          description: |-
            The numeric value of the exchange rate.
             **Note:** If **decimals** is specified, rate rounds to that value. If **decimals** is undefined, **rate** rounds to 2 significant figures after the decimal point.
          format: double
        startTime:
          type: string
          description: |-
            The earliest time instant to retrieve exchange rates from.
             **Note:** Format is the number of milliseconds since Jan 1, 1970 12:00 AM UTC.
        endTime:
          type: string
          description: |-
            The latest time instant to retrieve exchange rates from.
             **Note:** Format is the number of milliseconds since Jan 1, 1970 12:00 AM UTC.
      description: Information about a currency exchange rate.
    CurrencyRatesDTO:
      type: object
      properties:
        currencyRates:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyRateDTO'
      description: |-
        A collection of currency exchange rates.
         Note: Currencies may have different exchange rates in different time intervals, depending what rate data is stored in Visier.
         For example, USD:CAD can be 1.2 between January 1 - March 1, while USD:EUR can be 0.92 between January 1 - February 1, but 0.88 between February  1 - March 1.
    DimensionDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the dimension.
             Note: See `Dimensions` to get the ID`.
        displayName:
          type: string
          description: The localized display name of the dimension.
        description:
          type: string
          description: The localized description of the dimension.
        levels:
          type: array
          items:
            $ref: '#/components/schemas/LevelDTO'
          description: 'The levels defined for the dimension. Note: For parent-child dimensions, a level name is generated by Visier.'
        unknownMember:
          type: array
          items:
            type: string
          description: The optional path to the unknown member, if defined.
        memberCount:
          type: integer
          description: The total number of members for the dimension, excluding the (All) member.
          format: int32
        visibleInApp:
          type: boolean
          description: '`true` if this dimension is set to be visible in your solution.'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagMapElementDTO'
          description: The optional collection of tags defined for this element.
      description: A dimension organizes unique values of an attribute into a list or a hierarchical structure for use as a filter or group-by in your solution.
    DimensionMemberReferenceDTO:
      type: object
      properties:
        path:
          type: array
          items:
            type: string
          description: |-
            A list of strings representing the members within a dimension path. For example, a dimension for Location
             may have the paths "Canada, BC, Vancouver" and "US, California, San Francisco".
      description: The members of a dimension.
    DimensionReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the dimension. See `Dimensions` to get the ID.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the dimension in Visier, such as the analytic object or event the dimension is
             associated with. If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a dimension to query.
    DimensionsDTO:
      type: object
      properties:
        dimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionDTO'
      description: A collection of dimensions.
    GoogleProtobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the serialized message.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
    InternalQueryExecutionOptionsDTO:
      type: object
      properties:
        sparseHandlingMode:
          enum:
            - ALLOW
            - DISALLOW
            - FORCE
          type: string
          format: enum
        alignTimeAxisToPeriodEnd:
          type: boolean
          description: |-
            If true, shifts the time axis members back by one millisecond.
             Shifting the time axis members back by one millisecond makes them valid at the end of the period instead of at the start of the next period.
             This aligns the returned data timestamps with the timestamps in the Visier application.

             Example: If the timestamps are originally [`2019-06-01T00:00:00.000Z`, `2019-05-01T00:00:00.000Z`],
             then `alignTimeAxisPeriodEnd` turns the timestamps into [`2019-05-31T23:59:59.999Z`, `2019-04-30T23:59:59.999Z`].

             Example: If the timestamps are originally [`2019-05-01T00:00:00.000Z/2019-06-01T00:00:00.000Z`, `2019-04-01T00:00:00.000Z/2019-05-01T00:00:00.000Z`],
             then `alignTimeAxisPeriodEnd` turns the timestamps into [`2019-05-01T00:00:00.000Z/2019-05-31T23:59:59.999Z`, `2019-04-01T00:00:00.000Z/2019-04-30T23:59:59.999Z`].
      description: Internal options - not to be documented or used by external parties
    KeyGroupFilterDTO:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/KeyGroupFilterItemDTO'
      description: A collection of related filters that define a key group.
    KeyGroupFilterItemDTO:
      type: object
      properties:
        formula:
          type: string
          description: A filter expressed as a formula.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/SelectionConceptReferenceDTO'
          description: A filter that uses an existing selection concept in Visier.
        memberSet:
          allOf:
            - $ref: '#/components/schemas/MemberFilterDTO'
          description: A filter that includes or excludes dimension members.
      description: An individual filter in a key group.
    LevelDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of a level within a dimension.
        displayName:
          type: string
          description: The localized display name of the dimension.
        depth:
          type: integer
          description: The level depth of the dimension.
          format: int32
      description: Levels are the hierarchical structure of members within a dimension.
    LineageDTO:
      type: object
      properties:
        cellSets:
          type: array
          items:
            $ref: '#/components/schemas/CellSetDTO'
          description: The cell sets that constitute this lineage.
        op:
          type: string
          description: The operation used to combine the cell sets of this lineage.
      description: Lineage information for a given cell set. This describes how a cell set is created from other cell sets.
    ListQueryExecutionDTO:
      type: object
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/ListQuerySourceDTO'
          description: The source data that you want to query.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/PropertyColumnDTO'
          description: The columns to include in the result. This must contain at least one column.
        sortOptions:
          type: array
          items:
            $ref: '#/components/schemas/SortOptionDTO'
          description: The index and direction to sort a column in the `columns` array.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/QueryFilterDTO'
          description: The filters of this query. Omit `filters` if no filtering is required.
        timeInterval:
          allOf:
            - $ref: '#/components/schemas/QueryTimeIntervalDTO'
          description: The time that the data is valid, such as a specific day or period of months.
        parameterValues:
          type: array
          items:
            $ref: '#/components/schemas/QueryParameterValueDTO'
          description: The parameter values for either member or numeric parameters.
        options:
          allOf:
            - $ref: '#/components/schemas/ListQueryExecutionOptionsDTO'
          description: Additional instructions for your query, such as a calendar type or conversion information.
      description: A ListQueryExecution provides instructions to perform a list query.
    ListQueryExecutionOptionsDTO:
      type: object
      properties:
        limit:
          type: integer
          description: |-
            The maximum number of entries to return. Default is to return all entries. If `page` is defined but
             limit is not defined, limit will be set to a default value of 1000.
          format: int32
        queryMode:
          enum:
            - DEFAULT
            - FILL
            - FAIL
          type: string
          description: Determines how the query should handle column definitions that the query is unable to resolve. Default is DEFAULT.
          format: enum
        omitHeader:
          type: boolean
          description: |-
            Option to omit the header from the result.
             If true, queryMode must be either FILL or FAIL.
             Default is false.
        calendarType:
          enum:
            - TENANT_CALENDAR
            - GREGORIAN_CALENDAR
          type: string
          description: |-
            The calendar type to use. This will be used for all time calculations unless explicitly overridden in
             the calculation itself. Default is TENANT_CALENDAR.
          format: enum
        currencyConversionMode:
          enum:
            - TENANT_CURRENCY_CONVERSION
            - VISIER_CURRENCY_CONVERSION
          type: string
          description: |-
            The currency conversion mode to use. This will be used for all currency conversion calculations unless explicitly
             overridden in the calculation itself. Default is TENANT_CURRENCY_CONVERSION.
          format: enum
        currencyConversionDate:
          type: string
          description: The currency conversion date to use. If defined, the currency conversion will use the exchange rates as of this date.
        page:
          type: integer
          description: |-
            A page defines a subset of the overall result set. The number of rows per page is equal to limit
             with the exception of the last page in the result set which may contain fewer rows. `Page` is an index
             that begins at 0. The index to start retrieving results is calculated by multiplying `page` by `limit`.
          format: int32
        multipleTables:
          type: boolean
          description: |-
            Option to return multiple table files as zipped archive for derived metrics.
             Default is false. If false, one table is returned for the drill-through metric.
        currencyConversionCode:
          type: string
          description: |-
            The optional target currency for all currency conversions.
             If not specified, the tenant default currency will be used.
        recordMode:
          enum:
            - NORMAL
            - CHANGES
          type: string
          description: |-
            Influences the type of records used to build the result set, such as whether to return
             one record per entity that is valid in the provided time range or each change record
             falls in the time frame.
          format: enum
        dateTimeDisplayMode:
          enum:
            - EPOCH
            - DATETIME
          type: string
          description: |-
            Control how date-time values are displayed in the result set.
             Supported values:
             * `EPOCH`: The number of elapsed milliseconds since January 1, 1970 in UTC timezone. This is the default.
             * `DATETIME`: The date-time value displayed in `yyyy-MM-dd HH:mm:ssZZ` format.
          format: enum
      description: A ListQueryExecutionOptions provides additional instructions to perform a list query.
    ListQuerySourceDTO:
      type: object
      properties:
        formula:
          type: string
          description: An ad-hoc metric formula. The response returns the individual data points that make up the aggregate.
        metric:
          type: string
          description: The ID of an existing metric in your Visier solution.
        analyticObject:
          type: string
          description: |-
            The ID of an existing analytic object in your Visier solution.
             An analytic object source cannot have filters or time handling.
      description: A ListQuerySource defines the source data to query in a list query.
    ListResponse:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/GoogleProtobufAny'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
    MemberDTO:
      type: object
      properties:
        fullName:
          type: string
          description: The fully qualified name of the member. This is the dimension's object name and the member's display name, separated by a period.
        displayName:
          type: string
          description: The localized display name of the member.
        level:
          type: integer
          description: The numeric level of the hierarchy the member belongs to.
          format: sint32
        path:
          type: array
          items:
            type: string
          description: A comma-separated list of identifiers that reference members on the query axis as part of dimensionMemberSelection.
        validityRanges:
          type: array
          items:
            $ref: '#/components/schemas/ValidityRangeDTO'
          description: The validity ranges that exist for this member.
        displayNamePath:
          type: array
          items:
            type: string
          description: The display names for each level in the member's ancestral path.
      description: |-
        A member is an element of a dimension. Dimension members are organized hierarchically. For example, Argentina is
         a member of the Location dimension at the Country level of the hierarchy Region > Country > Province > City.
    MemberFilterDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: The dimension in which the members belong.
        values:
          allOf:
            - $ref: '#/components/schemas/MemberValuesDTO'
          description: The dimension members to filter by.
      description: |-
        Member filters are dimension member values to filter by in your query. The member filters are
         defined within the filters section of a query definition. You can filter by dimension members in
         aggregate and list queries.
    MemberParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the member parameter.
        displayName:
          type: string
          description: The localized display name of the member parameter.
        description:
          type: string
          description: The localized description of the member parameter.
        dimensionId:
          type: string
          description: The unique ID of the dimension on which the member parameter is based.
        referencePath:
          type: array
          items:
            type: string
          description: The analytic object reference path from the metric to the dimension.
        default:
          allOf:
            - $ref: '#/components/schemas/MemberValuesDTO'
          description: The default value if the end user does not select a member at run time.
      description: The definition of a filter parameter. These elements are returned as part of the definition for metrics that include parameters in their definition.
    MemberParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the member parameter qualified by the object.
        dimensionId:
          type: string
          description: The unique ID of the dimension on which the parameter is based.
        referencePath:
          type: array
          items:
            type: string
          description: The analytic object reference path from the metric to the dimension.
        values:
          allOf:
            - $ref: '#/components/schemas/MemberValuesDTO'
          description: The included and excluded member references in a dimension filter.
      description: |-
        The member value of a parameter, including the parameter ID, dimension that the parameter is based on,
         and the included and excluded members for the parameter.
    MemberValuesDTO:
      type: object
      properties:
        included:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
          description: The unique IDs of members to include when evaluating the metric.
        excluded:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
          description: The unique IDs of members to exclude when evaluating the metric.
      description: |-
        Member filter values are discrete member references in a dimension filter. You can define
         included and excluded members simultaneously. This is typically done with filtering applied on
         dimensions with multiple levels. For example, a Location parameter may include “South
         America” and exclude “Brazil” which results in the metric being evaluated for all South American
         countries except Brazil.
    MembersDTO:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/MemberDTO'
      description: A collection of members.
    MetricDTO:
      type: object
      properties:
        id:
          type: string
          description: 'The unique ID of the metric. Note: See `Metrics` to get the ID.'
        displayName:
          type: string
          description: The localized display name of the metric.
        description:
          type: string
          description: The localized description of the metric.
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this metric.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this metric.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinitionDTO'
          description: The collection of parameters defined for the metric.
        category:
          enum:
            - REGULAR
            - DERIVED
            - PLANNING
          type: string
          description: 'The category of the metric. Will be one of: `REGULAR`, `DERIVED` or `PLANNING`.'
          format: enum
        visibleInApp:
          type: boolean
          description: // `true` if this metric is set to be visible in your solution.
      description: A metric is a calculation based on one or more attribute values of analytic objects.
    MetricsDTO:
      type: object
      properties:
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MetricDTO'
      description: A collection of metrics.
    NumericParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the numeric parameter.
        displayName:
          type: string
          description: The localized display name of the numeric parameter.
        description:
          type: string
          description: The localized description of the numeric parameter.
        lowerBound:
          type: number
          description: The lowest value for the numeric parameter.
          format: double
        upperBound:
          type: number
          description: The highest value for the numeric parameter.
          format: double
        default:
          type: number
          description: The default value if the end user does not select a member at run time.
          format: double
      description: The definition of a numeric parameter. These elements are returned as part of the query definition for metric parameter values.
    NumericParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the numeric parameter qualified by the object.
        value:
          type: number
          description: The numeric value of the parameter.
          format: double
      description: The value of a numeric parameter, including the parameter ID and the numeric value passed into the parameter.
    ObjectReferenceDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the object reference.
        displayName:
          type: string
          description: The localized display name of the object reference.
        description:
          type: string
          description: The localized description of the object reference.
        fromObject:
          type: string
          description: The ID of the referencing analytic object.
        toObject:
          type: string
          description: The ID of the referenced analytic object.
        type:
          enum:
            - SUBJECT_REFERENCE
            - MULTI_VALUE_REFERENCE
          type: string
          description: The type of object reference.
          format: enum
        isStrongReference:
          type: boolean
          description: True if this is a strong reference.
      description: |-
        A link between one analytic object and another. An ObjectReference allows you to discover the relationships between
         analytic objects. In some queries, you may need to provide a qualifyingPath, which is built from ObjectReference information.
    ParameterDefinitionDTO:
      type: object
      properties:
        memberParameter:
          allOf:
            - $ref: '#/components/schemas/MemberParameterDefinitionDTO'
          description: A filter parameter that can be set with dimension members for the end user to select.
        numericParameter:
          allOf:
            - $ref: '#/components/schemas/NumericParameterDefinitionDTO'
          description: A parameter with a numeric data type. A numeric parameter can be set with an optional default value and value range.
        planParameter:
          allOf:
            - $ref: '#/components/schemas/PlanParameterDefinitionDTO'
          description: A parameter on a planning metric. Plan parameters resolve planning model metrics to a specific plan and scenario or snapshot.
        aggregationTypeParameter:
          allOf:
            - $ref: '#/components/schemas/AggregationTypeParameterDTO'
          description: An aggregation parameter. Such parameters enable control over how applicable metrics aggregate their results.
      description: Parameters generalize object definitions so that end users can provide values at query run time.
    PlanParameterDefinitionDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the parameter.
        displayName:
          type: string
          description: The localized display name of the parameter.
        description:
          type: string
          description: The localized description of the parameter.
        modelName:
          type: string
          description: The name of the planning model to which the parameter applies.
      description: |-
        The definition of a plan parameter. These parameters resolve planning model metrics to a specific plan and scenario
         or snapshot values at query runtime.
    PlanParameterValueDTO:
      type: object
      properties:
        parameterId:
          type: string
          description: The unique ID of the plan parameter qualified by the object.
        planId:
          type: string
          description: The unique ID of the plan the parameter is based on.
        scenarioId:
          type: string
          description: The unique ID of the scenario the parameter is based on.
        snapshotId:
          type: string
          description: The unique ID of the snapshot the parameter is based on.
      description: The value for a parameter on a planning metric, including the parameter ID and the plan the parameter is based on.
    PlanningConceptFilterContextDTO:
      type: object
      properties:
        name:
          type: string
          description: The object name of the selection concept.
      description: A plan context defined using a selection concept.
    PlanningHierarchyFilterContextDTO:
      type: object
      properties:
        hierarchyName:
          type: string
          description: The object name of the hierarchy.
        includedMembers:
          type: array
          items:
            type: string
          description: The unique IDs of the included dimension members.
        excludedMembers:
          type: array
          items:
            type: string
          description: The unique IDs of excluded dimension members.
      description: A plan context defined using hierarchy members
    PlanningModelDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique identifier of the planning model.
             Note: See `PlanningModels` to get the ID.
        displayName:
          type: string
          description: The localized display name of the planning model.
        description:
          type: string
          description: The localized description of the planning model.
      description: The basic information about the planning model. A planning model captures the planning intent, plan items, and the relationship between them.
    PlanningModelsDTO:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/PlanningModelDTO'
      description: A collection of planning modules.
    PlanningPlanContextDTO:
      type: object
      properties:
        hierarchyFilterContext:
          allOf:
            - $ref: '#/components/schemas/PlanningHierarchyFilterContextDTO'
          description: A plan context defined using hierarchy members.
        conceptFilterContext:
          allOf:
            - $ref: '#/components/schemas/PlanningConceptFilterContextDTO'
          description: A plan context defined using a selection concept.
      description: The filter context for a plan. Plan contexts are defined using a set of hierarchy members or a concept.
    PlanningPlanDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique identifier of the plan.
             Note: See `PlanningPlans` to get the ID.
        name:
          type: string
          description: The name of the plan.
        subjectId:
          type: string
          description: The ID of subject for the plan.
        defaultContexts:
          type: array
          items:
            $ref: '#/components/schemas/PlanningPlanContextDTO'
          description: The contexts defined for the plan.
        planDimensionIds:
          type: array
          items:
            type: string
          description: The IDs of the dimensions defined for the plan.
        scenarios:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioOrSnapshotDTO'
          description: The available scenarios for the plan.
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/ScenarioOrSnapshotDTO'
          description: The available snapshots for the plan.
      description: The definition of a plan. Plans are defined on planning models, and each plan may define multiple scenarios or snapshots.
    PlanningPlansDTO:
      type: object
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanningPlanDTO'
      description: A collection of plan definitions.
    PopulationConfigurationDTO:
      type: object
      properties:
        distinguishingProperties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyReferenceDTO'
          description: Properties that are used by default to compare subject members.
        changeHistoryProperties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyReferenceDTO'
          description: Properties that are used by default to compare subject members over time.
        groupingDimensions:
          type: array
          items:
            $ref: '#/components/schemas/DimensionReferenceDTO'
          description: Dimensions to use for grouping and clustering the population.
      description: |-
        A set of property and dimension references configured by Visier or an administrator to tell the platform what
         properties and dimensions to use when doing population insight calculations. These are the distinguishing properties,
         change history properties, and grouping dimensions to use in AI insights.
    PredictionDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the prediction.
             Note: See `Predictions` to get the ID.
        displayName:
          type: string
          description: The localized display name of the prediction.
        description:
          type: string
          description: The localized description of the prediction.
        subject:
          type: string
          description: The object name of the subject that the prediction applies to. For example, Employee.
        subjectKey:
          type: string
          description: The unique ID of the subject's property that the prediction applies to. For example, Employee.EmployeeID.
        subjectParentKey:
          type: string
          description: |-
            The unique ID of the reference that connects a subject member to other members. For example, Employee.Direct_Manager.
             Note: The `subjectParentKey` defines parent, child, and peer relationships between subject members.
        subjectFilter:
          type: string
          description: |-
            The object name of a selection concept to filter the subject population. Filtering the population selects
             specific subject members in the prediction's training data. For example, using the isHighPerformer concept will
             filter the prediction to only high performing employees.
        event:
          type: string
          description: |-
            The object name of the event to predict. The prediction's training data uses past occurrences of the event to
             make predictions. For example, the Predicted Risk of Resignation model uses the Employee_Exit event to estimate
             likelihood of exit from the organization.
        eventFilter:
          type: string
          description: The object name of a selection concept to filter event occurrences in the prediction's training data.
        labelProperty:
          type: string
          description: The unique ID of the property label for the prediction. This is automatically generated.
        factorProperties:
          type: array
          items:
            type: string
          description: |-
            The list of unique IDs of the properties used as prediction factors.
             Note: Factors are conditions used as part of a Visier prediction. For example, Compensation might be a factor in
             predicting an individual's risk of resignation. Factors are chosen based on:
             - Availability in tenants.
             - Prediction impact, such as salary.
             - Reducing bias.
        factorDimensions:
          type: array
          items:
            type: string
          description: The list of unique IDs of the dimensions used as prediction factors.
        factorConcepts:
          type: array
          items:
            type: string
          description: The list of unique IDs of the concepts used as prediction factors.
        dataStartDate:
          type: string
          description: |-
            The date from which data becomes available for this prediction.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        dataEndDate:
          type: string
          description: |-
            The date from which data is no longer available for this prediction.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
             Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
             limitation in representing large numbers.
        scoreName:
          type: string
          description: The unique name of the score property.  The prediction's formula references the score property as an object. This is automatically generated.
        factorsName:
          type: string
          description: The unique name of the factor property. The prediction's formula references the factor property as an object. This is automatically generated.
        minimumTrainingMonths:
          type: string
          description: The minimum amount of time, in months, to train the prediction model.
        isMultiTenant:
          type: boolean
          description: If `true`, this prediction applies to more than one tenant. If "false", the prediction only applies to the current tenant.
      description: A prediction is a forecast of future events with advanced machine learning models.
    PredictionsDTO:
      type: object
      properties:
        predictions:
          type: array
          items:
            $ref: '#/components/schemas/PredictionDTO'
      description: A collection of predictions.
    PropertiesDTO:
      type: object
      properties:
        properties:
          type: array
          items:
            $ref: '#/components/schemas/PropertyDTO'
      description: A collection of properties.
    PropertyColumnDTO:
      type: object
      properties:
        columnName:
          type: string
          description: |-
            The name of the column. This is optional.
             If not specified, the name of the property is used, or a generic column name if the property is unnamed.
        columnDefinition:
          allOf:
            - $ref: '#/components/schemas/QueryPropertyDTO'
          description: The definition of the property to query on.
      description: A named, result column of a list query.
    PropertyDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the property.
             **Note:** See `Properties` to get the ID.
        displayName:
          type: string
          description: The localized display name of the property.
        description:
          type: string
          description: The localized description of the property.
        dataType:
          type: string
          description: The data type of the property, such as Categorical, HourDuration, or Ratio.
        primitiveDataType:
          type: string
          description: The primitive data type of the property, such as Number, String, or Boolean.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterDefinitionDTO'
          description: The collection of parameters defined for the property.
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagMapElementDTO'
          description: The optional collection of tags defined for this element.
      description: Properties are qualities of an analytic object.
    PropertyReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the property. See `Properties` to get the ID.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the property in Visier, such as the analytic object or event the property is associated with.
             If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a property to query.
    QueryAxisDTO:
      type: object
      properties:
        formula:
          type: string
          description: An axis expressed as a formula.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/SelectionConceptReferenceDTO'
          description: |-
            An axis that uses an existing selection concept in Visier.
             The resulting axis consists of 3 positions: True, False, and Unknown.
        dimensionMemberSelection:
          allOf:
            - $ref: '#/components/schemas/QueryDimensionMemberSelectionDTO'
          description: An axis that uses existing dimension members in Visier.
        memberMapSelection:
          allOf:
            - $ref: '#/components/schemas/QueryMemberMapSelectionDTO'
          description: An axis that uses an existing member map in Visier.
        numericRanges:
          allOf:
            - $ref: '#/components/schemas/QueryNumericRangesDTO'
          description: An axis that uses an existing range dimension in Visier and defines the ranges to query.
        dimensionLevelSelection:
          allOf:
            - $ref: '#/components/schemas/QueryDimensionLevelSelectionDTO'
          description: An axis that uses levels of existing dimensions in Visier.
        dimensionLeafMemberSelection:
          allOf:
            - $ref: '#/components/schemas/QueryDimensionLeafSelectionDTO'
          description: An axis comprised of all non-data leaf members of an existing dimension in Visier.
        dimensionDataMemberSelection:
          allOf:
            - $ref: '#/components/schemas/QueryDimensionDataMemberSelectionDTO'
          description: An axis comprised of all leaf, including data, members of an existing dimension in Visier.
        dimensionLevelWithUncategorizedValueSelection:
          allOf:
            - $ref: '#/components/schemas/QueryDimensionLevelSelectionDTO'
          description: An axis that uses existing dimension levels in Visier, including uncategorized levels.
        tableAxisOptions:
          allOf:
            - $ref: '#/components/schemas/QueryAxisOptionsDTO'
          description: Additional transformations to perform on this axis. Only available when the Accept header is a table format, such as text/csv or application/jsonlines.
      description: An axis of a query used to group data points.
    QueryAxisOptionsDTO:
      type: object
      properties:
        memberDisplayMode:
          enum:
            - UNCHANGED
            - DEFAULT
            - COMPACT
            - DISPLAY
            - MDX
          type: string
          description: |-
            Options to override the display mode for the axis. This overrides the query-level `memberDisplayMode` options value in the query.
             Only available for non-time axes. Use the QueryAxisMemberDisplayMode `memberDisplayMode` to apply different display modes to different axes.
             For example, let's say your query has the `memberDisplayMode` as `DISPLAY` but you want to fetch the object name for a specific dimension.
             With QueryAxisMemberDisplayMode `memberDisplayMode`, you can override that dimension's `memberDisplayMode` to `DEFAULT` instead of `DISPLAY`.

             Valid values are `UNCHANGED`, `DEFAULT`, `COMPACT`, `DISPLAY`, or `MDX`. Default is `UNCHANGED`.
          format: enum
        columnName:
          type: string
          description: If specified, returns the column name of the axis in the response.
      description: |-
        QueryAxisOptions allows you to customize an axis in the query, such as changing the display mode for its cell set values or providing a custom column name.
         Only available when the Accept header is a table format, such as text/csv or application/jsonlines.
    QueryDimensionDataMemberSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
      description: |-
        A QueryDimensionLeafSelection allows you to define a member set consisting exclusively
         of leaf-level, including data, members for the given dimension. Leaf members are those members that have
         no descendents. A member may be a leaf member regardless of the level it is positioned at.
    QueryDimensionLeafSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
      description: |-
        A QueryDimensionLeafSelection allows you to define a member set consisting exclusively
         of leaf-level members for the given dimension. Leaf members are those members that have
         no descendents. A member may be a leaf member regardless of the level it is positioned at.
         This member selection option, excludes data members.
    QueryDimensionLevelSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
        levelIds:
          type: array
          items:
            type: string
          description: The ordered collection of level identifiers for the dimension. See `Dimension`.
      description: |-
        A QueryDimensionLevelSelection allows you to select a dimension level and its members without
         explicitly listing each member. To see the correct notation for levels, see `Dimension`.
    QueryDimensionMemberSelectionDTO:
      type: object
      properties:
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A dimension and its qualifying path to query.
        members:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
          description: A collection of dimension members to select in the query. This must contain at least one member.
      description: A QueryDimensionMemberSelection defines dimension members to select in the query.
    QueryEffectiveDatePropertyDTO:
      type: object
      properties: {}
      description: A special property that yields the effective date for the record
    QueryExecutionOptionsDTO:
      type: object
      properties:
        calendarType:
          enum:
            - TENANT_CALENDAR
            - GREGORIAN_CALENDAR
          type: string
          description: |-
            The calendar type to use. This will be used for all time calculations unless explicitly overridden in
             the calculation itself. Default is TENANT_CALENDAR.
          format: enum
        currencyConversionMode:
          enum:
            - TENANT_CURRENCY_CONVERSION
            - VISIER_CURRENCY_CONVERSION
          type: string
          description: |-
            The currency conversion mode to use. This will be used for all currency conversion calculations
             unless explicitly overridden in the calculation itself. Default is TENANT_CURRENCY_CONVERSION.
          format: enum
        currencyConversionDate:
          type: string
          description: |-
            The currency conversion date to use. If defined, the currency conversion will use the exchange rates as of this date.
             Default is the exchange rate at the end of the query time interval. Format is the number of milliseconds since
             midnight 01 January, 1970 UTC as a string. Note: Epochs are expressed as 64-bit integers and represented as
             stringified longs in JSON due to JSON's inherent limitation in representing large numbers.
        lineageDepth:
          type: integer
          description: The max number of levels of nesting to unwind when determining the lineage for a derived metric value.
          format: int32
        zeroVisibility:
          enum:
            - SHOW
            - HIDE
            - ELIMINATE
          type: string
          description: Show or hide zeros in the result. Default is SHOW.
          format: enum
        nullVisibility:
          enum:
            - SHOW
            - HIDE
            - ELIMINATE
          type: string
          description: Show or hide null or N/A values in the result. Default is SHOW.
          format: enum
        cellDistributionOptions:
          $ref: '#/components/schemas/CellDistributionOptionsDTO'
        axisVisibility:
          enum:
            - SIMPLE
            - VERBOSE
          type: string
          description: The amount of information to return about each axis. Default is SIMPLE.
          format: enum
        enableSparseResults:
          type: boolean
          description: |-
            Retrieve sparse cell sets. Sparse results only retrieve non-zero and non-null cells. Whether a result is truly sparse
             or not is determined by the Visier server.
        internal:
          $ref: '#/components/schemas/InternalQueryExecutionOptionsDTO'
        enableDescendingSpace:
          type: boolean
          description: If true, filter non-time axis member sets to only include members that are in aggregate positions or whose previous position is a leaf
        currencyConversionCode:
          type: string
          description: |-
            The target currency for all currency conversions.
             If not specified, the tenant default currency will be used.
        memberDisplayMode:
          enum:
            - DEFAULT
            - COMPACT
            - DISPLAY
            - MDX
            - COMPACT_DISPLAY
          type: string
          description: |-
            Define the `memberDisplayMode` options to control how member values are rendered in the aggregate query result set. You can override the `memberDisplayMode` on a per-axis basis, if required.

             Valid values are `DEFAULT`, `COMPACT`, `DISPLAY`, or `MDX`. Default is `DEFAULT`.

             * `DEFAULT`: The default member name representation. For non-time members, this means returning the technical member name path.
               For time members, this includes a bracketed member index.
               For example, Time instant member: `2019-06-01T00:00:00.000Z - [0]`
               For example, Time interval member: `2022-06-01T00:00:00.000Z/2022-07-01T00:00:00.000Z - [12]`
             * `COMPACT`: Compacts the time member name representation. This also transforms the representation of time intervals to the end time of the interval.
                For example, Time instant member: `2019-06-01T00:00:00.000Z`
                For example, Time interval member: `2022-07-01T00:00:00.000Z` where the interval member name was `2022-06-01T00:00:00.000Z/2022-07-01T00:00:00.000Z - [12]`
             * `DISPLAY`: Emit the members' display names whenever possible. When combined with `axisVisibility = VERBOSE`, the full display name path will be emitted.
             * `MDX`: Emit member name paths where each element is enclosed in square brackets, `[]`. Multidimensional expression (MDX) display mode automatically encloses time members in square brackets and puts them in `COMPACT` format.
               For example, Location member `North America.United States.California` becomes `[North America].[United States].[California]` in MDX display mode.
               For example, Time instant member `2019-06-01T00:00:00.000Z - [0]` becomes `[2019-06-01T00:00:00.000Z]` in MDX display mode.
          format: enum
      description: A QueryExecutionOptions provides additional instructions to perform a query.
    QueryFilterDTO:
      type: object
      properties:
        formula:
          type: string
          description: A filter expressed as a formula.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/SelectionConceptReferenceDTO'
          description: A filter that uses an existing selection concept in Visier.
        memberSet:
          allOf:
            - $ref: '#/components/schemas/MemberFilterDTO'
          description: A filter that includes or excludes dimension members.
        cohort:
          allOf:
            - $ref: '#/components/schemas/CohortFilterDTO'
          description: A filter that identifies a population at a specific time.
      description: A QueryFilter selects specific data points within a population.
    QueryMemberMapPropertyDTO:
      type: object
      properties:
        memberMap:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A member map and its qualifying path to query.
        targetDimensionName:
          type: string
          description: The name of the member map's dimension that you want to query. The member selection is based on this dimension.
      description: A QueryMemberMapProperty defines an existing member map and its dimension to query.
    QueryMemberMapSelectionDTO:
      type: object
      properties:
        memberMap:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A member map and its qualifying path to query.
        targetDimensionName:
          type: string
          description: The name of the member map's dimension that you want to query. The member selection is based on this dimension.
        members:
          type: array
          items:
            $ref: '#/components/schemas/DimensionMemberReferenceDTO'
          description: A collection of the selected dimension members from the `targetDimension`. This must contain at least one member.
      description: |-
        A QueryMemberMapSelection groups data in a query by dimension members in a member map.
         This allows grouping by a dimension that isn't typically valid on the analytic object being
         queried by selecting a valid member map on the analytic object.
         Note: This is unique to the data query API and cannot be reproduced in Visier's interface.
    QueryNumericRangesDTO:
      type: object
      properties:
        property:
          allOf:
            - $ref: '#/components/schemas/QueryPropertyDTO'
          description: The name and qualifying path of a numeric property. Non-numeric properties are not accepted.
        ranges:
          type: string
          description: The ranges to group data into, expressed as a space-separated string of range-bound values.
        includeNegative:
          type: boolean
          description: If `true`, negative ranges are included. Default is false.
        includeIndependentZeroRange:
          type: boolean
          description: If `true`, 0 is an independent range. Default is false.
        includeAllMember:
          type: boolean
          description: If `true`, a member is included that represents all members on the axis. Default is false.
      description: A QueryNumericRanges groups data into specified ranges based on a property value.
    QueryParameterValueDTO:
      type: object
      properties:
        memberValue:
          allOf:
            - $ref: '#/components/schemas/MemberParameterValueDTO'
          description: A value for a member parameter.
        numericValue:
          allOf:
            - $ref: '#/components/schemas/NumericParameterValueDTO'
          description: A value for a numeric parameter.
        planValue:
          allOf:
            - $ref: '#/components/schemas/PlanParameterValueDTO'
          description: A value for a plan parameter.
        aggregationTypeValue:
          allOf:
            - $ref: '#/components/schemas/AggregationTypeParameterValueDTO'
          description: A value for an aggregation parameter.
      description: An object that contains parameter values for either member or numeric parameters.
    QueryPropertyDTO:
      type: object
      properties:
        formula:
          type: string
          description: A formula-based property.
        property:
          allOf:
            - $ref: '#/components/schemas/PropertyReferenceDTO'
          description: A property reference.
        selectionConcept:
          allOf:
            - $ref: '#/components/schemas/SelectionConceptReferenceDTO'
          description: A selection concept-based property that returns true or false.
        dimension:
          allOf:
            - $ref: '#/components/schemas/DimensionReferenceDTO'
          description: A dimension-based property that returns the full name path of the dimension member that the data point is mapped to.
        memberMapProperty:
          allOf:
            - $ref: '#/components/schemas/QueryMemberMapPropertyDTO'
          description: A member map-based property that uses an existing member map in Visier.
        effectiveDateProperty:
          allOf:
            - $ref: '#/components/schemas/QueryEffectiveDatePropertyDTO'
          description: A property that yields the effective date for the record
      description: |-
        A QueryProperty defines a property of a data point returned from a query.
         This is not the same as a `property` in Visier's data mode.
    QueryTimeIntervalDTO:
      type: object
      properties:
        fromInstant:
          type: string
          description: |-
            The instant from which to extend, in milliseconds since 1970-01-01T00:00:00Z.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
             Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to
             JSON's inherent limitation in representing large numbers.
        fromDateTime:
          type: string
          description: |-
            The instant from which to extend, as an ISO-8601 formatted date time string.
             Valid formats: yyyy-MM-dd, yyyy-MM-dd'T'HH:mm:ss, yyyy-MM-dd'T'HH:mm:ss.SSS.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
        dynamicDateFrom:
          type: string
          description: "Dynamically select the date from which to extend. Valid values are `SOURCE` or `COMPLETE_PERIOD`. Both options use the `source` query definition element to determine the date.\n\n * If `dynamicDateFrom` is `SOURCE`, the query returns data from a date determined by the `source` query definition element. If `dynamicDateFrom` is `COMPLETE_PERIOD`, the query returns data starting from the latest or earliest date with a complete period of data. When `dynamicDateFrom` is specified:\n * If `source` is `metric`, then `dynamicDateFrom` considers the date range of available data for the metric.\n * If `source` is `formula`, then `dynamicDateFrom` considers the date range of available data for the metric in the formula.\n * If `source` is `analyticObject`, then `dynamicDateFrom` considers the date range of available data for the analytic object.\n Then, if `direction` is `BACKWARD`, query backward from the data **end** date and if `direction` is `FORWARD`, query forward from the data **start** date.\n This allows you to keep getting the latest or earliest data without changing your query every time there's new or updated data. \n\n Example: If a tenant has Headcount metric data available from 2023-01-01 to 2024-01-01 (End date exclusive), specifying `dynamicDateFrom`: `SOURCE` with `direction`: `BACKWARD`\n means the query will retrieve data backward from 2024-01-01. The effect is the same as if specifying a `fromDateTime` of 2024-01-01'T'00:00:00.000. \n\n Example: If a tenant has Employee subject data available from 2023-01-01 to 2024-01-01 (End date exclusive), specifying `dynamicDateFrom`: `SOURCE` with `direction`: `FORWARD` \n means the query will retrieve data forward from 2023-01-01. The effect is the same as if specifying a `fromDateTime` of 2023-01-01'T'00:00:00.000.\n\n Example: If a tenant has Employee subject data available from 2023-01-10 to 2023-04-01 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `FORWARD` \n means the query will retrieve data forward from 2023-02-01. The effect is the same as if specifying a `fromDateTime` of 2023-02-01'T'00:00:00.000.\n\n Example: If a tenant has Employee subject data available from 2023-01-01 to 2023-03-15 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `BACKWARD` \n means the query will retrieve data backward from 2023-03-01. The effect is the same as if specifying a `fromDateTime` of 2023-03-01'T'00:00:00.000.\n\n Example: Retrieve a list of EmployeeIDs for the formula extending 1 month backward from the dynamic source date\n      {\n          \"source\": {\n              \"formula\": \"on Employee validUntil instant filterBy(isActiveEmployee) aggregate count(Employee.EmployeeID)\"\n          }, \n          \"columns\": [\n               {\n                  \"columnDefinition\": {\n                      \"property\": {\n                          \"name\": \"Employee.EmployeeID\",\n                          \"qualifyingPath\": \"Employee\"\n                      }\n                  }\n               },\n               {\n                  \"columnDefinition\": {\n                      \"effectiveDateProperty\": {}\n                  }\n               }\n          ],\n          \"timeInterval\": {\n              \"dynamicDateFrom\": \"SOURCE\",\n              \"intervalPeriodType\": \"MONTH\",\n              \"intervalPeriodCount\": 1,\n              \"direction\": \"BACKWARD\"\n          }\n      }"
        intervalPeriodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: The time period type for each interval. Default is MONTH.
          format: enum
        intervalPeriodCount:
          type: integer
          description: The number of time periods per interval.
          format: int32
        direction:
          enum:
            - BACKWARD
            - FORWARD
          type: string
          description: The direction to extend. Default is BACKWARD.
          format: enum
        shift:
          allOf:
            - $ref: '#/components/schemas/TimeShiftDTO'
          description: The amount of time to shift the time interval by, such as backward by one year. Default is none.
      description: |-
        A QueryTimeInterval defines the time interval to query, including the "from" time, period type,
         period count, time direction, and shift to apply
    QueryTimeIntervalsDTO:
      type: object
      properties:
        fromInstant:
          type: string
          description: |-
            The instant from which to extend, in milliseconds since 1970-01-01T00:00:00Z.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
             Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's
             inherent limitation in representing large numbers.
        fromDateTime:
          type: string
          description: |-
            The instant from which to extend, as an ISO-8601 formatted date time string. This value is exclusive.
             Valid formats: yyyy-MM-dd, yyyy-MM-dd'T'HH:mm:ss, yyyy-MM-dd'T'HH:mm:ss.SSS.
             Events that occur on this date are excluded. Subject-based data that ends on this date is included.
        dynamicDateFrom:
          type: string
          description: "Dynamically select the date from which to extend. Valid values are `SOURCE` or `COMPLETE_PERIOD`. Both options use the `source` query definition element to determine the date.\n\n If `dynamicDateFrom` is `SOURCE`, the query returns data from a date determined by the `source` query definition element. If `dynamicDateFrom` is `COMPLETE_PERIOD`, the query returns data starting from the latest or earliest date with a complete period of data. When `dynamicDateFrom` is specified:\n * If `source` is `metric`, then `dynamicDateFrom` considers the date range of available data for the metric.\n * If `source` is `formula`, then `dynamicDateFrom` considers the date range of available data for the metric in the formula.\n * If `source` is `metrics`, then `dynamicDateFrom` considers the date range of available data for the metric in the formula.\n Then, if `direction` is `BACKWARD`, query backward from the data **end** date and if `direction` is `FORWARD`, query forward from the data **start** date. \n This allows you to keep getting the latest or earliest data without changing your query every time there's new or updated data.\n\n Note: For multi-metric queries, if `direction` is `BACKWARD`, query backward from the earliest data end date of all metrics and if `direction` is `FORWARD`, query forward from the latest data start date of all metrics. \n This ensures that all metrics have data in the specified time range.\n\n Example: If a tenant has Headcount metric data available from 2023-01-01 to 2024-01-01 (End date exclusive), specifying `dynamicDateFrom`: `SOURCE` with `direction`: `BACKWARD` \n means the query will retrieve data backward from 2024-01-01. The effect is the same as if specifying a `fromDateTime` of 2024-01-01'T'00:00:00.000. \n\n Example: If a tenant has Employee subject data available from 2023-01-10 to 2023-04-01 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `FORWARD` \n means the query will retrieve data forward from 2023-02-01. The effect is the same as if specifying a `fromDateTime` of 2023-02-01'T'00:00:00.000. \n\n Example: If a tenant has Employee subject data available from 2023-01-01 to 2023-03-15 (End date exclusive), specifying `dynamicDateFrom`: `COMPLETE_PERIOD` with `direction`: `BACKWARD` \n means the query will retrieve data backward from 2023-03-01. The effect is the same as if specifying a `fromDateTime` of 2023-03-01'T'00:00:00.000. \n\n Example: If a tenant has Headcount data available from 2023-01-01 to 2024-09-01 and Exit Count data available from 2023-01-01 to 2024-01-01, specifying `dynamicDateFrom`: `SOURCE` with `direction`: `BACKWARD` means the query will retrieve data backward from 2024-01-01. \n Exit Count has an earlier data end date than Headcount, so `dynamicDateFrom` retrieves data backward from Exit Count's data end date to ensure both metrics have data in the specified time range.\n\n Example: Retrieve Headcount (employeeCount) extending 1 month backward from Headcount's dynamic source date\n      {\n          \"query\": {\n              \"source\": {\n                  \"metric\": \"employeeCount\"\n              },\n              \"timeIntervals\": {\n                  \"dynamicDateFrom\": \"SOURCE\",\n                  \"intervalPeriodType\": \"MONTH\",\n                  \"intervalCount\": 1,\n                  \"direction\": \"BACKWARD\"\n              }\n          }\n      }"
        intervalPeriodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: The time period type for each interval. Default is MONTH.
          format: enum
        intervalPeriodCount:
          type: integer
          description: The number of time periods per interval. Default is 1.
          format: int32
        intervalCount:
          type: integer
          description: The number of intervals. Default is 1.
          format: int32
        direction:
          enum:
            - BACKWARD
            - FORWARD
          type: string
          description: The direction to extend. Defaults is BACKWARD.
          format: enum
        shift:
          allOf:
            - $ref: '#/components/schemas/TimeShiftDTO'
          description: The amount of time to shift the time interval by, such as backward by one year.
        trailingPeriodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: |-
            The time period type for each trailing period. If `trailingPeriodCount` is defined and `trailingPeriodType` is undefined, the default trailing period type is `MONTH`.
             If both `trailingPeriodType` and `trailingPeriodCount` are undefined, `intervalPeriodCount` is used as the trailing period count.
             Note: This parameter is only applicable to metrics that can calculate trailing time. If defined on a metric that doesn't have trailing time, the platform ignores the parameter.
          format: enum
        trailingPeriodCount:
          type: integer
          description: |-
            The number of time periods per trailing period. If `trailingPeriodType` is defined and `trailingPeriodCount` is undefined, the default trailing period count is 1.
             Note: This parameter is only applicable to metrics that can calculate trailing time. If defined on a metric that doesn't have trailing time, the platform ignores the parameter.
          format: int32
      description: |-
        A QueryTimeIntervals defines a series of time intervals to query, including the "from" time, period type, period count,
         number of intervals, time direction, and shift to apply to each time interval.
    ScenarioOrSnapshotDTO:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the scenario or snapshot.
        displayName:
          type: string
          description: The scenario or snapshot display name.
      description: The unique identifier and display name for plan scenarios and snapshots.
    SelectionConceptDTO:
      type: object
      properties:
        id:
          type: string
          description: |-
            The unique ID of the selection concept
             Note: See `SelectionConcepts` to get the ID.
        displayName:
          type: string
          description: The localized display name of the selection concept.
        description:
          type: string
          description: The localized description of the selection concept.
        visibleInApp:
          type: boolean
          description: '`true` if this selection concept is set to be visible in your solution.'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagMapElementDTO'
          description: The optional collection of tags defined for this element.
      description: Selection concepts select a population of subject members of a given subject or event.
    SelectionConceptReferenceDTO:
      type: object
      properties:
        name:
          type: string
          description: The ID of the selection concept. See `SelectionConcepts` to get the ID.
        qualifyingPath:
          type: string
          description: |-
            The qualifying path to the selection concept in Visier, such as the analytic object or event the selection
             concept is associated with. If the path has multiple objects, each object is separated by a period.
      description: The name and qualifying path of a selection concept to query.
    SelectionConceptsDTO:
      type: object
      properties:
        selectionConcepts:
          type: array
          items:
            $ref: '#/components/schemas/SelectionConceptDTO'
      description: A collection of selection concepts
    SnapshotQueryExecutionDTO:
      type: object
      properties:
        source:
          allOf:
            - $ref: '#/components/schemas/ListQuerySourceDTO'
          description: The source data that you want to query.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/PropertyColumnDTO'
          description: The columns to include in the result. This must contain at least one column.
        sortOptions:
          type: array
          items:
            $ref: '#/components/schemas/SortOptionDTO'
          description: The index and direction to sort a column in the `columns` array.
        filters:
          type: array
          items:
            $ref: '#/components/schemas/QueryFilterDTO'
          description: The filters of this query. Omit `filters` if no filtering is required.
        timeIntervals:
          allOf:
            - $ref: '#/components/schemas/QueryTimeIntervalsDTO'
          description: The time intervals to query.
        parameterValues:
          type: array
          items:
            $ref: '#/components/schemas/QueryParameterValueDTO'
          description: The parameter values for either member or numeric parameters.
        options:
          allOf:
            - $ref: '#/components/schemas/SnapshotQueryExecutionOptionsDTO'
          description: Additional instructions for your query, such as a calendar type or conversion information.
    SnapshotQueryExecutionOptionsDTO:
      type: object
      properties:
        limit:
          type: integer
          description: |-
            The maximum number of entries to return. Default is to return all entries. If `page` is defined but
             limit is not defined, limit will be set to a default value of 1000.
          format: int32
        queryMode:
          enum:
            - DEFAULT
            - FILL
            - FAIL
          type: string
          description: Determines how the query should handle column definitions that the query is unable to resolve. Default is DEFAULT.
          format: enum
        omitHeader:
          type: boolean
          description: |-
            Option to omit the header from the result.
             If true, queryMode must be either FILL or FAIL.
             Default is false.
        calendarType:
          enum:
            - TENANT_CALENDAR
            - GREGORIAN_CALENDAR
          type: string
          description: |-
            The calendar type to use. This will be used for all time calculations unless explicitly overridden in
             the calculation itself. Default is TENANT_CALENDAR.
          format: enum
        currencyConversionDate:
          type: string
          description: The currency conversion date to use. If defined, the currency conversion will use the exchange rates as of this date.
        page:
          type: integer
          description: |-
            A page defines a subset of the overall result set. The number of rows per page is equal to limit
             with the exception of the last page in the result set which may contain fewer rows. `Page` is an index
             that begins at 0. The index to start retrieving results is calculated by multiplying `page` by `limit`.
          format: int32
        multipleTables:
          type: boolean
          description: |-
            Option to return multiple table files as zipped archive for derived metrics.
             Default is false. If false, one table is returned for the drill-through metric.
        currencyConversionCode:
          type: string
          description: |-
            The optional target currency for all currency conversions.
             If not specified, the tenant default currency will be used.
        dateTimeDisplayMode:
          enum:
            - EPOCH
            - DATETIME
          type: string
          description: |-
            Control how date-time values are displayed in the result set.
             Supported values:
             * `EPOCH`: The number of elapsed milliseconds since January 1, 1970 in UTC timezone. This is the default.
             * `DATETIME`: The date-time value displayed in `yyyy-MM-dd HH:mm:ssZZ` format.
          format: enum
      description: A SnapshotQueryExecutionOptions provides additional instructions to perform a snapshot query.
    SortOptionDTO:
      type: object
      properties:
        columnIndex:
          type: integer
          description: The index of the column of the list query, staring from 0.
          format: int32
        sortDirection:
          enum:
            - SORT_ASCENDING
            - SORT_DESCENDING
          type: string
          description: The sort direction.
          format: enum
      description: Sort option for a column of a list query.
    SqlLikeQueryExecutionDTO:
      type: object
      properties:
        query:
          type: string
          description: The SQL-like query string
        options:
          allOf:
            - $ref: '#/components/schemas/QueryExecutionOptionsDTO'
          description: Optional options that currently that cannot be expressed in SQL-like
      description: |-
        *
         Request body for SQL-like query executions
    TagMapElementDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the tag.
        displayName:
          type: string
          description: The localized display name of the tag.
      description: Tag identifier and display name pair.
    TimeShiftDTO:
      type: object
      properties:
        periodType:
          enum:
            - MONTH
            - DAY
            - WEEK
            - QUARTER
            - YEAR
          type: string
          description: The time period type for the shift.
          format: enum
        periodCount:
          type: integer
          description: The number of intervals. Default is 1.
          format: int32
        direction:
          enum:
            - BACKWARD
            - FORWARD
          type: string
          description: The direction to extend. Default is BACKWARD.
          format: enum
      description: The amount of time to shift the time interval by, such as backward by one year.
    ValidityRangeDTO:
      type: object
      properties:
        start:
          type: string
          description: |-
            The date from which data becomes available.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
        end:
          type: string
          description: |-
            The date from which data is no longer available.
             Note: Format is the number of milliseconds since midnight 01 January, 1970 UTC as a string.
      description: |-
        A pair of values that represent the time interval to which the data is valid.
         The validity range is defined in Unix epoch format and UTC timezone.
         Note: Epochs are expressed as 64-bit integers and represented as stringified longs in JSON due to JSON's inherent
         limitation in representing large numbers.
    Status:
      type: object
      properties:
        errorCode:
          type: string
          description: Error classification.
        message:
          type: string
          description: Error message describing the root cause of the error.
        rci:
          type: string
          description: Optional root cause identifier.
      description: The response structure for errors.
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: VisierASIDToken
      in: cookie
    ApiKeyAuth:
      type: apiKey
      name: apikey
      in: header
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /v1/auth/oauth2/authorize
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
        password:
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
tags:
  - name: DataModel
    description: |-
      Data model APIs allow you to discover the objects that make up your Visier solution and provide detailed information
       on the object's schema. You can retrieve detailed information about objects in Visier by retrieving a list of all
       objects or retrieving information about an object by object ID.
       The types of objects you can retrieve using the data model APIs are:
       - Analytic objects
       - Properties
       - Dimensions
       - Selection concepts
       - Metrics
       - Predictions
  - name: Query
    description: 'The Query API provides methods to retrieve data from Visier using the data query API: aggregate and list.'
security:
  - ApiKeyAuth: []
    BearerAuth: []
  - ApiKeyAuth: []
    CookieAuth: []
  - ApiKeyAuth: []
    OAuth2Auth: []
