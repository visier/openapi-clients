# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
  title: Visier Administration APIs
  description: Visier APIs for managing your tenant or tenants in Visier. You can programmatically manage user accounts in Visier, the profiles and permissions assigned to users, and to make changes in projects and publish projects to production. Administrating tenant users can use administration APIs to manage their analytic tenants and consolidated analytics tenants.<br>**Note:** If you submit API requests for changes that cause a project to publish to production (such as assigning permissions to users or updating permissions), each request is individually published to production, resulting in hundreds or thousands of production versions. We recommend that you use the `ProjectID` request header to make changes in a project, if `ProjectID` is available for the API endpoint.
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 22222222.99201.1828
paths:
  /v1/admin/capabilities:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all permission capabilities
      description: |-
        Retrieve all the permission capabilities in your tenant.
         You can use the returned capabilities in other API calls when creating or updating permissions to assign the capability to the permission.

         To specify the project in which to retrieve the permission capabilities, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetCapabilities
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the capabilities from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetCapabilitiesAPIResponseDTO'
  /v1/admin/capabilities/{capabilityId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a permission capability's details
      description: |-
        Retrieve the details of a specific capability.

         To specify the project in which to retrieve the permission capability, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetCapability
      parameters:
        - name: capabilityId
          in: path
          description: The unique identifier of the capability you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a capability from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.CapabilityDTO'
  /v1/admin/content-packages:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all content packages
      description: |-
        Retrieve the list of available content packages.
         You can use the returned content packages in other API calls when creating or updating permissions to add the content package to the permission.

         To specify the project in which to retrieve the available content packages, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetContentPackages
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the content packages from.
          schema:
            type: string
        - name: searchString
          in: query
          description: |-
            Optional search string to return only content packages whose display name or description contains that search string.
             If searchString is empty or not provided, the response returns a list of all content packages.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetContentPackagesAPIResponseDTO'
  /v1/admin/content-packages/{contentPackageId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a content package's details
      description: |-
        Retrieve the details of a specific content package.

         To specify the project in which to retrieve a content package, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetContentPackage
      parameters:
        - name: contentPackageId
          in: path
          description: The unique identifier of the content package you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a content package from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ContentPackageDTO'
  /v1/admin/data-access-sets:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all data access sets
      description: |-
        Retrieve a list of all shareable data access sets. Data access sets define the level of access that users have to properties and property values for the analytic object in a permission. Data access sets also grant access to properties of subjects that are referenced by the analytic object in the permission.
         You can assign data access sets to a permission when creating or updating permissions.

         To specify the project in which to retrieve the shareable data access sets, provide a project UUID in the `ProjectID` request header.

         **Note:** If the number of valid data access sets exceeds the default limit of 100, the response status code is 206. To retrieve more than 100 data access sets, set `limit` to a higher number.
      operationId: Permissions_GetDataAccessSets
      parameters:
        - name: analyticObjectId
          in: query
          description: Specify the analytic object ID to retrieve the shareable data access sets for. Default is all analytic objects.
          schema:
            type: string
        - name: with
          in: query
          description: |-
            The information about the data access set to include in the request response.
             * If empty, returns basic information for the data access set, including its unique ID, display name, description, and analytic object ID.
             * If `details`, returns basic information and property data access information (`propertyAccessConfigs`).
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: The maximum number of data access sets to return. Default is 100. Maximum is 1000.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetDataAccessSetsAPIResponseDTO'
    post:
      tags:
        - Permissions
      summary: Create shareable data access sets
      description: |-
        Create shareable data access sets. Shareable data access sets let you reuse common data access configurations in multiple permissions.

         To specify the project in which to create shareable data access sets, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_CreateDataAccessSets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.CreateDataAccessSetRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.BulkDataAccessSetResponseDTO'
  /v1/admin/data-access-sets/{dataAccessSetId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a data access set's details
      description: |-
        Retrieve the details of a specific shareable data access set. You must know the ID of the data access set to retrieve its details. To retrieve data access set IDs, see `GET v1/admin/data-access-sets`.

         To specify the project in which to retrieve the shareable data access set, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetDataAccessSet
      parameters:
        - name: dataAccessSetId
          in: path
          description: The unique identifier of the data access set you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.DataAccessSetDTO'
  /v1/admin/data-security-objects:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of data security objects
      description: |-
        Retrieve the list of available data security objects.
         Data security objects are analytic objects and their related objects that are available to define
         permissions' data security profiles.

         To specify the project in which to retrieve the available data security objects, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetDataSecurityObjects
      parameters:
        - name: id
          in: query
          description: |-
            The unique identifiers of the data security objects (analytic objects) to retrieve.
             Default is all data security objects.
          schema:
            type: array
            items:
              type: string
        - name: includeDetails
          in: query
          description: |-
            If `true`, the response includes the analytic objects (display name, ID, and object type), related objects,
             securable properties, and securable dimensions. If `false`, the response only includes analytic objects
             (display name, ID, and object type). Default is `false`.
          schema:
            type: boolean
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve data security objects from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetDataSecurityObjectsAPIResponseDTO'
  /v1/admin/permissions:
    get:
      tags:
        - Permissions
      summary: Retrieve a list of all permissions
      description: |-
        Retrieve the full list of user permissions in your tenant.

         To specify the project in which to retrieve permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetPermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the permissions from.
          schema:
            type: string
        - name: includeDetails
          in: query
          description: |-
            If `true`, returns the permission's details. If `false`, only returns the permissions' ID, display name,
             and description. Default is `false`.
          schema:
            type: boolean
        - name: includeDetailsWithStatus
          in: query
          description: |-
            If `true`, returns the validity statuses for the permission's properties in data access sets and the
             permission's dimensions, dimension members, and hierarchy properties in member filters. If `false`,
             doesn't return validity status information. Default is `false`.
          schema:
            type: boolean
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetPermissionsAPIResponseDTO'
    put:
      tags:
        - Permissions
      summary: Update permissions
      description: |-
        Update existing permissions.

         To specify the project in which to update permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_UpdatePermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to update permissions in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsListDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionBulkOperationResponseDTO'
    post:
      tags:
        - Permissions
      summary: Create permissions
      description: |-
        Create new permissions. Administrating tenant users can specify the tenant in which to add these permissions.

         To specify the project in which to create permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_CreatePermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to create permissions in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsListDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionBulkOperationResponseDTO'
    delete:
      tags:
        - Permissions
      summary: Delete permissions
      description: |-
        Delete existing permissions.

         To specify the project in which to delete permissions, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_DeletePermissions
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to delete permissions from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.DeletePermissionsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionBulkOperationResponseDTO'
  /v1/admin/permissions/users:
    put:
      tags:
        - UsersV1
      summary: Assign permissions to users
      description: |-
        This API allows you to assign a permission to specific users. Administrating tenant users can assign permissions
         to users in the administrating tenant and in the analytic tenants those users belong to.

         To assign permissions to users in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can assign permissions to users in analytic tenants by providing a tenant code and project ID in the request body.
      operationId: UsersV1_AssignPermissions
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AssignRevokePermissionsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AssignRevokePermissionsResponseDTO'
    delete:
      tags:
        - UsersV1
      summary: Remove permissions from users
      description: |-
        This API allows you to remove a permission from specific users. Administrating tenant users can remove permissions
         from users in the administrating tenant and in the analytic tenants those users belong to.

         To remove permission from users in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can remove permissions from users in analytic tenants by providing a tenant code and project ID in the request body.
      operationId: UsersV1_RemovePermissions
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AssignRevokePermissionsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AssignRevokePermissionsResponseDTO'
  /v1/admin/permissions/{permissionId}:
    get:
      tags:
        - Permissions
      summary: Retrieve a permission's details
      description: |-
        Retrieve the details for a specified permission.

         To specify the project in which to retrieve the permission, provide a project UUID in the `ProjectID` request header.
      operationId: Permissions_GetPermission
      parameters:
        - name: permissionId
          in: path
          description: The unique identifier of the permission you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a permission from.
          schema:
            type: string
        - name: includeDetailsWithStatus
          in: query
          description: |-
            If `true`, returns the validity statuses for the permission's properties in data access sets and the
             permission's dimensions, dimension members, and hierarchy properties in member filters. If `false`,
             doesn't return validity status information. Default is `false`.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionDTO'
  /v1/admin/permissions/{permissionId}/users:
    get:
      tags:
        - UsersV1
      summary: Retrieve users that are assigned a specific permission
      description: |-
        This API allows you to retrieve all the users that are assigned a specified permission. You must know the ID
         of the permission you want to retrieve users for.

         To specify the project in which to retrieve users assigned to a specific permission for the login tenant, provide
         a project UUID in the `ProjectID` request header. If omitted, the request retrieves users assigned to a specific permission from production.
      operationId: UsersV1_GetPermissionAssignedUsers
      parameters:
        - name: permissionId
          in: path
          description: The unique identifier of the permission you want to retrieve users for.
          required: true
          schema:
            type: string
        - name: includeUserGroups
          in: query
          description: |-
            If `true`, the response returns a list of all users that are assigned the permission, including users that are
             assigned the permission through a user group.
             If `false`, the response returns a list of the users that are directly assigned the permission.
          schema:
            type: boolean
        - name: tenantFilter
          in: query
          description: Specify the tenant to retrieve the list of users from.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return. The maximum number of tenants to retrieve is 100.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.PermissionAssignedUsersDTO'
  /v1/admin/production-versions:
    get:
      tags:
        - ProductionVersions
      summary: Retrieve a list of all production versions
      description: Retrieve a list of all projects that were published to production, ordered from latest published to earliest published.
      operationId: ProductionVersions_GetProductionVersions
      parameters:
        - name: limit
          in: query
          description: The maximum number of production versions to return. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first production version to return. Default is 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetProductionVersionsAPIResponseDTO'
    post:
      tags:
        - ProductionVersions
      summary: Perform an operation on production versions
      description: "Perform operations on production versions, such as exporting a production project's committed changes. \n \n If exporting, please specify `Accept: application/zip, application/json` in the header. The API returns exported changes in ZIP format and error messages in JSON format. If your request returns an error and it doesn't accept `application/json`, you will receive an HTTP 406 status code instead of the appropriate error response body."
      operationId: ProductionVersions_PostProductionVersions
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProductionVersionsAPIOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProductionVersionsAPIOperationResponseDTO'
  /v1/admin/production-versions/{productionVersionId}:
    post:
      tags:
        - ProductionVersions
      summary: Perform an operation on a production version
      description: |-
        Perform operations on a specific production version. The following operations are supported:
         * `rollBackTo`: Create a project that rolls back the production version to the specified version. The project contains uncommitted changes that reverse the published versions after the target production version.
      operationId: ProductionVersions_PostProductionVersion
      parameters:
        - name: productionVersionId
          in: path
          description: The production version to use as the target of the operation; for example, the production version to roll back to for the `rollBackTo` operation.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProductionVersionAPIOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProductionVersionAPIOperationResponseDTO'
  /v1/admin/profiles:
    get:
      tags:
        - Profiles
      summary: Retrieve a list of all profiles
      description: |-
        Get a list of all available profiles. For administrating tenants,
         this retrieves all administrating tenant profiles.
      operationId: Profiles_GetAllProfiles
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfilesGetAPIResponseDTO'
  /v1/admin/profiles/accessible-tenants:
    get:
      tags:
        - Profiles
      summary: Retrieve a list of analytic tenant profiles
      description: |-
        Retrieve a list of profiles available for analytic tenants.

         **Note:** Administrating tenants only.
      operationId: Profiles_GetAnalyticProfiles
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfilesGetAPIResponseDTO'
  /v1/admin/profiles/accessible-tenants/{profileId}:
    get:
      tags:
        - Profiles
      summary: Retrieve the details of an analytic tenant profile
      description: |-
        Get the details of an analytic tenant profile.

         **Note:** Administrating tenants only.
      operationId: Profiles_GetAnalyticProfileDetail
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to retrieve details for.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfileGetAPIResponseDTO'
  /v1/admin/profiles/accessible-tenants/{profileId}/assign:
    put:
      tags:
        - Profiles
      summary: Assign an analytic tenant profile to administrating tenant users
      description: |-
        Assign an analytic tenant profile to a list of administrating tenant users
         for a list of analytic tenants.

         **Note:**
          - Administrating tenants only.
          - You can revoke a profile from a user with this request by updating the validityEndTime to be
            "less than" the current time (that is, in the past).
      operationId: Profiles_AssignAnalyticProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to assign.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AccessibleTenantProfileAssignmentRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AccessibleTenantProfileAssignmentResponseDTO'
  /v1/admin/profiles/accessible-tenants/{profileId}/remove:
    delete:
      tags:
        - Profiles
      summary: Remove an analytic tenant profile from administrating tenant users
      description: |-
        Remove an analytic tenant profile from a list of administrating tenant users for a list of analytic tenants.

         **Note:** Administrating tenants only.
      operationId: Profiles_RemoveAnalyticProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to remove.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.AccessibleTenantProfileRevokeRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AccessibleTenantProfileRevokeResponseDTO'
  /v1/admin/profiles/{profileId}:
    get:
      tags:
        - Profiles
      summary: Retrieve the details of a profile
      description: |-
        Get the details of a specific profile. For administrating tenants, this retrieves
         the details of administrating tenant profiles.
      operationId: Profiles_GetProfileDetail
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to retrieve details for.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProfileGetAPIResponseDTO'
  /v1/admin/profiles/{profileId}/assign:
    put:
      tags:
        - Profiles
      summary: Assign a profile to a list of users
      description: |-
        Assign a profile to a list of users. For administrating tenants,
         this assigns an administrating tenant profile to a list of users.
      operationId: Profiles_AssignProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to assign to a list of users.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.LocalTenantProfileAssignmentRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.LocalTenantProfileAssignmentResponseDTO'
  /v1/admin/profiles/{profileId}/remove:
    delete:
      tags:
        - Profiles
      summary: Remove a profile from a list of users
      description: |-
        Remove a profile from a list of users. For administrating tenants, this
         removes an administrating tenant profile from a list of users.
      operationId: Profiles_RemoveProfile
      parameters:
        - name: profileId
          in: path
          description: The ID of the profile to remove to a list of users.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.LocalTenantProfileRevokeRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.LocalTenantProfileRevokeResponseDTO'
  /v1/admin/projects:
    get:
      tags:
        - Projects
      summary: Retrieve a list of draft projects accessible to the user
      description: |-
        Get a list of draft projects accessible to the requesting user in the tenant.

         A project is accessible if it is owned by the user or shared to the user.
      operationId: Projects_GetProjects
      parameters:
        - name: with
          in: query
          description: |-
            The types of draft projects to include in the request response.
             * If empty, returns all the `Open` draft projects.
             * If `Open`, returns all Open draft projects.
             * If `Approval`, returns all draft projects in the approval stage. Changes cannot made in Approval projects.
             * If `Rejected`, returns all draft projects that have been rejected. Changes cannot be committed in Rejected projects.
             * If `Archived`, returns all draft projects that have been archived. Changes cannot be committed in Archived projects.
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: The number of projects to return per type. The maximum number of projects to retrieve per type is 1000. The default is 100.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.GetProjectsAPIResponseDTO'
    post:
      tags:
        - Projects
      summary: Create a new draft project
      description: Create a new draft project in the tenant.
      operationId: Projects_CreateProject
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProjectDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectDTO'
  /v1/admin/projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Retrieve a draft project's information
      description: |-
        Retrieve the details of an accessible draft project. You must know the ID of the project to retrieve its details. To retrieve draft project IDs, see `GET /v1/admin/projects`.

         A project is accessible if it is owned by the user or shared to the user.
      operationId: Projects_GetProject
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the draft project you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectDTO'
    post:
      tags:
        - Projects
      summary: Perform an operation on a draft project
      description: |-
        Perform operations on a draft project. The following operations are supported:
         * `commitAndPublish`: Commits project changes and publishes the project to production.
      operationId: Projects_RunProjectOperation
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.ProjectOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectOperationResponseDTO'
    delete:
      tags:
        - Projects
      summary: Delete a draft project
      description: Delete a draft project in the tenant. The project will first be archived if applicable.
      operationId: Projects_DeleteProject
      parameters:
        - name: projectId
          in: path
          description: The unique ID of the draft project to be deleted.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectDTO'
  /v1/admin/projects/{projectId}/commits:
    get:
      tags:
        - Projects
      summary: Retrieve a list of all committed changes in a project
      description: Retrieve the full list of all committed changes in a project.
      operationId: Projects_GetProjectCommits
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the draft project you want to retrieve the committed changes for.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of committed changes to return. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first committed change to return. Default is 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectCommitsAPIResponseDTO'
    put:
      tags:
        - Projects
      summary: Import committed changes into a project
      description: Import a ZIP file that contains a list of committed changes into a draft project. The file must be an export from `POST /v1/admin/production-versions`. Use this API after making changes in a development environment to copy the changes to a draft project in your production environment.
      operationId: Projects_PutProjectCommits
      parameters:
        - name: projectId
          in: path
          description: The unique identifier of the draft project you want to import committed changes into.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PutProjectCommitsRequest'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ProjectCommitsAPIResponseDTO'
  /v1/admin/system-status:
    get:
      tags:
        - SystemStatus
      summary: Check the overall current status of Visier's systems
      description: |-
        Check the current overall status of Visier's systems.

         The overall status is one of:
         * ``UP`` : All systems are operational.
         * `DOWN`: At least one system is not fully operational.
      operationId: SystemStatus_SystemStatus
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemstatus.SystemStatusDTO'
    post:
      tags:
        - SystemStatus
      summary: Check the overall current status of Visier's systems
      description: |-
        Check the current overall status of Visier's systems.

         The overall status is one of:
         * ``UP`` : All systems are operational.
         * `DOWN`: At least one system is not fully operational.
      operationId: SystemStatus_PostSystemStatus
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemstatus.SystemStatusDTO'
  /v1/admin/tenants:
    get:
      tags:
        - TenantsV1
      summary: Retrieve a list of all analytic tenants
      description: |-
        Retrieve the full list of analytic tenants managed by you with their current states and the
         content modules assigned to them, and all other relevant details for the tenants if requested.
      operationId: TenantsV1_GetTenants
      parameters:
        - name: limit
          in: query
          description: The limit of analytic tenant details to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: details
          in: query
          description: If `true`, the response returns information about the data version and modules.
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.AllTenantsStatusAPIDTO'
    post:
      tags:
        - TenantsV1
      summary: Add an analytic tenant
      description: |-
        Prior to processing and loading an analytic tenant's data files, you must provision, or create, that tenant.
         A provisioned analytic tenant is automatically enabled. If the tenant's data is loaded after provisioning, that
         data is immediately accessible by their users.

         Create an analytic tenant and identify the applications assigned to the tenant. Visier
         organizes content under a set of modules.

         Contact Visier Support to determine the list of modules allocated to you.
      operationId: TenantsV1_AddTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
  /v1/admin/tenants/batch:
    post:
      tags:
        - TenantsV1
      summary: Add analytic tenants
      description: |-
        Prior to processing and loading an analytic tenant's data files, you must provision, or create, that tenant.
         A provisioned analytic tenant is automatically enabled. If the tenant's data is loaded after provisioning, that
         data is immediately accessible by their users.

         Create one or more analytic tenants and identify the applications assigned to the tenants. The maximum number of tenants to create in one request is 200.

         Contact Visier Support to determine the list of modules allocated to you.
      operationId: TenantsV1_AddTenants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.BatchTenantProvisionAPIDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.BatchTenantProvisionAPIDTO'
  /v1/admin/tenants/{tenantId}:
    get:
      tags:
        - TenantsV1
      summary: Retrieve an analytic tenant's details
      description: |-
        Retrieve all details for a specified analytic tenant. Doing so allows you to see the current state
         of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
      operationId: TenantsV1_GetTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantDetailAPIDTO'
    put:
      tags:
        - TenantsV1
      summary: Update an analytic tenant
      description: |-
        You may need to update analytic tenants as they grow and as your organization upgrades the content available to
         them. You may also encounter a scenario where an analytic tenant transitions across different industries.

         To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their
         industry code in the Visier system.

         You can use this API to update any field on an analytic tenant, except `tenantCode`.
      operationId: TenantsV1_UpdateTenant
      parameters:
        - name: tenantId
          in: path
          description: The ID of the tenant to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UpdateTenantModel'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
    delete:
      tags:
        - TenantsV1
      summary: Deprovision an analytic tenant
      description: |-
        Warning! Deprovisioning an analytic tenant is not reversible.
         Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/{tenantId}/disable`**.

         This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant
         may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.

         If successful, the response returns the status "Deprovisioned". This indicates that the tenant is scheduled for
         deprovisioning, which may take several days to complete.
      operationId: TenantsV1_DeleteTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v1/admin/tenants/{tenantId}/disable:
    put:
      tags:
        - TenantsV1
      summary: Disable an analytic tenant
      description: |-
        Disable an analytic tenant and remove access to Visier visualizations for the tenant's users.

         You must disable an analytic tenant before deprovisioning, or removing, it from the system.
      operationId: TenantsV1_DisableTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v1/admin/tenants/{tenantId}/enable:
    put:
      tags:
        - TenantsV1
      summary: Enable an analytic tenant
      description: |-
        An analytic tenant is enabled when you provision or create the tenant.

         Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not
         want that tenant to have access to Visier visualizations, but now do.
      operationId: TenantsV1_EnableTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v1/admin/user-groups:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of all user groups
      description: |-
        This API allows you to retrieve the full list of user groups in a tenant.

         To specify the project in which to retrieve user groups for a tenant, provide a project UUID in the `ProjectID` request header. If omitted, the request retrieves user information from production.
      operationId: UsersV1_GetAllUserGroups
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the list of user groups from.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          schema:
            type: integer
            format: uint32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset.
          schema:
            type: integer
            format: uint32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupsGetAPIResponseDTO'
  /v1/admin/user-groups/permissions:
    put:
      tags:
        - UsersV1
      summary: Assign permissions to user groups
      description: |-
        This API allows you to assign a permission to specific user groups. This assigns the permission to all users in the user group.

         To assign permissions to user groups in a project, provide a project UUID in the `ProjectID` request header.
      operationId: UsersV1_AssignPermissionsToUserGroups
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.PermissionsToUserGroupForTenantDTO'
    delete:
      tags:
        - UsersV1
      summary: Remove permissions from user groups
      description: |-
        This API allows you to remove a permission from specific user groups.

         To remove permissions from user groups in a project, provide a project UUID in the `ProjectID` request header.
      operationId: UsersV1_RevokePermissionsFromUserGroups
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.PermissionsToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.PermissionsToUserGroupForTenantDTO'
  /v1/admin/user-groups/users:
    put:
      tags:
        - UsersV1
      summary: Assign users to user groups
      description: |-
        This API allows you to assign users to specific user groups.

         To assign users to user groups in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can assign users to user groups in multiple analytic tenants by providing a tenant code and project ID in the request body.

         We recommend that administrating tenants set the analytic tenant in which to execute the API call using the `TargetTenantID` request header.
      operationId: UsersV1_AddUsersToUserGroup
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UsersToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.SecurityAssignmentResponseDTO'
    delete:
      tags:
        - UsersV1
      summary: Remove users from user groups
      description: |-
        This API allows you to remove users from specific user groups.

         To remove users from user groups in a project for the administrating tenant, provide a project UUID in the `ProjectID` request header.
         Administrating tenants can remove users to user groups in multiple analytic tenants by providing a tenant code and project ID in the request body.

         We recommend that administrating tenants set the analytic tenant in which to execute the API call using the `TargetTenantID` request header.
      operationId: UsersV1_RemoveUsersFromUserGroup
      parameters:
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UsersToUserGroupsRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.SecurityAssignmentResponseDTO'
  /v1/admin/user-groups/{userGroupId}/users:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of user group users
      description: |-
        This API allows you to retrieve the list of users explicitly assigned to a user group. Users that are implicitly
         included in the user group through the user group's dynamic filters are not returned by this endpoint.

         To specify the project in which to retrieve user group users for the login tenant, provide
         a project UUID in the `ProjectID` request header. If omitted, the request retrieves user group users from production.
      operationId: UsersV1_GetUserGroupUsers
      parameters:
        - name: userGroupId
          in: path
          description: The ID of user group.
          required: true
          schema:
            type: string
        - name: tenantFilter
          in: query
          description: Specifies the tenant to retrieve the list of users from.
          schema:
            type: string
        - name: limit
          in: query
          description: The number of results to return. The maximum number of tenants to retrieve is 100.
          schema:
            type: integer
            format: uint32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: uint32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupsUsersDTO'
  /v1/admin/users:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of all users
      description: |-
        This API allows you to retrieve the full list of users and their current states.

         To specify the project in which to retrieve user information, provide a project UUID in the `ProjectID` request header. If omitted, the request retrieves user information from production.
      operationId: UsersV1_GetAllUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a list of users from.
          schema:
            type: string
        - name: assignedProfiles
          in: query
          description: If true, the response returns a list of the user's assigned profiles.
          schema:
            type: boolean
        - name: assignedPermissions
          in: query
          description: If true, the response returns the user's assigned permissions.
          schema:
            type: boolean
        - name: assignedUserGroups
          in: query
          description: If true, the response returns the user's assigned user groups.
          schema:
            type: boolean
        - name: limit
          in: query
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          schema:
            type: integer
            format: uint32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: uint32
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AllUsersGetAPIResponseDTO'
    post:
      tags:
        - UsersV1
      summary: Add a user
      description: Create a new user. Administrating tenant users can specify the tenant in which to add a user.
      operationId: UsersV1_AddUser
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to create a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UserCreationAPIRequestDTO'
        required: true
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreationAPIResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/{userId}:
    get:
      tags:
        - UsersV1
      summary: Retrieve a user's details
      description: |-
        This API allows you to retrieve all details for a specified user.

         To specify the project in which to retrieve user information, provide a project UUID in the `ProjectID` request header. If omitted, the request retrieves user information from production.
      operationId: UsersV1_GetUserDetail
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to retrieve.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve a user from.
          schema:
            type: string
        - name: assignedProfiles
          in: query
          description: If true, the response returns a list of the user's assigned profiles.
          schema:
            type: boolean
        - name: assignedPermissions
          in: query
          description: If true, the response returns the user's assigned permissions.
          schema:
            type: boolean
        - name: assignedUserGroups
          in: query
          description: If true, the response returns the user's assigned user groups.
          schema:
            type: boolean
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request. If omitted, the request uses the production version.
          schema:
            type: string
            format: uuid
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UserGetAPIResponseDTO'
    put:
      tags:
        - UsersV1
      summary: Update a user
      description: Update an existing user's information, such as their display name or if the user is enabled in Visier.
      operationId: UsersV1_UpdateUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to update.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to update a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UserUpdateAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UserUpdateAPIRequestDTO'
    delete:
      tags:
        - UsersV1
      summary: Delete a user
      description: Delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
      operationId: UsersV1_DeleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to delete.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to delete a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.DeleteUserResponse'
  /v1/admin/users/{userId}/accessible-tenant-profiles:
    get:
      tags:
        - Profiles
      summary: Retrieve an administrating tenant user's analytic tenant profiles
      description: |-
        Retrieve a specified user's assigned profiles for analytic tenants.

         **Note:** Administrating tenants only.
      operationId: Profiles_GetAnalyticUserProfile
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to retrieve.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AllProfileAssignedForAccessibleTenantDTO'
  /v1/admin/users/{userId}/profiles:
    get:
      tags:
        - Profiles
      summary: Retrieve a user's profiles
      description: |-
        Retrieve a specified user's assigned profiles. For administrating tenants,
         this retrieves a user's administrating tenant profiles.
      operationId: Profiles_GetUserProfile
      parameters:
        - name: userId
          in: path
          description: The ID of the user you want to retrieve.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.AllProfileAssignedForLocalTenantDTO'
  /v1/op/validation/tenants:
    get:
      tags:
        - TenantsV1
      summary: Validate metric values for all analytic tenants
      description: |-
        As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the
         source systems from which it was exported and that it matches what your expectations are for this data.

         The metric values included in the response are the tenant's configured summary metrics. Administrators can
         configure summary metrics in a project:
         - Sign in to Visier as an administrator.
         - In a project, on the navigation bar, click the **Home** button.
         - Click **Dashboard**, and then click **Edit Summary Metrics**.
         - Select the metrics that you want to validate, and then close the **Summary Metrics** dialog.
         - Publish the project to production.
      operationId: TenantsV1_ValidateTenants
      parameters:
        - name: limit
          in: query
          description: The limit of analytic tenant details to retrieve.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          schema:
            type: integer
            format: int32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dp_automation.TenantPreviewEntriesSummaryListDTO'
  /v1/op/validation/tenants/{tenantId}:
    get:
      tags:
        - TenantsV1
      summary: Validate an analytic tenant's metric values
      description: |-
        Retrieve the metric values for an individual analytic tenant. The metric values included in the
         response are the tenant's configured summary metrics. Administrators can configure summary metrics in a project:
         - Sign in to Visier as an administrator.
         - In a project, on the navigation bar, click the **Home button**.
         - Click **Dashboard**, and then click **Edit Summary Metrics**.
         - Select the metrics that you want to validate, and then close the **Summary Metrics** dialog.
         - Publish the project to production.
      operationId: TenantsV1_ValidateTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dp_automation.TenantPreviewEntriesSummaryDTO'
  /v1alpha/admin/api-network-subnets:
    get:
      tags:
        - NetworkSubnets
      summary: Retrieve a list of API network subnets
      description: |-
        Retrieve a list of all IP addresses that can call Visier APIs.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_GetApiSubnets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
    put:
      tags:
        - NetworkSubnets
      summary: Update API network subnets
      description: |-
        Overwrite the existing list of IP addresses that can call Visier APIs with a new list. IP addresses must use the Classless Inter-Domain Routing (CIDR) format: xxx.xxx.xxx.xxx/xx.

         When updating allowed network subnets, the definition in your API call replaces the prior definition. You must provide the entire definition in the PUT call. If you omit IP addresses from the update request, those IP addresses are removed from the allowlist We recommend that you retrieve the current list of allowed network subnets before you update the list.

         **Note**: By updating the allowed network subnets, you may remove your current IP address from the allowlist. If this happens, you will lock yourself out from making additional API calls. Visier does not allow lock outs unless you set `confirmLockout` to `true`. Default is `false`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_SetApiSubnets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.NetworkSubnetsMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
    post:
      tags:
        - NetworkSubnets
      summary: Add API network subnets
      description: |-
        Add IP addresses to the list of allowed network subnets that can call Visier APIs. IP addresses must use the Classless Inter-Domain Routing (CIDR) format: xxx.xxx.xxx.xxx/xx.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_AddApiSubnets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.NetworkSubnetsMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
    delete:
      tags:
        - NetworkSubnets
      summary: Delete API network subnets
      description: |-
        Remove IP addresses from the list of allowed network subnets that can call Visier APIs. IP addresses must use the Classless Inter-Domain Routing (CIDR) format: xxx.xxx.xxx.xxx/xx.

         When updating allowed network subnets, the definition in your API call replaces the prior definition. You must provide the entire definition in the PUT call. If you omit IP addresses from the update request, those IP addresses are removed from the allowlist We recommend that you retrieve the current list of allowed network subnets before you update the list.

         **Note**: By deleting the allowed network subnets, you may remove your current IP address from the allowlist. If this happens, you will lock yourself out from making additional API calls. Visier does not allow lock outs unless you set `confirmLockout` to `true`. Default is `false`.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: NetworkSubnets_DeleteApiSubnets
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.NetworkSubnetsMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.NetworkSubnetsMessageResponse'
  /v1alpha/admin/consolidated-analytics/tenants:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve a list of all consolidated analytics tenants
      description: |-
        Retrieve the full list of consolidated analytics tenants in your administrating tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListTenants
      parameters:
        - name: limit
          in: query
          description: The maximum number of tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantListResponseDTO'
    post:
      tags:
        - ConsolidatedAnalytics
      summary: Create a consolidated analytics tenant
      description: |-
        Create a consolidated analytics tenant.

         A new CA tenant has no source tenants and no excluded sources.

         **Note:** CA tenant codes must have a prefix of CA. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
         is the consolidated analytic tenant code.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_CreateTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantCreateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantCreateRequestDTO'
  /v1alpha/admin/consolidated-analytics/tenants-with-details:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve the details of all consolidated analytics tenants
      description: |-
        Retrieve the full list of consolidated analytics tenants and their details in your administrating tenant.

         **Note:** If your consolidated analytics tenants have thousands of source tenants, we recommend that you use the `GET /admin/consolidated-analytics/tenants` endpoint to get all CA tenants and then use the `GET /admin/consolidated-analytics/tenants/{tenantId}/source-tenants` and `GET /admin/consolidated-analytics/tenants/{tenantId}/excluded-sources` endpoints to retrieve information about specific CA tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListTenantsWithDetails
      parameters:
        - name: limit
          in: query
          description: The maximum number of tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantWithDetailsListResponseDTO'
  /v1alpha/admin/consolidated-analytics/tenants/{tenantId}/excluded-sources:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve a consolidated analytics tenant's excluded sources
      description: |-
        Retrieve a CA tenant's excluded sources.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
    put:
      tags:
        - ConsolidatedAnalytics
      summary: Set a consolidated analytics tenant's excluded sources
      description: |-
        Define the excluded sources for a consolidated analytics tenant.

         After you create a CA tenant, you may optionally define a list of excluded sources. The excluded sources are the sources whose data is excluded from the CA tenant.
         You can also use this API to replace the list of excluded sources for an existing CA tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_SetExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ExcludedSourcesBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
    delete:
      tags:
        - ConsolidatedAnalytics
      summary: Remove excluded sources from a consolidated analytics tenants
      description: |-
        Remove excluded sources from the list of excluded sources for a consolidated analytics tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_RemoveExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ExcludedSourcesBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
    patch:
      tags:
        - ConsolidatedAnalytics
      summary: Add excluded sources to a consolidated analytics tenant
      description: |-
        Add excluded sources to the list of excluded sources for a consolidated analytics tenant.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_AddExcludedSources
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.ExcludedSourcesBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO'
  /v1alpha/admin/consolidated-analytics/tenants/{tenantId}/source-tenants:
    get:
      tags:
        - ConsolidatedAnalytics
      summary: Retrieve a consolidated analytics tenant's source tenants
      description: |-
        Retrieve a CA tenant's source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_ListSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first source tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
    put:
      tags:
        - ConsolidatedAnalytics
      summary: Set a consolidated analytics tenant's source tenants
      description: |-
        Define the source tenants for a consolidated analytics tenant.

         After you create a CA tenant, you must define a list of its source tenants. The source tenants are the tenants whose data is aggregated in the CA tenant.
         You can also use this API to replace the list of source tenants for an existing CA tenant.

         If successful, the response returns an updated list of source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_SetSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantCodeBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
    delete:
      tags:
        - ConsolidatedAnalytics
      summary: Remove source tenants from a consolidated analytics tenants
      description: |-
        Remove source tenants from the list of source tenants for a consolidated analytics tenant.

         If successful, the response returns an updated list of source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_RemoveSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantCodeBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
    patch:
      tags:
        - ConsolidatedAnalytics
      summary: Add source tenants to a consolidated analytics tenant
      description: |-
        Add source tenants to the list of source tenants for a consolidated analytics tenant.

         If successful, the response returns an updated list of source tenants.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: ConsolidatedAnalytics_AddSourceTenants
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of source tenants to return. The maximum value is 1000. Default is 400.
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantCodeBody'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPISourceTenantListDTO'
  /v1alpha/admin/email-domains:
    get:
      tags:
        - EmailDomains
      summary: Retrieve a list of allowed email domains
      description: |-
        Retrieve the full list of allowed email domains.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EmailDomains_ListAllowedEmailDomains
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.EmailDomainsDTO'
    put:
      tags:
        - EmailDomains
      summary: Add domains to the list of allowed domains
      description: |-
        Add email address domains to the allowed domains list.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EmailDomains_AddAllowedEmailDomains
      parameters:
        - name: confirmNotAllowedDomain
          in: query
          description: If `true`, you cannot sign in using credentials, such as username and password. You can only log in with single sign-on (SSO). To avoid this, add your current email address's domain to allowed domains list.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.EmailDomainsDTO'
    delete:
      tags:
        - EmailDomains
      summary: Remove domains from the list of allowed domains
      description: |-
        Delete email address domains from the allowed domains list.

         <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EmailDomains_DeleteAllowedEmailDomains
      parameters:
        - name: confirmNotAllowedDomain
          in: query
          description: If `true`, you cannot sign in using credentials, such as username and password. You can only log in with single sign-on (SSO). To avoid this, add your current email address's domain to allowed domains list.
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.EmailDomainsDTO'
  /v1alpha/admin/encryption-keys:
    get:
      tags:
        - EncryptionKeys
      summary: Retrieve a list of all encryption keys
      description: |-
        Retrieve a list of all encryption keys. The response returns information about each key, including the key name, algorithm, user who generated the key, the generation date, and expiration date.

         <br>**Note:** <em>These APIs are in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EncryptionKeys_ListAllEncryptionKeysMetadata
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.TenantEncryptionKeyDetailsDTO'
    post:
      tags:
        - EncryptionKeys
      summary: Generate an encryption key
      description: "Create an encryption key using a specific algorithm. The algorithm must be one of `HmacSHA224`, `HmacSHA256`, `HmacSHA384`, or `HmacSHA512`.\n \n In the request body, set the algorithm, give the key a display name and, optionally, set the UTC expiration date for the key pair in ISO-8601 format. Must be between 2 and 10 years. Default is 2 years.\n \n The maximum number of encryption keys per tenant is 5.\n\n <br>**Note:** <em>These APIs are in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.\n If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>"
      operationId: EncryptionKeys_GenerateEncryptionKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/designer.crypto.GenerateKeyRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/designer.crypto.TenantEncryptionKeyDTO'
  /v1alpha/admin/encryption-keys/{keyName}:
    delete:
      tags:
        - EncryptionKeys
      summary: Delete an encryption key
      description: |-
        Delete a specific encryption key.

         <br>**Note:** <em>These APIs are in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: EncryptionKeys_DeleteEncryptionKeys
      parameters:
        - name: keyName
          in: path
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 3 and 36 characters long.
          required: true
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.KeyName'
  /v1beta/admin/sources:
    post:
      tags:
        - Sources
      summary: Perform an operation on all sources
      description: |-
        Perform operations on all sources. The following operations are supported:
         * `exportSources`: Export a ZIP file that contains a list of all sources in the application.

         <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
         If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Sources_RunSourcesOperation
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.SourcesAPIOperationRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.ExportSourcesAPIOperationResponseDTO'
    put:
      tags:
        - Sources
      summary: Import a list of sources
      description: |-
        Import a list of sources in ZIP format. The file must be an export from `POST /v1alpha/admin/sources`. Use this API after making changes in a development environment to copy the changes to a draft project in your production environment.

        <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
        If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
      operationId: Sources_PutSources
      parameters:
        - name: replaceAllExistingSources
          in: query
          description: If `false`, adds the sources from the ZIP to the sources in the target tenant. If `true`, removes all sources in the target tenant and adds the sources from the ZIP. Default is `false`.
          schema:
            type: boolean
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourcesAPIPutResponseDTO'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v2/admin/tenants:
    get:
      tags:
        - TenantsV2
      summary: Retrieve a list of all analytic tenants
      description: |-
        Retrieve the full list of analytic tenants managed by you with their current states and the content
         modules assigned to them, and all other relevant details for the tenants if requested.
      operationId: TenantsV2_ListTenants
      parameters:
        - name: limit
          in: query
          description: The maximum number of tenants to return. Default is 400.
          schema:
            type: integer
            format: int32
        - name: start
          in: query
          description: The starting index of the first tenant to return. Default is 0.
          schema:
            type: integer
            format: int32
        - name: mask
          in: query
          description: A list of fields to include in the response, separated by commas. E.g., "displayName,purchasedModules"
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.MaskMessage'
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIListResponseDTO'
    post:
      tags:
        - TenantsV2
      summary: Add an analytic tenant
      description: |-
        Prior to processing and loading an analytic tenant's data files, you must provision, or create, that tenant. A
         provisioned analytic tenant is automatically enabled. If the tenant's data is loaded after provisioning, that data
         is immediately accessible by their users.

         Create an analytic tenant and identify the
         applications assigned to the tenant. Visier organizes content under a set of modules.

         Contact Visier Support to determine the list of modules allocated to you.

         **Note:** API requests that contain `homeAnalysisId`, `homeAnalysisByUserGroup`, `clickThroughLink`, or
         `defaultCurrency` take longer to run because they require publishing a project to production.
      operationId: TenantsV2_CreateTenant
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantManagementAPIUpdateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIUpdateResponseDTO'
  /v2/admin/tenants/{tenantId}:
    get:
      tags:
        - TenantsV2
      summary: Retrieve an analytic tenant's details
      description: |-
        Retrieve the details for a specified analytic tenant. Doing so allows you to see the current state
         of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
      operationId: TenantsV2_TenantInfo
      parameters:
        - name: tenantId
          in: path
          description: The ID of the tenant to retrieve.
          required: true
          schema:
            type: string
        - name: mask
          in: query
          description: A list of fields to include in the response, separated by commas. E.g., "displayName,purchasedModules"
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIGetResponseDTO'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.MaskMessage'
    put:
      tags:
        - TenantsV2
      summary: Update an analytic tenant
      description: |-
        You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.
         You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates
         to your tenants, use this API.

         * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.
         * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.

         You can use this API to update any field on an analytic tenant, except `tenantCode`.

         **Note:** API requests that contain `homeAnalysisId`, `homeAnalysisByUserGroup`, `clickThroughLink`, or
         `defaultCurrency` take longer to run because they require publishing a project to production.
      operationId: TenantsV2_UpdateTenant
      parameters:
        - name: tenantId
          in: path
          description: The ID of the tenant to update.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.TenantManagementAPIUpdateRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantManagementAPIUpdateResponseDTO'
    delete:
      tags:
        - TenantsV2
      summary: Deprovision an analytic tenant
      description: |-
        <em>Warning! Deprovisioning an analytic tenant is not reversible.</em>
         Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/{tenantId}/disable`**.

         This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant
         may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.

         If successful, the response returns the status "Deprovisioned". This indicates that the tenant is scheduled for
         deprovisioning, which may take several days to complete.
      operationId: TenantsV2_DeleteTenant
      parameters:
        - name: tenantId
          in: path
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the analytic tenant code.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.TenantStatusAPIDTO'
  /v2/admin/user-groups:
    get:
      tags:
        - UserGroupsV2
      summary: Retrieve a list of user groups
      description: |-
        Retrieve a collection of user groups. Use `with` to control the amount of detail returned in the response.
         `with` supports these values:
         * **permissions**: Include the user group's permissions.
         * **users**: Include the users in the user group.
         * **details**: Include all available information.

         This API can return a maximum of 1000 user groups. The default number of user groups to return is 100.

         To specify the project in which to return user groups, provide a project UUID in the `ProjectID` request header.

         <br>To specify the tenant in which to retrieve user groups, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.
      operationId: UserGroupsV2_GetUserGroups
      parameters:
        - name: with
          in: query
          description: |-
            Controls the amount of detail to return in the response. Omit to return basic information.
             * **permissions**: Include the user group's permissions.
             * **users**: Include the users in the user group.
             * **details**: Include all available information.
          schema:
            enum:
              - permissions
              - users
              - details
            type: string
            format: enum
        - name: limit
          in: query
          description: The number of results to return. The maximum number of user groups to retrieve is 1000. The default is 100.
          schema:
            type: integer
            format: uint32
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
    put:
      tags:
        - UserGroupsV2
      summary: Update multiple user groups
      description: "Update existing user groups. To specify the tenant in which to update a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header or `tenantCode` for each user group in the request body.\n\n When updating user groups, the user group definition in your API call replaces the prior definition. You must provide the entire definition in the `PUT` call. If you omit values from the update request, those values are removed from the user group. We recommend that you retrieve a user group's details before you update the user group with new values. \n\n To specify the project in which to update user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body."
      operationId: UserGroupsV2_PutUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeResponseDTO'
    post:
      tags:
        - UserGroupsV2
      summary: Create multiple user groups
      description: |-
        Create new user groups. To specify the tenant in which to add new user groups, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.

         To specify the project in which to create new user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body.
      operationId: UserGroupsV2_CreateUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeResponseDTO'
    delete:
      tags:
        - UserGroupsV2
      summary: Delete multiple user groups
      description: |-
        Delete user groups in bulk. To specify the tenant in which to delete user groups, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.

         To specify the project in which to delete user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body.
      operationId: UserGroupsV2_DeleteUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsDeleteRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupDeleteResponseDTO'
    patch:
      tags:
        - UserGroupsV2
      summary: Patch multiple user groups
      description: |-
        Make partial changes to user groups. To specify the tenant in which to patch a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header or `tenantCode` for each user group in the request body.

         Unlike `PUT`, which completely replaces the user group definition, use `PATCH` to change specific fields in the user group without affecting omitted fields.

         To specify the project in which to patch user groups, provide a project UUID in the `ProjectID` request header or `projectId` for each user group in the request body.
      operationId: UserGroupsV2_PatchUserGroups
      parameters:
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.UserGroupsChangeDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeResponseDTO'
  /v2/admin/user-groups/{userGroupId}:
    get:
      tags:
        - UserGroupsV2
      summary: Retrieve the details of a user group
      description: "Retrieve all available information about a specific user group.\n \n <br>To specify the tenant in which to retrieve a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.\n\n To specify the project in which to return a user group, provide a project UUID in the `ProjectID` request header."
      operationId: UserGroupsV2_GetUserGroup
      parameters:
        - name: userGroupId
          in: path
          description: The ID of user group.
          required: true
          schema:
            type: string
        - name: with
          in: query
          description: |-
            Controls the amount of detail to return in the response. Omit to return detailed information.
             * **permissions**: Include the user group's permissions.
             * **users**: Include the users in the user group.
             * **details**: Include all available information.
          schema:
            enum:
              - permissions
              - users
              - details
            type: string
            format: enum
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupChangeDefinitionDTO'
    delete:
      tags:
        - UserGroupsV2
      summary: Delete a user group
      description: |-
        Delete a specific user group. To specify the tenant in which to delete a user group, administrating tenants can provide an analytic tenant code in the `TargetTenantID` request header.

         To specify the project in which to delete a user group, provide a project UUID in the `ProjectID` request header.
      operationId: UserGroupsV2_DeleteUserGroup
      parameters:
        - name: userGroupId
          in: path
          description: The ID of user group to delete.
          required: true
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
        - name: ProjectID
          in: header
          description: Optionally, specify a project in which to make the request.
          schema:
            type: string
            format: uuid
        - name: NonVersioned
          in: header
          description: If `true`, the API call executes on non-versioned artifacts and create/update actions take effect without a new production version. If `false`, the API call executes on versioned artifacts and create/update actions release a new production version. Default is `false`.<br>**Note:** <em>This header is in **limited availability**. If you are interested in using it, please contact your Customer Success Manager (CSM).</em>
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/admin.DeleteUserGroupV2Request'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/admin.UserGroupSingleDeleteResponseDTO'
  /v2/admin/users:
    put:
      tags:
        - UsersV2
      summary: Update users
      description: Update an existing user's information, such as their display name or if the user is enabled in Visier.
      operationId: UsersV2_UpdateUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to update a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UsersUpdateAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UsersAPIResponseDTO'
    post:
      tags:
        - UsersV2
      summary: Add users
      description: Create new users. Administrating tenant users can specify the tenant in which to add these users.
      operationId: UsersV2_AddUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to create a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UsersCreationAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UsersAPIResponseDTO'
    delete:
      tags:
        - UsersV2
      summary: Delete users
      description: Delete an existing user. Administrating tenant users can specify the tenant from which to delete a user.
      operationId: UsersV2_DeleteUsers
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to delete a user in.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servicing.UsersDeleteAPIRequestDTO'
        required: true
      responses:
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/servicing.UsersAPIResponseDTO'
  /v1/admin/users/reports/application-logs:
    get:
      tags:
        - UsersV1
      summary: Retrieve the Application Logs
      description: "This API allows you to export the Application Logs for a tenant. The Application Logs track information about your\n users and how they are using the application. Performing regular audits will help you identify potential security\n issues and keep your data safe. As part of user management, download the Application Logs to monitor user activity\n and logon events to ensure your users are performing authorized activities. \n\n Application logs are retained in the system for 180 days.\n\n Administrating tenant users can export application logs for the administrating tenant and the analytic tenants\n those users belong to."
      operationId: UsersV1_GetApplicationLogsXLSX
      parameters:
        - name: startTime
          in: query
          description: An inclusive date-time to start retrieving Application Logs from.
          schema:
            type: string
        - name: endTime
          in: query
          description: An exclusive date-time to stop retrieving Application Logs from.
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve Application Logs from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/{userId}/reports/data-security:
    get:
      tags:
        - UsersV1
      summary: Retrieve the Data Security Report
      description: |-
        This API allows you to export the data security report of a user. The Data Security Report provides information
         about a specific user to see which populations and properties that user has access to as a result of the
         permissions assigned to them.

         Administrating tenant users can export the report for users in the administrating tenant and the analytic
         tenants those users belong to.
      operationId: UsersV1_GetDataSecurityReportXLSX
      parameters:
        - name: userId
          in: path
          description: The ID of the user to retrieve the report for.
          required: true
          schema:
            type: string
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the Data Security Report from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/reports/profile-assignments:
    get:
      tags:
        - UsersV1
      summary: Retrieve user profile assignments in XLSX format
      description: |-
        This API allows you to export the profiles assigned to each user. This report details the profiles assigned to
         each user and the profile validity period.

         Administrating tenant users can export profile assignments for the administrating tenant and the analytic tenants
         those users belong to.
      operationId: UsersV1_GetProfileAssignmentsXLSX
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve profile assignments from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/reports/permission-assignments:
    get:
      tags:
        - UsersV1
      summary: Retrieve user permissions in XLSX format
      description: |-
        This API allows you to export the user permission assignments for a tenant. The permission assignments report
         provides a summary of the permissions your users have been assigned and how each permission is being used across
         your user base, as well as the users that do not have any permissions assigned to them.

         Administrating tenant users can export permission assignments for the administrating tenant and the analytic
         tenants those users belong to.
      operationId: UsersV1_GetUserPermissionsXLSX
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve the permission assignments report from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/admin/users/reports/permissions-list:
    get:
      tags:
        - UsersV1
      summary: Retrieve a list of all permissions in XLSX format
      description: |-
        This API allows you to export the list of permissions in a tenant. This report includes the permission name,
         permission description, and permission ID for all permissions in the tenant.

         Administrating tenant users can export permissions lists for the administrating tenant and the analytic tenants
         those users belong to.
      operationId: UsersV1_GetAllPermissionsXLSX
      parameters:
        - name: tenantCode
          in: query
          description: Specify the tenant to retrieve permissions from.
          schema:
            type: string
        - name: TargetTenantID
          in: header
          description: Optionally, specify the tenant that you want to execute the API call on. This defines the tenant that you're logged into. If omitted, the request uses the administrating tenant as the login tenant.
          schema:
            type: string
      responses:
        "200":
          description: An XLSX file.
          content:
            application/vnd.ms-excel:
              schema:
                type: string
                format: binary
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
components:
  schemas:
    admin.DeleteUserGroupV2Request:
      type: object
      properties:
        userGroupId:
          type: string
          description: The ID of user group to delete.
    admin.DeleteUserResponse:
      type: object
      properties: {}
    admin.ExcludedSourcesBody:
      type: object
      properties:
        excludedSources:
          type: array
          items:
            type: string
          description: A list of a CA tenant's excluded sources.
    admin.KeyName:
      type: object
      properties:
        keyName:
          type: string
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 3 and 36 characters long.
    admin.MaskMessage:
      example:
        mask: tenantDisplayName,purchasedModules
      type: object
      properties:
        mask:
          type: string
          description: A comma-separated list of strings that specifies which fields to include in the response.
          format: field-mask
    admin.PermissionsListDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionDTO'
          description: The list of permissions that will be created or updated
    admin.PutProjectCommitsRequest:
      type: object
      properties:
        projectId:
          type: string
          description: The unique identifier of the draft project you want to import committed changes into.
    admin.TenantCodeBody:
      type: object
      properties:
        tenantCodes:
          type: array
          items:
            type: string
          description: A list of a CA tenant's source tenants codes. The maximum length is 1000.
    admin.UpdateTenantModel:
      type: object
      properties:
        tenantDisplayName:
          type: string
          description: A display name that is assigned to the new analytic tenant.
        industryCode:
          type: integer
          description: |-
            The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 0.

             For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000.
          format: int32
        purchasedModules:
          type: array
          items:
            type: string
          description: A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If
             domains at the administrating tenant level match the domains at the analytic tenant level, you do not need
             to include a domain for each analytic tenant.
        customProperties:
          type: object
          additionalProperties:
            type: string
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
    admin.AllTenantsStatusAPIDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantDetailAPIDTO'
          description: A list of objects representing all the analytic tenants.
        limit:
          type: integer
          description: The limit of analytic tenants to return. The maximum value is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.BatchTenantProvisionAPIDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantProvisionAPIDTO'
          description: An array of tenants to create. The maximum number of tenants to create in one request is 200.
    admin.BusinessLocationDTO:
      type: object
      properties:
        countryCode:
          type: string
          description: The country in which the business is located or business is performed. The country code must follow ISO 3166 standards in alpha-2 format (two-letter code).
        postalCode:
          type: string
          description: The postal code associated with the business location. Cannot be blank.
      description: The location of operations or where business is performed.
    admin.CustomPropertyDTO:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    admin.CustomTenantPropertyDTO:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    admin.ElementIDsDTO:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: The unique identifiers.
    admin.HomeAnalysisByUserGroupDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The user group ID.
        homeAnalysisId:
          type: string
          description: The unique ID of the analysis to show for this user group when a user logs in.
    admin.NetworkSubnetsMessageRequest:
      type: object
      properties:
        networkSubnetsForApi:
          type: array
          items:
            type: string
          description: The IP addresses in the request.
        confirmLockout:
          type: boolean
          description: If `true`, you acknowledge that the API call removes your IP address from the list of allowed network subnets and you will not be able to call Visier APIs from your current IP address. Default is `false`. To avoid this, add your current IP address to the allowed network subnets list.
      description: The IP addresses to modify in the API network subnet allowlist.
    admin.NetworkSubnetsMessageResponse:
      type: object
      properties:
        networkSubnetsForApi:
          type: array
          items:
            type: string
          description: The IP addresses that are allowed to call Visier APIs.
      description: The list of IP addresses that are allowed to call Visier APIs.
    admin.TenantDetailAPIDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant. For example, "WFF_j1r~i1o".
        tenantDisplayName:
          type: string
          description: An identifiable tenant name that is displayed within Visier. For example, "Callisto".
        status:
          type: string
          description: Whether the tenant is enabled or disabled.
        provisionDate:
          type: string
          description: The date that the tenant was created.
        currentDataVersion:
          type: string
          description: The data version ID that the tenant is using.
        dataVersionDate:
          type: string
          description: The date that the data version was published to production.
        modules:
          type: array
          items:
            $ref: '#/components/schemas/designer.TenantModuleDTO'
          description: The modules assigned to the analytic tenant.
        industryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs.
          format: uint32
        canAdministerOtherTenants:
          type: boolean
          description: If true, the tenant is an administrating tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomTenantPropertyDTO'
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        vanityUrlName:
          type: string
          description: The name of the administrating tenant used in Visier URLs.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, which can be used as values for the idp_url parameter
    admin.TenantManagementAPIGetResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant. For example, "WFF_j1r~i1o"
        tenantDisplayName:
          type: string
          description: An identifiable tenant name that is displayed within Visier. For example, "Callisto".
        status:
          type: string
          description: Whether the tenant is enabled or disabled.
        provisionDate:
          type: string
          description: The date that the tenant was created.
        currentDataVersion:
          type: string
          description: The data version ID that the tenant is using.
        dataVersionDate:
          type: string
          description: The date that the data version was published to production.
        purchasedModules:
          type: array
          items:
            type: string
          description: The modules assigned to the analytic tenant.
        industryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs.
          format: uint32
        primaryBusinessLocation:
          allOf:
            - $ref: '#/components/schemas/admin.BusinessLocationDTO'
          description: The primary location of operations or where business is performed. If undefined, it is omitted from the response.
        canAdministerOtherTenants:
          type: boolean
          description: If true, the tenant is an administrating tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomPropertyDTO'
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        vanityUrlName:
          type: string
          description: The name of the administrating tenant used in Visier URLs.
        homeAnalysisId:
          type: string
          description: The unique ID of the analysis that's displayed for this tenant when a user logs in.
        homeAnalysisByUserGroup:
          type: array
          items:
            $ref: '#/components/schemas/admin.HomeAnalysisByUserGroupDTO'
          description: A list of objects representing the analysis displayed to specific user groups when users log in.
        clickThroughLink:
          type: string
          description: The custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content.
        clickThroughLinkEnabled:
          type: string
          description: Whether the click-through link is enabled or disabled.
        defaultCurrency:
          type: string
          description: The default currency to show in the application for the tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, that are allowed in the idp_url OAuth parameter.
    admin.TenantManagementAPIListResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantManagementAPIGetResponseDTO'
          description: A list of objects representing all the analytic tenants.
        limit:
          type: integer
          description: The limit of analytic tenants to return. The maximum value is 1000. The default is 150.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.TenantManagementAPIUpdateRequestDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: A unique identifier for the newly created analytic tenant. Required if creating new tenants.
        tenantDisplayName:
          type: string
          description: A new display name to assign to the analytic tenant. Required if creating new tenants.
        tenantShortName:
          type: string
          description: A new short name to assign to the tenant. Required for analytic tenants.
        vanityUrlName:
          type: string
          description: A new vanity name to assign to the tenant. Omit for new Embedded analytic tenants.
        industryCode:
          type: integer
          description: |-
            The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 0.

             For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000. Required if creating new tenants.
          format: uint32
        primaryBusinessLocation:
          allOf:
            - $ref: '#/components/schemas/admin.BusinessLocationDTO'
          description: The primary location of operations or where business is performed. This field is optional.
        purchasedModules:
          type: array
          items:
            type: string
          description: |-
            A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant. Required if creating new tenants.

             To get the module name:
             1. In Visier, open a project and navigate to **Model > Modules**.
             2. Select a module.
             3. In **Basic Information**, copy the **Object name**. This is the module name.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If domains at the administrating tenant level match the domains at the analytic tenant level, you do not need to include a domain for each analytic tenant. This is optional.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomPropertyDTO'
          description: A list of objects that represent different customizable properties for the analytic tenant. This is optional.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant. This is optional.
        homeAnalysisId:
          type: string
          description: |-
            The unique ID of the analysis to display for this tenant when a user logs in. This is optional. Causes the API request to take longer because it must publish a project to production.

             Retrieve the ID by opening an analysis in the production version of a tenant and copying the string after the last forward slash (/) in the URL. For example: `https://jupiter.visier.com/hr/prod/appcontainer?previewId=-eZPm8xvo3SUMpD4Q5pdE-6mCj9CQ9K699XgqRGwtOxagH5x2IzDFawlWn3hYqFEfU7nP0YK9ASEzmrNfAihGg..&previewType=Production#/analytics/myanalyses/8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`.

             The `homeAnalysisID` is `8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`. Alternatively, retrieve the ID by copying the `Analysis ID` or `contentId` found by following the `Embed a Visualization` documentation.
        homeAnalysisByUserGroup:
          type: array
          items:
            $ref: '#/components/schemas/admin.HomeAnalysisByUserGroupDTO'
          description: A list of objects representing the analysis to display to specific user groups when users log in. This is optional. Causes the API request to take longer because it must publish a project to production.
        updateAction:
          enum:
            - MERGE
            - REPLACE
          type: string
          description: |-
            Specifies the way you want to update values. Default is MERGE.
             Valid values:
             - `MERGE`: Combine the existing values with the new values.
             - `REPLACE`: Remove existing values and let the new values take their place.
          format: enum
        enabled:
          type: boolean
          description: If true, the tenant is enabled. Enabled tenants have access to Visier visualizations.
        clickThroughLink:
          type: string
          description: A custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content. This is optional. Causes the API request to take longer because it must publish a project to production.
        defaultCurrency:
          type: string
          description: The default currency to show in the application for the tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, that are allowed in the idp_url OAuth parameter. This is optional.
    admin.TenantManagementAPIUpdateResponseDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier of the newly created analytic tenant.
        tenantDisplayName:
          type: string
          description: A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant.
        industryCode:
          type: integer
          description: The 6-digit NAICS code for the industry to which the analytic tenant belongs.
          format: uint32
        primaryBusinessLocation:
          allOf:
            - $ref: '#/components/schemas/admin.BusinessLocationDTO'
          description: The primary location of operations or where business is performed. If undefined, it is omitted from the response.
        purchasedModules:
          type: array
          items:
            type: string
          description: A comma-separated collection of strings that represent the Visier modules assigned to the new analytic tenant.
        embeddableDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If domains at the administrating tenant level match the domains at the analytic tenant level, you do not need to include a domain for each analytic tenant.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomPropertyDTO'
          description: A list of objects that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        homeAnalysisId:
          type: string
          description: |-
            The unique ID of the analysis to display for this tenant when a user logs in. This is optional.

             Retrieve the ID by opening an analysis in the production version of a tenant and copying the string after the last forward slash (/) in the URL. For example: https://jupiter.visier.com/hr/prod/appcontainer?previewId=-eZPm8xvo3SUMpD4Q5pdE-6mCj9CQ9K699XgqRGwtOxagH5x2IzDFawlWn3hYqFEfU7nP0YK9ASEzmrNfAihGg..&previewType=Production#/analytics/myanalyses/`8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`.
             The `homeAnalysisID` is `8a4c1d4f-eb61-4da0-9e5b-55bef757c30e`.

             Alternatively, retrieve the ID by copying the `Analysis ID` or `contentId` found by following the `Embed a Visualization` documentation.
        homeAnalysisByUserGroup:
          type: array
          items:
            $ref: '#/components/schemas/admin.HomeAnalysisByUserGroupDTO'
          description: A list of objects representing the analysis to display to specific user groups when users log in.
        status:
          type: string
          description: Whether the tenant is enabled or disabled. Enabled tenants have access to Visier visualizations.
        clickThroughLink:
          type: string
          description: A custom URL to redirect users into your portal to see the relevant content. This URL is used for links that are shared by and with your users through the sharing capability or email content.
        vanityUrlName:
          type: string
          description: The name of the administrating tenant used in Visier URLs.
        defaultCurrency:
          type: string
          description: The default currency to show in the application for the tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the URLs, or domains, that are allowed in the idp_url OAuth parameter. This is optional.
    admin.TenantProvisionAPIDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier of the analytic tenant.
        tenantDisplayName:
          type: string
          description: The display name that is assigned to the analytic tenant.
        purchasedModules:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the Visier modules assigned to the analytic tenant.
        industryCode:
          type: integer
          description: |-
            The 6-digit NAICS code for the industry to which the analytic tenant belongs. If the code is unknown, type 0.

             For 2-digit codes, add trailing zeros at the end to reach 6 digits, such as 620000.
          format: uint32
        embeddableDomains:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of strings that represent the URLs, or domains, in which Visier can be embedded. If
             domains at the administrating tenant level match the domains at the analytic tenant level, you do not need
             to include a domain for each analytic tenant.
        customProperties:
          type: array
          items:
            $ref: '#/components/schemas/admin.CustomTenantPropertyDTO'
          description: A set of key-value pairs that represent different customizable properties for the analytic tenant.
        ssoInstanceIssuers:
          type: array
          items:
            type: string
          description: A comma-separated list of strings that represent the issuers for the SSO providers that can authenticate this tenant.
        allowedOAuthIdpUrlDomains:
          type: array
          items:
            type: string
          description: |-
            A comma-separated list of strings that represent the URLs, or domains, which can be used as values for the idp_url
             OAuth parameter.
    admin.TenantStatusAPIDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier for the analytic tenant.
        status:
          type: string
          description: Whether the tenant is enabled or disabled.
        tenantDisplayName:
          type: string
          description: The identifiable tenant name that is displayed within Visier. For example, "Callisto".
        canAdministerOtherTenants:
          type: boolean
          description: If true, the tenant is an administrating tenant.
    admin.UserGroupChangeDefinitionDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier of the user group. Omit if creating a new user group.
        displayName:
          type: string
          description: An identifiable user group name to display in Visier, such as "Leadership User Group".
        description:
          type: string
          description: A detailed description of the population and purpose of the user group.
        permissionIds:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: The unique identifiers of permissions assigned to members of this user group.
        users:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupChangeUsersDTO'
          description: The users assigned to the user group. You can define user group members dynamically with `dynamicFilterDefinition` or manually with `includeAllUsers` or `manuallyIncludedIds`.
        tenantCode:
          type: string
          description: |-
            The code of the tenant to which the user group belongs or should be created in.
             Omit if creating or updating user groups in the current tenant.
        projectId:
          type: string
          description: |-
            The project ID in which to update or create the user group.
             If omitted and the ProjectID request header is not defined, the change is published to production immediately.
    admin.UserGroupChangeDimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The object name of the dimension.
        subjectReferencePath:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: |-
            A qualifying path if the dimension is from an analytic object that references Employee.
             For example, use `subjectReferencePath` to create a filter on the `Employment_Start_Type` dimension from the `Employment_Start` object, which references `Employee`: `{ "ids": [ "Employee", "Employment_Start" ] }`.
        memberSelections:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeMemberSelectionDTO'
          description: The dimension members to select in the dynamic filter.
    admin.UserGroupChangeFailureDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the user group that couldn't be created.
        message:
          type: string
          description: The error message containing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        tenantCode:
          type: string
          description: The code of the tenant for which the user group could not be created or updated.
        projectId:
          type: string
          description: The ID of the project in which the user group could not be created or updated.
    admin.UserGroupChangeFilterDTO:
      type: object
      properties:
        filterId:
          type: string
          description: The unique identifier of the filter. Omit if creating a new filter.
        analyticObjectId:
          type: string
          description: The analytic object the filter applies to. Currently, the only supported analytic object is `Employee`. Default is `Employee`.
        dimensionFilters:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeDimensionFilterDTO'
          description: The dimensions in the dynamic filter.
    admin.UserGroupChangeMemberSelectionDTO:
      type: object
      properties:
        isExcluded:
          type: boolean
          description: If `true`, the specified member must not be defined for members of the user group.
        namePath:
          type: array
          items:
            type: string
          description: The name path for dimension members; for example, `[ "North America", "US", "CA" ]`.
    admin.UserGroupChangeResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeSuccessDTO'
          description: The user groups that were created.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeFailureDTO'
          description: The user groups that were not created.
    admin.UserGroupChangeSuccessDTO:
      type: object
      properties:
        displayName:
          type: string
          description: The display name of the created user group.
        userGroupId:
          type: string
          description: The unique identifier of the user group.
        tenantCode:
          type: string
          description: The code of the tenant the user group was created or updated in.
        projectId:
          type: string
          description: The ID of the project the user group was created or updated in.
    admin.UserGroupChangeUsersDTO:
      type: object
      properties:
        includeAllUsers:
          type: boolean
          description: |-
            If `true`, all users are included in the user group. If `true`:
             * You can manually exclude users with `manuallyExcludedIds`.
             * Cannot be combined with `manuallyIncludedIds` or `dynamicFilterDefinition`.
        manuallyIncludedIds:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: |-
            Includes specified user IDs in the user group.
             * May be combined with `dynamicFilterDefinition`.
             * Omit if `includeAllUsers` is `true`.
        manuallyExcludedIds:
          allOf:
            - $ref: '#/components/schemas/admin.ElementIDsDTO'
          description: |-
            Excludes specified user IDs from the user group.
             * You can manually exclude users if `includeAllUsers` is `true` or if `dynamicFilterDefinition` is defined.
             * Excluded IDs must not overlap with user IDs in `manuallyIncludedIds`.
        dynamicFilterDefinition:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupFiltersDTO'
          description: |-
            The filters that dynamically define a population through dimensions or dimensions accessible through references from the analytic object.
             * Omit if `includeAllUsers` is `true`.
             * You can combine dynamic filters with manually-assigned users.
    admin.UserGroupDeleteDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: |-
            The code of the tenant from which to delete the user group.
             Omit if deleting user groups in the current tenant.
        userGroupId:
          type: string
          description: Unique identifier for the user group.
        projectId:
          type: string
          description: |-
            The project ID in which to delete the user group.
             If omitted and the `ProjectID` request header is not defined, the change is published to production immediately.
    admin.UserGroupDeleteFailureDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant from which the user group could not be deleted.
        userGroupId:
          type: string
          description: The unique identifier of the user group that could not be deleted.
        message:
          type: string
          description: The error message containing the cause of the failure.
        rci:
          type: string
          description: The root cause identifier to provide to Visier Technical Support if you require further troubleshooting.
        projectId:
          type: string
          description: The ID of the project in which the user group could not be deleted.
    admin.UserGroupDeleteResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupDeleteSuccessDTO'
          description: The user groups that were successfully deleted.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupDeleteFailureDTO'
          description: The user groups that were not deleted successfully.
    admin.UserGroupDeleteSuccessDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The code of the tenant the user group was deleted from.
        userGroupId:
          type: string
          description: The unique identifier of the user group that was deleted.
        projectId:
          type: string
          description: The ID of the project in which user group was deleted.
    admin.UserGroupFiltersDTO:
      type: object
      properties:
        filters:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeFilterDTO'
          description: The filters that define user group membership.
    admin.UserGroupSingleDeleteResponseDTO:
      type: object
      properties:
        success:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupDeleteSuccessDTO'
          description: The user group was successfully deleted.
        failure:
          allOf:
            - $ref: '#/components/schemas/admin.UserGroupDeleteFailureDTO'
          description: The user group was not successfully deleted.
    admin.UserGroupsChangeDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupChangeDefinitionDTO'
          description: The user groups and their definitions.
    admin.UserGroupsDeleteRequestDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupDeleteDTO'
          description: The user groups to delete.
    admin.ConsolidatedAnalyticsAPIExcludedSourceListDTO:
      type: object
      properties:
        excludedSources:
          type: array
          items:
            type: string
          description: A list of the CA tenant's excluded sources.
    admin.ConsolidatedAnalyticsAPISourceTenantListDTO:
      type: object
      properties:
        tenantCodes:
          type: array
          items:
            type: string
          description: A list of the CA tenant's source tenants.
    admin.ConsolidatedAnalyticsAPITenantCreateRequestDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: |-
            The ID of the tenant. For example, WFF_{XXX}~CA{YYY} where {XXX} is the administrating tenant code and {YYY}
             is the consolidated analytic tenant code.
    admin.ConsolidatedAnalyticsAPITenantListResponseDTO:
      type: object
      properties:
        tenantCodes:
          type: array
          items:
            type: string
          description: A list of CA tenant codes.
    admin.ConsolidatedAnalyticsAPITenantWithDetails:
      type: object
      properties:
        tenantCode:
          type: string
          description: The CA tenant's code.
        sourceTenantsList:
          type: array
          items:
            type: string
          description: A list of the CA tenant's source tenants.
        excludedSourcesList:
          type: array
          items:
            type: string
          description: A list of the CA tenant's excluded sources.
    admin.ConsolidatedAnalyticsAPITenantWithDetailsListResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.ConsolidatedAnalyticsAPITenantWithDetails'
          description: A list of CA tenants and their details.
    admin.EmailDomainsDTO:
      type: object
      properties:
        domains:
          type: array
          items:
            type: string
          description: The list of allowed email address domains.
        confirmNotAllowedDomain:
          type: boolean
          description: If `true`, you cannot sign in using credentials, such as username and password. You can only log in with single sign-on (SSO). To avoid this, add your current email address's domain to allowed domains list.
    admin.PermissionResponseDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
    admin.PermissionsToUserGroupForTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        status:
          type: string
          description: The state of the permission assignment or removal. Valid values are Succeed or Failed.
        message:
          type: string
          description: A detailed description of the request outcome, if available.
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupGetAPIResponseDTO'
          description: A list of objects representing user groups and the permissions to assign to or remove from them.
    admin.PermissionsToUserGroupRequestDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier associated with the user group.
        permissionsIds:
          type: array
          items:
            type: string
          description: A list of strings representing the unique permission IDs to assign.
    admin.PermissionsToUserGroupsRequestDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.PermissionsToUserGroupRequestDTO'
          description: A list of objects representing the user groups and permissions to assign or remove.
    admin.SecurityAssignmentResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TenantAssignmentsDTO'
          description: A list of objects representing the tenants and users that were assigned to or removed from user groups.
    admin.SimpleUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
    admin.TargetProjectForTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code.
        projectId:
          type: string
          description: The project in which to make changes for the tenant.
    admin.TargetProjectForTenantsListDTO:
      type: object
      properties:
        targetProjectForTenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.TargetProjectForTenantDTO'
          description: |-
            Administrating tenants can specify the tenants and projects in which to make assignments to users. Specify one `projectId` per `tenantCode`.
             If omitted, the request is immediately published to production or applied to the `ProjectID` in the request header, if available, for the administrating tenant or TargetTenantID, if available.
    admin.TenantAssignmentsDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        status:
          enum:
            - Unknown
            - Succeed
            - Failed
          type: string
          description: The state of the user group assignment. Valid values are Succeed or Failed.
          format: enum
        message:
          type: string
          description: A detailed description of the request outcome, if available.
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserSecurityAssignmentsDTO'
          description: A list of objects representing the user group and user assignments.
        projectId:
          type: string
          description: The ID of the project that the change was made in, if applicable.
    admin.UserGroupGetAPIResponseDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier associated with the user group.
        displayName:
          type: string
          description: An identifiable user group name to display in Visier, such as "Leadership User Group".
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/admin.PermissionResponseDTO'
          description: A list of objects representing the user's permissions.
    admin.UserGroupsGetAPIResponseDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupGetAPIResponseDTO'
          description: A list of user groups.
        limit:
          type: integer
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset.
          format: uint32
    admin.UserGroupsUsersDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/admin.UserGroupsUsersForTenantDTO'
          description: A list of objects representing the users that are explicitly assigned to the user group, organized by the tenants the users belong to.
        limit:
          type: integer
          description: The limit of results to return. The maximum value is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving values from, also known as offset. The index begins at 0.
          format: uint32
    admin.UserGroupsUsersForTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        users:
          type: array
          items:
            $ref: '#/components/schemas/admin.SimpleUserDTO'
          description: A list of objects representing the users in the user group.
    admin.UserSecurityAssignmentsDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier associated with the user group.
        name:
          type: string
          description: The name of the user group.
        users:
          type: array
          items:
            $ref: '#/components/schemas/admin.SimpleUserDTO'
          description: A list of objects representing the users assigned to or removed from the user group.
    admin.UsersToUserGroupRequestDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The unique identifier associated with the user group.
        userIds:
          type: array
          items:
            type: string
          description: A list of strings representing unique user IDs to assign to or remove from the user group. The maximum number of `userIds` per user group is 100.
    admin.UsersToUserGroupsRequestDTO:
      type: object
      properties:
        userGroups:
          type: array
          items:
            $ref: '#/components/schemas/admin.UsersToUserGroupRequestDTO'
          description: A list of objects representing the user groups and users to assign or remove.
        targetProjectForTenantsList:
          allOf:
            - $ref: '#/components/schemas/admin.TargetProjectForTenantsListDTO'
          description: |-
            Administrating tenants can specify the tenants and projects in which to assign users to user groups or remove users from user groups. Specify one `projectId` per `tenantCode`.
             If omitted, the request is immediately published to production or applied to the ProjectID in the request header, if available, for the administrating tenant or TargetTenantID, if available.
    designer.crypto.GenerateKeyRequestDTO:
      type: object
      properties:
        keyName:
          type: string
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 6 and 36 characters long.
        expiryDate:
          type: string
          description: The UTC expiration date of the key in ISO-8601 format. Must be between 2 and 10 years. Default is 2 years.
        algorithm:
          type: string
          description: The hash-based message authentication code and cryptographic hash function associated with the encryption key. Must be one of `HmacSHA224`, `HmacSHA256`, `HmacSHA384`, or `HmacSHA512`.
      description: The settings to define for an encryption key.
    designer.crypto.TenantEncryptionKeyDTO:
      type: object
      properties:
        detail:
          allOf:
            - $ref: '#/components/schemas/designer.crypto.TenantEncryptionKeyDetailsDTO'
          description: Information about an encryption key.
        key:
          type: string
          description: The encryption key value.
      description: The details of an encryption key.
    designer.crypto.TenantEncryptionKeyDetailsDTO:
      type: object
      properties:
        keyName:
          type: string
          description: The encryption key's display name. The name may only contain alphanumeric or dash (-) characters and must be between 6 and 36 characters long.
        algorithm:
          type: string
          description: The hash-based message authentication code and cryptographic hash function associated with the encryption key.
        generatedBy:
          type: string
          description: The user who generated the key.
        dateGenerated:
          type: string
          description: The UTC date that the key was generated in milliseconds since the Unix epoch.
        expiryDate:
          type: string
          description: The UTC expiration date of the key in milliseconds since the Unix epoch.
      description: Information about who generated an encryption key, its key name, algorithm, generation date, and expiration date.
    designer.ModuleSettingsDTO:
      type: object
      properties:
        unavailableForAssignment:
          type: boolean
          description: If true, the module cannot be assigned to tenants.
        specialHandlingInstruction:
          type: string
          description: An instruction message in the module selection dialog. This can be a note for administrators such as "Don't assign this module" or "Assign Module B instead".
        locale:
          type: string
          description: The language of the module. For example, a module that is in English will have the locale "en".
    designer.TenantModuleDTO:
      type: object
      properties:
        displayName:
          type: string
          description: An identifiable name that is displayed within Visier. For example, "TALENT".
        symbolName:
          type: string
          description: The symbol name of the module. For example, "Talent_Management".
        moduleSettings:
          allOf:
            - $ref: '#/components/schemas/designer.ModuleSettingsDTO'
          description: The settings associated with the module.
    dp_automation.MetricValidationSummaryDTO:
      type: object
      properties:
        symbolName:
          type: string
          description: The symbol name of the metric. For example, "employeeCount".
        displayName:
          type: string
          description: An identifiable name that is displayed within Visier. For example, "Headcount".
        value:
          type: number
          description: The current value of the metric expressed as an integer.
          format: double
    dp_automation.TenantPreviewEntriesSummaryDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant. For example, "WFF_j1r~i1o".
        dataVersion:
          type: string
          description: The data version ID.
        dataVersionDate:
          type: string
          description: The date that the data version was created.
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/dp_automation.MetricValidationSummaryDTO'
          description: A list of metrics and their values.
    dp_automation.TenantPreviewEntriesSummaryListDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/dp_automation.TenantPreviewEntriesSummaryDTO'
          description: A list of objects representing all the analytic tenants.
        limit:
          type: integer
          description: The number of analytic tenants to retrieve. The maximum number to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
    servicing.AccessibleTenantProfileAssignmentRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to assign this profile.
        targetTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TargetTenantCodeDTO'
          description: A list of objects representing the  analytic tenants for profiles assigned to the users.
        validityStartTime:
          type: string
          description: An inclusive date-time when this profile is active.
        validityEndTime:
          type: string
          description: An exclusive date-time when this profile is no longer active.
    servicing.AccessibleTenantProfileAssignmentResponseDTO:
      type: object
      properties:
        errors:
          type: boolean
          description: If true, an error is generated by the request.
        badTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TenantCodeErrorDTO'
          description: A list of objects representing any tenants that returned errors.
        badUserIds:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserIdErrorDTO'
          description: A list of objects representing the user IDs that may not be valid.
        failedAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.FailedAccessibleTenantProfileAssignmentDTO'
          description: A list of objects representing any errors during the assignment operation.
        successfulAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulAccessibleTenantProfileAssignmentDTO'
          description: A list of user IDs that were successfully assigned the profiles.
    servicing.AccessibleTenantProfileRevokeRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to remove this profile from.
        targetTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.TargetTenantCodeDTO'
          description: A list of objects representing the  analytic tenants for removing profiles from each target user ID.
    servicing.AccessibleTenantProfileRevokeResponseDTO:
      type: object
      properties:
        badTenantCodes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ReducedTenantCodeErrorDTO'
          description: A list of objects representing any tenants that returned errors.
        badUserIds:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ReducedUserIdErrorDTO'
          description: A list of objects representing the user IDs that may not be valid.
        unaffectedUsers:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of objects representing the valid user IDs that were not affected.
        succeeded:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of objects representing the valid user IDs that succeeded.
    servicing.AdditionalCapabilitiesDTO:
      type: object
      properties:
        additionalCapabilities:
          type: array
          items:
            type: string
          description: The additional capabilities assigned to this profile.
    servicing.AdminCapabilityConfigDTO:
      type: object
      properties:
        allCapabilitiesAccess:
          type: boolean
          description: If `true`, the permission has all possible capabilities.
        capabilities:
          type: array
          items:
            type: string
          description: A list of the capabilities assigned in the permission. Not required if `allCapabilitiesAccess` is true.
    servicing.AllPermissionsAssignedForLocalTenantDTO:
      type: object
      properties:
        assignedPermissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionAssignedForLocalTenantDTO'
          description: A list of objects representing the user's permissions.
    servicing.AllProfileAssignedForAccessibleTenantDTO:
      type: object
      properties:
        assignedProfilesForAccessibleTenant:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProfileAssignedForAccessibleTenantDTO'
          description: A list of objects representing the user profiles assigned to the user and their validity range.
    servicing.AllProfileAssignedForLocalTenantDTO:
      type: object
      properties:
        assignedProfiles:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProfileAssignedForLocalTenantDTO'
          description: A list of objects representing the user profiles assigned to the user and their validity range.
    servicing.AllUserGroupsAssignedForLocalTenantDTO:
      type: object
      properties:
        assignedUserGroups:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserGroupAssignedForLocalTenantDTO'
          description: A list of objects representing the available user groups.
    servicing.AllUsersGetAPIResponseDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserGetAPIResponseDTO'
          description: A list of available users.
        limit:
          type: integer
          description: The number of results to return. The maximum number of users to retrieve is 1000.
          format: uint32
        start:
          type: integer
          description: The index to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
    servicing.AnalyticObjectDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object.
        displayName:
          type: string
          description: An identifiable name to display in Visier, such as "Employee".
        objectType:
          enum:
            - Event
            - Subject
            - BusinessOutcomeOverlay
            - PlanOrBudgetOverlay
            - ExternalBenchmark
            - VisierBenchmark
            - UsageOverlay
            - OtherOverlay
            - InternalComparison
            - PlanAnalyticObject
          type: string
          description: The analytic object type.
          format: enum
        relatedObjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.RelatedAnalyticObjectDTO'
          description: The analytic objects related to the data security object.
        securableProperties:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SecurablePropertyDTO'
          description: All available properties from the data security object and its related analytic objects that you can configure data access for.
        securableDimensions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SecurableDimensionDTO'
          description: A list of dimensions that are available to define population access filters in the permission.
    servicing.AssignRevokePermissionByPermissionDTO:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/servicing.PermissionAssignedForLocalTenantDTO'
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionByUserDTO'
          description: A list of objects representing the users that was permission was assigned to or removed from.
      description: The results of the permission assignment or removal.
    servicing.AssignRevokePermissionByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionByPermissionDTO'
          description: A list of objects representing the assigned or removed permissions.
        status:
          enum:
            - Unknown
            - Succeed
            - Failed
          type: string
          description: The state of the permission assignment. Valid values are Succeed or Failed.
          format: enum
        message:
          type: string
          description: A detailed description of the request outcome, if available.
        projectId:
          type: string
          description: The ID of the project that the change was made in, if applicable.
      description: The permissions organized by tenant.
    servicing.AssignRevokePermissionByUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        message:
          type: string
          description: A meaningful message about the user permission.
      description: The results of the permission assignment or removal by user.
    servicing.AssignRevokePermissionRequestDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with a permission.
        userIds:
          type: array
          items:
            type: string
          description: A list of strings representing unique user IDs.
      description: |-
        Set permission detail
         permissionId with assign to userIds
    servicing.AssignRevokePermissionsRequestDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionRequestDTO'
          description: A list of objects representing the permissions to assign to or remove from users.
        targetProjectForTenantsList:
          allOf:
            - $ref: '#/components/schemas/admin.TargetProjectForTenantsListDTO'
          description: |-
            Administrating tenants can specify the tenants and projects in which to assign permissions to users or remove permissions from users. Specify one `projectId` per `tenantCode`.
             If omitted, the request is immediately published to production or applied to the `ProjectID` in the request header, if available, for the administrating tenant or TargetTenantID, if available.
      description: |-
        Set permissions request
         List of permissionId with assign to user Ids
    servicing.AssignRevokePermissionsResponseDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AssignRevokePermissionByTenantDTO'
          description: A list of objects representing the users that were assigned permissions, organized by the tenants the users belong to.
      description: The results of the permission assignment or removal.
    servicing.BulkDataAccessSetResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetSuccessDTO'
          description: The successfully created data access sets.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetFailureDTO'
          description: The data access sets that failed to be created and any relevant error information.
    servicing.CapabilitiesDTO:
      type: object
      properties:
        capability:
          type: string
          description: The name of the capability.
        accessLevel:
          type: string
          description: The access level of the profile for the given capability.
        viewLevel:
          type: string
          description: The view level of the profile for the given capability.
    servicing.CapabilityDTO:
      type: object
      properties:
        name:
          type: string
          description: The unique name of the capability.
        displayName:
          type: string
          description: An identifiable capability name to display in Visier, such as "Schedule Analysis".
        description:
          type: string
          description: A description of the capability.
    servicing.CommitAndPublishOperationResponseDTO:
      type: object
      properties:
        publishedVersion:
          allOf:
            - $ref: '#/components/schemas/servicing.ProjectDTO'
          description: The project version that was published to production.
    servicing.CommitDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the committed change.
        name:
          type: string
          description: An identifiable name of the committed change to display in Visier.
        description:
          type: string
          description: A description of the committed change.
    servicing.ContentPackageDTO:
      type: object
      properties:
        contentPackageId:
          type: string
          description: The unique ID of the content package.
        displayName:
          type: string
          description: An identifiable content package name to display in Visier, such as "Talent Acquisition Core Content".
        description:
          type: string
          description: A description of the content package.
    servicing.CreateDataAccessSetRequestDTO:
      type: object
      properties:
        shareablePropertyAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetDTO'
          description: The data access sets to be created.
    servicing.DataAccessSetDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the data access set.
        displayName:
          type: string
          description: An identifiable data access set name to display in Visier, such as "Aggregate(Employee)".
        description:
          type: string
          description: A description of the data access set.
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object that the data access set is for.
        propertyAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PropertyAccessConfigDTO'
          description: The data access assigned to properties in the data access set.
    servicing.DataAccessSetErrorDTO:
      type: object
      properties:
        message:
          type: string
          description: Error message
        rci:
          type: string
          description: A root cause identifier that allows Visier to determine the source of the problem.
    servicing.DataAccessSetFailureDTO:
      type: object
      properties:
        dataAccessSetId:
          type: string
          description: The unique identifier associated with the data access set.
        displayName:
          type: string
          description: An identifiable data access set name to display in Visier, such as "Detailed(Employee)".
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.DataAccessSetErrorDTO'
          description: The error associated with the failure.
    servicing.DataAccessSetSuccessDTO:
      type: object
      properties:
        dataAccessSetId:
          type: string
          description: The unique identifier associated with the created data access set.
        displayName:
          type: string
          description: An identifiable data access set name to display in Visier, such as "Detailed(Employee)".
    servicing.DataSecurityProfileDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The unique ID of the analytic object assigned data security in this permission.
        propertySetConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.PropertySetConfigDTO'
          description: A list of objects representing the data access for an analytic object’s properties.
        allDataPointAccess:
          type: boolean
          description: If `true`, the permission grants access to the entire population. If `false`, define `memberFilterConfigs` to set custom population access.
        memberFilterConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.MemberFilterConfigDTO'
          description: Custom filters that define population access for an item in the permission.
        inheritedAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.InheritedAccessConfigDTO'
          description: |-
            The events and related objects inherited from the analytic object.
             By default, all events and related objects associated with the analytic object will be inherited from the analytic object in a permission.
             For example, if you assign access to Employee, then access to the Employee Exit event is inherited in the permission.
             To remove access to an event or related object, add the object to `inheritedAccessConfigs` with `removeAccess`: true.
             To add custom filters to an event or related object, add the object to `inheritedAccessConfigs` and define `memberFilterConfigs`.
        inheritedReferenceMemberFilterConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.InheritedReferenceMemberFilterConfigDTO'
          description: |-
            Configures the analytic object to inherit population access filters from. The target analytic object must be assigned population access in the permission and have a binding (strong) reference from the source analytic object.
             * For example, assume `Applicant` -> `Requisition` is configured to be a binding (strong) reference.
             For `Applicant` (source analytic object) to inherit population access filters from `Requisition` (target analytic object), in the Applicant `dataSecurityProfile`, set `inheritedReferenceMemberFilterConfig` to `Requisition`. In this example, Applicant will inherit filters from Requisition because Requsition is assigned data security in this permission and there is a binding (strong) reference from Applicant to Requisition.
        analyticObjectStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The analytic object's validity status. Valid values: Valid, NoData, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.DeletePermissionsRequestDTO:
      type: object
      properties:
        permissionIds:
          type: array
          items:
            type: string
          description: The identifiers of the permissions to delete.
    servicing.DimensionFilterDTO:
      type: object
      properties:
        staticDimensionFilter:
          $ref: '#/components/schemas/servicing.StaticDimensionFilterDTO'
        dynamicDimensionFilter:
          $ref: '#/components/schemas/servicing.DynamicDimensionFilterDTO'
    servicing.DynamicDimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The dimension ID associated with the filter.
        subjectReferencePath:
          type: array
          items:
            type: string
          description: The subject reference path.
        dynamicPropertyMappings:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DynamicPropertyMappingDTO'
          description: The properties assigned population access in the dynamic filter.
        dimensionStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The dimension's validity status. Valid values: Valid, NoData, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.DynamicPropertyMappingDTO:
      type: object
      properties:
        hierarchyPropertyId:
          type: string
          description: The unique ID of the property.
        userProperty:
          allOf:
            - $ref: '#/components/schemas/servicing.UserPropertyDTO'
          description: The user property that you want to link the name property or organization head to.
        hierarchyPropertyStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The property's validity status. Valid values: `Valid`, `NotFound`.
             * **Valid**: The object exists and has loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.ErrorDTO:
      type: object
      properties:
        rootCauseId:
          type: string
          description: The root cause identifier that allows Visier to determine the source of the problem.
        errorCode:
          type: string
          description: A brief identifier of the type of error.
        errorMessage:
          type: string
          description: A description of the error that occurred.
    servicing.ExportProductionVersionsAPIOperationParametersDTO:
      type: object
      properties:
        startVersion:
          type: string
          description: The unique identifier of the version to start exporting versions from. The range is inclusive.
        endVersion:
          type: string
          description: The unique identifier of the version to stop exporting versions at. The range is inclusive.
        excludedVersions:
          type: array
          items:
            type: string
          description: A list of versions between `startVersion` and `endVersion` to exclude.
    servicing.ExportProductionVersionsAPIOperationResponseDTO:
      type: object
      properties: {}
    servicing.ExportSourcesAPIOperationResponseDTO:
      type: object
      properties: {}
    servicing.FailedAccessibleTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The impacted user ID.
        tenantCode:
          type: string
          description: The tenant code.
        forAllChildren:
          type: boolean
          description: If true, the target assignment is for all analytic tenants.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.FailedLocalTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The impacted user ID.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.FailedLocalTenantProfileRevokeDTO:
      type: object
      properties:
        userId:
          type: string
          description: The impacted user ID.
        message:
          type: string
          description: The details about the error.
    servicing.GetCapabilitiesAPIResponseDTO:
      type: object
      properties:
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilityDTO'
          description: A list of objects representing the available capabilities.
    servicing.GetContentPackagesAPIResponseDTO:
      type: object
      properties:
        contentPackages:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ContentPackageDTO'
          description: A list of objects representing the available content packages.
    servicing.GetDataAccessSetsAPIResponseDTO:
      type: object
      properties:
        dataAccessSets:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataAccessSetDTO'
          description: A list of objects representing the shareable data access sets.
    servicing.GetDataSecurityObjectsAPIResponseDTO:
      type: object
      properties:
        analyticObjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.AnalyticObjectDTO'
          description: A list of analytic objects and their related objects that are available to define data access to.
    servicing.GetPermissionsAPIResponseDTO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionDTO'
          description: A list of objects representing the available permissions.
      description: List of available permissions
    servicing.GetProductionVersionsAPIResponseDTO:
      type: object
      properties:
        publishedVersions:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of projects that were published to production.
    servicing.GetProjectsAPIResponseDTO:
      type: object
      properties:
        openProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible open projects for the user.
        approvalProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible approval projects for the user.
        rejectedProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible rejected projects for the user.
        archivedProjects:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProjectDTO'
          description: A list of objects representing the accessible archived projects for the user.
    servicing.HierarchyPropertyDTO:
      type: object
      properties:
        hierarchyPropertyId:
          type: string
          description: The unique ID of the property.
        displayName:
          type: string
          description: An identifiable property name to display in Visier, such as "Name Property".
    servicing.InheritedAccessConfigDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The analytic object ID associated with the inherited access configuration.
        removeAccess:
          type: boolean
          description: The flag for removing access to the inherited analytic object.
        memberFilterConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.MemberFilterConfigDTO'
          description: Custom filters that define population access for an inherited analytic object in the permission.
    servicing.InheritedReferenceMemberFilterConfigDTO:
      type: object
      properties:
        targetAnalyticObjectId:
          type: string
          description: |-
            The unique ID of the analytic object that the source
            analytic object should inherit filters from. The target analytic object must have a binding (strong) reference from the source analytic object.
        analyticObjectReference:
          type: string
          description: |-
            The optional object name of a binding (strong) reference to the target analytic object. If not specified, uses the first binding reference from the source
            to the target analytic object.
    servicing.LastLoginDTO:
      type: object
      properties:
        timestamp:
          type: string
          description: The time that the user last logged into Visier.
    servicing.LocalTenantProfileAssignmentRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to assign this profile.
        validityStartTime:
          type: string
          description: An inclusive date-time when this profile is active.
        validityEndTime:
          type: string
          description: An exclusive date-time when this profile is no longer active.
    servicing.LocalTenantProfileAssignmentResponseDTO:
      type: object
      properties:
        errors:
          type: boolean
          description: If true, an error was generated by the request.
        badUserIds:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserIdErrorDTO'
          description: A list of objects representing the user IDs that may not be valid.
        failedAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.FailedLocalTenantProfileAssignmentDTO'
          description: A list of objects representing any errors that occurred during the assignment operation.
        successfulAssignments:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of the user IDs that were successfully assigned the profile.
    servicing.LocalTenantProfileRevokeRequestDTO:
      type: object
      properties:
        targetUserIds:
          type: array
          items:
            type: string
          description: A list of users to remove this profile from.
    servicing.LocalTenantProfileRevokeResponseDTO:
      type: object
      properties:
        failed:
          type: array
          items:
            $ref: '#/components/schemas/servicing.FailedLocalTenantProfileRevokeDTO'
          description: A list of objects representing any errors that occurred during the assignment operation.
        succeeded:
          type: array
          items:
            $ref: '#/components/schemas/servicing.SuccessfulLocalTenantProfileAssignmentDTO'
          description: A list of the user IDs that successfully had a profile removed.
    servicing.MemberFilterConfigDTO:
      type: object
      properties:
        dimensionFilters:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DimensionFilterDTO'
          description: "A list of objects representing the custom filters that define population access for the item. \n A custom filter can be a \"member filter\" (`staticDimensionFilter`) or a \"dynamic filter\" (`dynamicDimensionFilter`)."
    servicing.MemberSelectionDTO:
      type: object
      properties:
        namePath:
          type: array
          items:
            type: string
          description: The member name path.
        excluded:
          type: boolean
          description: If `true`, population access is granted for all members except this member.
        dimensionMemberStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The dimension member's validity status. Valid values: Valid, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.PermissionAssignedByTenantDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The unique identifier associated with the tenant.
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionAssignedUserDTO'
          description: A list of objects representing the users that the permission is assigned to.
      description: The users assigned a specific permission, grouped by tenant.
    servicing.PermissionAssignedForLocalTenantDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
        description:
          type: string
          description: A user-defined description of the permission.
    servicing.PermissionAssignedUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        permissionFrom:
          type: string
          description: |-
            The method through which the user was assigned the permission. The permission may be assigned through
             the following options:
              - User: The permission was directly assigned to the user.
              - UserGroup: The permission was assigned because the user belongs to a user group that is assigned the permission.
              - UserAndUserGroup: The permission was directly assigned to the user and assigned because the user belongs to
                a user group that is assigned the permission.
      description: The user and the method through which the user was assigned the permission.
    servicing.PermissionAssignedUsersDTO:
      type: object
      properties:
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionAssignedByTenantDTO'
          description: A list of objects representing the users that are assigned the specific permission, organized by the tenants the users belong to.
        limit:
          type: integer
          description: The number of results to return. The maximum number of tenants to retrieve is 100.
          format: uint32
        start:
          type: integer
          description: The index of the tenant to start retrieving results from, also known as offset. The index begins at 0.
          format: uint32
      description: Users that are assigned a specific permission.
    servicing.PermissionBulkOperationResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionSuccessDTO'
          description: The successfully processed permissions.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PermissionFailureDTO'
          description: The permissions that did not process and any relevant error information.
    servicing.PermissionDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
        description:
          type: string
          description: A user-defined description of the permission.
        dataSecurityProfiles:
          type: array
          items:
            $ref: '#/components/schemas/servicing.DataSecurityProfileDTO'
          description: A list of objects representing the data security for each item in a permission.
        adminCapabilityConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.AdminCapabilityConfigDTO'
          description: The capabilities assigned in the permission.
        roleModulesConfig:
          allOf:
            - $ref: '#/components/schemas/servicing.RoleModulesConfigDTO'
          description: A list of content packages assigned to the permission.
    servicing.PermissionErrorDTO:
      type: object
      properties:
        message:
          type: string
          description: Error message
        rci:
          type: string
          description: A root cause identifier that allows Visier to determine the source of the problem.
    servicing.PermissionFailureDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.PermissionErrorDTO'
          description: The error associated with the failure.
    servicing.PermissionSuccessDTO:
      type: object
      properties:
        permissionId:
          type: string
          description: The unique identifier associated with the permission.
        displayName:
          type: string
          description: An identifiable permission name to display in Visier, such as "Diversity Access".
    servicing.ProductionVersionAPIOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknownProductionVersionAPIOperation
            - rollBackTo
          type: string
          description: |-
            The operation to perform. Valid values:
             * `rollBackTo`: Create a project that rolls back the production version to the specified version. The project contains uncommitted changes that reverse the published versions after the target production version.
          format: enum
    servicing.ProductionVersionAPIOperationResponseDTO:
      type: object
      properties:
        rollBackTo:
          allOf:
            - $ref: '#/components/schemas/servicing.ProjectDTO'
          description: The project created by the `rollBackTo` operation.
    servicing.ProductionVersionsAPIOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknownProductionVersionsAPIOperation
            - export
          type: string
          description: |-
            The operation to perform. Valid values:
             * `export`: Export the project changes of the requested production versions and their related files, such as any Guidebook images. If successful, a ZIP file is returned containing any relevant image files and a JSON file with the production project changes.
          format: enum
        exportParameters:
          allOf:
            - $ref: '#/components/schemas/servicing.ExportProductionVersionsAPIOperationParametersDTO'
          description: The parameters for the `export` option, such as the production version to start exporting versions from. Required for `export` operations.
    servicing.ProductionVersionsAPIOperationResponseDTO:
      type: object
      properties:
        export:
          allOf:
            - $ref: '#/components/schemas/servicing.ExportProductionVersionsAPIOperationResponseDTO'
          description: The result of the `export` operation.
    servicing.ProfileAssignedForAccessibleTenantDTO:
      type: object
      properties:
        profileId:
          type: string
          description: The unique identifier associated with the profile.
        displayName:
          type: string
          description: An identifiable profile name to display in Visier such as "Partner Service Manager".
        tenantCode:
          type: string
          description: The tenant code of the analytic tenant on which this profile is assigned.
        forAllChildren:
          type: boolean
          description: If true, the profile is assigned for all the analytic tenants of the administrating tenant.
        validityStartTime:
          type: string
          description: |-
            An inclusive date-time when this profile is active.

             Note: Long.Min_Value means that startTime is undefined.
        validityEndTime:
          type: string
          description: |-
            An exclusive date-time when this profile is no longer active.

             Note: Long.Max_Value means that endTime is undefined and is equivalent to permanent access.
    servicing.ProfileAssignedForLocalTenantDTO:
      type: object
      properties:
        profileId:
          type: string
          description: The unique identifier associated with the profile.
        displayName:
          type: string
          description: An identifiable profile name to display in Visier, such as "Partner Service Manager".
        validityStartTime:
          type: string
          description: An inclusive date-time when this profile is active.
        validityEndTime:
          type: string
          description: An exclusive date-time when this profile is no longer active.
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilitiesDTO'
          description: A list of objects representing the access that this profile has for the capabilities of this profile.
        additionalCapabilities:
          allOf:
            - $ref: '#/components/schemas/servicing.AdditionalCapabilitiesDTO'
          description: A list of the additional capabilities that are assigned to this profile.
    servicing.ProfileGetAPIResponseDTO:
      type: object
      properties:
        profileId:
          type: string
          description: The unique identifier associated with the profile.
        displayName:
          type: string
          description: An identifiable profile name to display in Visier. For example, "Partner Service Manager".
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CapabilitiesDTO'
          description: A list of objects representing the access that this profile has for the capabilities of this profile.
        additionalCapabilities:
          type: array
          items:
            type: string
          description: A list of the additional capabilities that are assigned to this profile.
    servicing.ProfilesGetAPIResponseDTO:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/servicing.ProfileGetAPIResponseDTO'
          description: A list of objects representing the available profiles.
    servicing.ProjectCommitsAPIResponseDTO:
      type: object
      properties:
        commits:
          type: array
          items:
            $ref: '#/components/schemas/servicing.CommitDTO'
          description: A list of committed changes in the project.
    servicing.ProjectDTO:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the project. Omit when creating a new project.
        name:
          type: string
          description: An identifiable project name to display in Visier.
        description:
          type: string
          description: A description of the project.
        releaseVersion:
          type: string
          description: The release version of the project.
        ticketNumber:
          type: string
          description: The change management ticket number of the project.
        versionNumber:
          type: integer
          description: The version number of the project.
          format: int32
        capabilities:
          type: array
          items:
            enum:
              - canRead
              - canWrite
              - canShare
              - owner
            type: string
            format: enum
          description: |-
            The current user's capabilities for the project. Users with `canWrite`, `canShare`, or `owner` capabilities can add and commit changes to the project.
             **canRead**: The project has been shared to the user with `View` access.
             **canWrite**: The project has been shared to the user with `Edit` access.
             **canShare**: The project has been shared to the user with `Share` access.
             **owner**: The user is the owner of the project.
             Omit when creating a new project.
    servicing.ProjectOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknown
            - commitAndPublish
          type: string
          description: |-
            The operation to perform on a draft project. Valid values:
             * `commitAndPublish`: Commits the requesting user's changes and publishes the draft project to production.
          format: enum
    servicing.ProjectOperationResponseDTO:
      type: object
      properties:
        commitAndPublish:
          allOf:
            - $ref: '#/components/schemas/servicing.CommitAndPublishOperationResponseDTO'
          description: The result of the `commitAndPublish` operation.
    servicing.PropertyAccessConfigDTO:
      type: object
      properties:
        propertyId:
          type: string
          description: The property ID associated with the property access configuration.
        analyticObjectId:
          type: string
          description: The analytic object ID of the property.
        analyticObjectReferencePaths:
          type: array
          items:
            type: string
          description: The path to the analytic object reference. Empty if the configuration is not a reference.
        accessLevel:
          enum:
            - None
            - Aggregate
            - Detailed
          type: string
          description: |-
            The access level of the property. Valid values are: `Aggregate`, `Detailed`.
             * **Aggregate**: The property can only be accessed as part of an aggregate.
             * **Detailed**: The property can be accessed at a detailed level.
          format: enum
        propertyStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The property's validity status. Valid values: `Valid`, `NoData`, `NotFound`.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.PropertySetConfigDTO:
      type: object
      properties:
        propertyAccessConfigs:
          type: array
          items:
            $ref: '#/components/schemas/servicing.PropertyAccessConfigDTO'
          description: The data access for a property.
        shareableDataAccessSet:
          allOf:
            - $ref: '#/components/schemas/servicing.ShareableDataAccessSet'
          description: A shareable data access set. Shareable data access sets may be linked in multiple permissions.
    servicing.ReducedErrorDTO:
      type: object
      properties:
        errorMessage:
          type: string
          description: A meaningful message for the end user.
    servicing.ReducedTenantCodeErrorDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The bad tenant code.
        forAllChildren:
          type: boolean
          description: If true, the assignment is for all the analytic tenants of the specified tenant.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ReducedErrorDTO'
          description: The details about the error.
    servicing.ReducedUserIdErrorDTO:
      type: object
      properties:
        userId:
          type: string
          description: The bad user ID.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ReducedErrorDTO'
          description: The details about the error.
    servicing.RelatedAnalyticObjectDTO:
      type: object
      properties:
        analyticObjectId:
          type: string
          description: The analytic object ID.
        displayName:
          type: string
          description: An identifiable analytic object name to display in Visier, such as "Recognition".
    servicing.RoleModulesConfigDTO:
      type: object
      properties:
        contentPackageIds:
          type: array
          items:
            type: string
          description: The unique IDs of the content packages assigned to the permission.
    servicing.SecurableDimensionDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The dimension ID.
        displayName:
          type: string
          description: An identifiable dimension name to display in Visier, such as "Contract Type".
        analyticObjectIds:
          type: array
          items:
            type: string
          description: A list of analytic object IDs.
        hierarchyProperties:
          type: array
          items:
            $ref: '#/components/schemas/servicing.HierarchyPropertyDTO'
          description: The list of hierarchies you can map to a user in a permission's dynamic filter.
    servicing.SecurablePropertyDTO:
      type: object
      properties:
        propertyId:
          type: string
          description: The property ID.
        displayName:
          type: string
          description: An identifiable property name to display in Visier, such as "Job Pay Level".
        analyticObjectId:
          type: string
          description: The property's analytic object ID.
        isPrimaryKey:
          type: boolean
          description: If true, this property is the analytic object's primary key.
        referenceSymbolName:
          type: string
          description: The reference symbol name.
    servicing.ShareableDataAccessSet:
      type: object
      properties:
        dataAccessSetId:
          type: string
          description: The unique identifier of the shareable data access set.
    servicing.SourcesAPIOperationRequestDTO:
      type: object
      properties:
        operation:
          enum:
            - unknownSourcesAPIOperation
            - exportSources
          type: string
          description: |-
            The operation to perform. Valid values:
             * `exportSources`: Export all sources from the tenant. If successful, a ZIP file is returned containing a compressed JSON file with the sources.
          format: enum
    servicing.StaticDimensionFilterDTO:
      type: object
      properties:
        dimensionId:
          type: string
          description: The dimension ID associated with the filter.
        subjectReferencePath:
          type: array
          items:
            type: string
          description: The subject reference path.
        memberSelections:
          type: array
          items:
            $ref: '#/components/schemas/servicing.MemberSelectionDTO'
          description: A list of objects representing the dimension members assigned population access in the member filter.
        dimensionStatus:
          enum:
            - Unset
            - Valid
            - NoData
            - NotFound
          type: string
          description: |-
            The dimension's validity status. Valid values: Valid, NoData, NotFound.
             * **Valid**: The object exists and has loaded data.
             * **NoData**: The object exists but doesn't have loaded data.
             * **NotFound**: The object doesn't exist.
          format: enum
    servicing.SuccessfulAccessibleTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The user ID.
        tenantCode:
          type: string
          description: The tenant code.
        forAllChildren:
          type: boolean
          description: If true, the target assignment is for all analytic tenants.
    servicing.SuccessfulLocalTenantProfileAssignmentDTO:
      type: object
      properties:
        userId:
          type: string
          description: The user ID.
    servicing.TargetTenantCodeDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The tenant code.
        forAllChildren:
          type: boolean
          description: If true, the assignment is for all the analytic tenants of the specified tenant.
    servicing.TenantCodeErrorDTO:
      type: object
      properties:
        tenantCode:
          type: string
          description: The bad tenant code.
        forAllChildren:
          type: boolean
          description: If true, the target assignment is for all analytic tenants.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.UserCreationAPIRequestDTO:
      type: object
      properties:
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@visier.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If false, the user account is disabled.
        email:
          type: string
          description: The user's email. This is used if the user's email is different from their username. For example, "john.doe@visier.com".
    servicing.UserGetAPIResponseDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: boolean
          description: If false, the user account is disabled.
        profiles:
          allOf:
            - $ref: '#/components/schemas/servicing.AllProfileAssignedForLocalTenantDTO'
          description: A list of objects representing the list of available profiles. Not returned if the user has no profiles.
        permissions:
          allOf:
            - $ref: '#/components/schemas/servicing.AllPermissionsAssignedForLocalTenantDTO'
          description: A list of objects representing the user's permissions.
        userGroups:
          allOf:
            - $ref: '#/components/schemas/servicing.AllUserGroupsAssignedForLocalTenantDTO'
          description: A list of objects representing the available user groups.
        lastLogin:
          allOf:
            - $ref: '#/components/schemas/servicing.LastLoginDTO'
          description: An object that represents the time that the user last logged into Visier.
        email:
          type: string
          description: The user's email address.
    servicing.UserGroupAssignedForLocalTenantDTO:
      type: object
      properties:
        userGroupId:
          type: string
          description: The user group ID.
        displayName:
          type: string
          description: An identifiable user group name to display in Visier, such as "Leadership User Group".
    servicing.UserIdErrorDTO:
      type: object
      properties:
        userId:
          type: string
          description: The bad user ID.
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.ErrorDTO'
          description: The details about the error.
    servicing.UserPropertyDTO:
      type: object
      properties:
        name:
          type: string
          description: The name property to map to in the dynamic filter. Valid values are one of `username`, `email`, `employeeId`.
    servicing.UserUpdateAPIRequestDTO:
      type: object
      properties:
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
    servicing.UsersAPIErrorMessageDTO:
      type: object
      properties:
        message:
          type: string
          description: Error message
        rci:
          type: string
          description: The unique identifier associated to this error
    servicing.UsersAPIFailureDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        userName:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        error:
          allOf:
            - $ref: '#/components/schemas/servicing.UsersAPIErrorMessageDTO'
          description: The error thrown during creation.
    servicing.UsersAPIResponseDTO:
      type: object
      properties:
        successes:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UsersAPISuccessDTO'
          description: The users for which the request succeeded.
        failures:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UsersAPIFailureDTO'
          description: The users for which the request failed.
    servicing.UsersAPISuccessDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
    servicing.UsersCreationAPIRequestDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UserCreationAPIRequestDTO'
          description: A list of objects representing users to create. Maximum 100 users can be created in a single request.
    servicing.UsersDeleteAPIRequestDTO:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: string
          description: A list of objects representing users to delete. Maximum 100 users can be deleted in a single request.
    servicing.UsersUpdateAPIRequestDTO:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/servicing.UsersUpdateAPIUserDTO'
          description: A list of objects representing users to update. Maximum 100 users can be updated in a single request.
    servicing.UsersUpdateAPIUserDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
    systemstatus.SystemStatusDTO:
      type: object
      properties:
        overall:
          type: string
          description: The overall status of Visier's platform and services.
    SourceImportResultSummaryDTO:
      type: object
      properties:
        created:
          type: integer
          description: The number of imported sources that were newly created in the target tenant.
          format: int32
        updated:
          type: integer
          description: The number of imported sources that already existed and were updated in the target tenant.
          format: int32
        ignored:
          type: integer
          description: The number of imported sources that already existed and were unchanged in the target tenant.
          format: int32
        deleted:
          type: integer
          description: The number of imported sources that existed in the target tenant prior to the import and were deleted during the import.
          format: int32
    SourcesAPIPutResponseDTO:
      type: object
      properties:
        summary:
          allOf:
            - $ref: '#/components/schemas/SourceImportResultSummaryDTO'
          description: The changes made to the sources during the operation.
    UserCreationAPIResponseDTO:
      type: object
      properties:
        userId:
          type: string
          description: The unique identifier associated with the user.
        username:
          type: string
          description: The user's username. This is typically the user's email, such as john@jupiter.com.
        displayName:
          type: string
          description: An identifiable name to display within Visier. For example, "John Smith".
        employeeId:
          type: string
          description: If applicable, and if available, the user employee ID in the data.
        accountEnabled:
          type: string
          description: If true, the user account is enabled.
        email:
          type: string
          description: The user's email address.
    Status:
      type: object
      properties:
        localizedMessage:
          type: string
          description: Localized error message describing the root cause of the error.
        code:
          type: string
          description: Error classification.
        message:
          type: string
          description: Not used.
        rci:
          type: string
          description: Optional root cause identifier.
        userError:
          type: boolean
          description: Indicates whether the error is a user error.
      description: The response structure for errors.
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: VisierASIDToken
      in: cookie
    ApiKeyAuth:
      type: apiKey
      name: apikey
      in: header
    BearerAuth:
      type: http
      scheme: bearer
    OAuth2Auth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /v1/auth/oauth2/authorize
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
        password:
          tokenUrl: /v1/auth/oauth2/token
          scopes:
            read: Grants read access
            write: Grants write access
tags:
  - name: Projects
    description: |-
      Create projects, publish projects, and retrieve project details.
  - name: ProductionVersions
    x-displayName: Production Versions
    description: |-
      Use this API to retrieve information about data versions that were published to production.
      In Visier, production is the version of Visier available to your end users.
  - name: UsersV2
    x-displayName: Users V2
    description: |-
      Manage users in bulk, such as creating, updating, and deleting many users.
      <br>**Tip:** Visier recommends that administrating tenant users focus primarily on managing users at the administrating tenant level. These users likely belong directly to your organization, such as customer support, customer value managers, account executives, and customer success. These users work with clients to manage their day-to-day solution needs.
  - name: UserGroupsV2
    x-displayName: User Groups V2
    description: |-
      Manage user groups in Visier, such as creating, updating, and deleting user groups in bulk.
  - name: UsersV1
    x-displayName: Users V1
    description: |-
      Manage users within an organization, such as assigning permissions to users and retrieving user permission assignments and application logs.
      <br>**Tip:** Visier recommends that administrating tenant users focus primarily on managing users at the administrating tenant level. These users likely belong directly to your organization, such as customer support, customer value managers, account executives, and customer success. These users work with clients to manage their day-to-day solution needs
  - name: Profiles
    description: |-
      Manage the profiles assigned to users, such as assigning or removing a profile from a list of users and retrieving profile details. Administrating tenant users can manage profiles at the administrating tenant level and analytic tenant level.
  - name: Permissions
    description: |-
      Manage permissions in Visier, such as retrieving the details of a permission, content package, or data access set, creating new permissions and data access sets, and updating or deleting permissions. To assign permissions to users, see Users V1.
  - name: TenantsV2
    x-displayName: Tenants V2
    description: |-
      Create analytic tenants, deprovision tenants, retrieve tenant information, and update tenant information. Tenants V2 improves upon Tenants V1 in the following ways:
        * Programmatically assign a Home analysis to your analytic tenants.
        * Specify whether to merge or replace values when updating the details of an analytic tenant.
        * Specify the property fields to include in the response for GET requests.
  - name: TenantsV1
    x-displayName: Tenants V1
    description: |-
      Create analytic tenants, retrieve tenant information, and validate metric values.
  - name: ConsolidatedAnalytics
    x-displayName: Consolidated Analytics
    description: |-
      Manage your consolidated analytics (CA) tenants in Visier, such as retrieving the details of CA tenants, creating CA tenants, adding or deleting source tenants from CA tenants, and excluding sources from CA tenants.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: Sources
    description: |-
      Export and import sources in Visier.
      <br>**Note:** <em>This API is in **beta**. While in beta, APIs are interface-stable and implementation may change without notice. Rarely, interface changes may occur that are not backwards-compatible and require advance communication.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: SystemStatus
    x-displayName: System Status
    description: |-
      Check the health and status of Visier's platform and services.
  - name: EmailDomains
    x-displayName: Email Domains
    description: |-
      Manage the list of user email address domains that are allowed in your tenant.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: EncryptionKeys
    x-displayName: Encryption Keys
    description: |-
      Manage the encryption keys in your Visier tenant. Administrating tenants can specify the tenant in which to manage keys using the `TargetTenantID` header. For PGP keys, see `/v1/api/pgpkey`.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
  - name: NetworkSubnets
    x-displayName: Network Subnets
    description: |-
      Manage the IP addresses that can call Visier APIs.
      <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.
      If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
security:
  - ApiKeyAuth: []
    BearerAuth: []
  - ApiKeyAuth: []
    CookieAuth: []
  - ApiKeyAuth: []
    OAuth2Auth: []
x-tagGroups:
  - name: administration
    tags:
      - Projects
      - ProductionVersions
      - UsersV2
      - UserGroupsV2
      - UsersV1
      - Profiles
      - Permissions
      - TenantsV2
      - TenantsV1
      - ConsolidatedAnalytics
      - Sources
      - SystemStatus
      - EmailDomains
      - EncryptionKeys
      - NetworkSubnets
