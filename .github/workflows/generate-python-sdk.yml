name: Generate Python SDK

on:
  workflow_call:
    inputs:
      python_sdk_pr_base_branch:
        description: 'The base branch for the Python SDK PR'
        required: true
        type: string
        default: 'main'

env:
  SPEC_DIR: ${{ github.workspace }}/specs_preprocessed
  PYTHON_DIR: ${{ github.workspace }}/sdk-blueprints/python
  SPECIFICATIONS: |
    administration-apis,
    analytic-model-apis,
    data-in-apis,
    data-out-apis

jobs:
  generate-python-sdk:
    name: Generate Python SDK
    runs-on: ubuntu-22.04
    env:
      PACKAGE_PREFIX: visier.sdk.api
      PACKAGE_DIR: ${{ github.workspace }}/specs_preprocessed
      SDK_REPO_DIR: ${{ github.workspace }}/sdk-blueprints/generated

    steps:
      - name: Set up Corretto JDK 11
        uses: actions/setup-java@v4
        with:
            java-version: '11'
            distribution: 'corretto'

      - name: Set up Python versions
        uses: actions/setup-python@v4
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12

      - name: Install openapi-generator-cli and tox
        run: |
          npm install @openapitools/openapi-generator-cli -g
          pip install tox

      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Download openapi specifications artifact
        uses: actions/download-artifact@v4
        with:
          name: processed-specs-${{ github.ref_name }}
          path: ${{ env.SPEC_DIR }}

      - name: Create a token
        id: create-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: python-sdk

      - name: Checkout Python SDK repository
        uses: actions/checkout@v4
        with:
          repository: visier/python-sdk
          token: ${{ steps.create-token.outputs.token }}
          path: ${{ env.SDK_REPO_DIR }}
          persist-credentials: false
          ref: ${{ inputs.python_sdk_pr_base_branch }}

      - name: Create locale Python SDK branch
        env:
          GITHUB_TOKEN: ${{ steps.create-token.outputs.token }}
        run: |
          cd $SDK_REPO_DIR
          git checkout -b ${{ github.ref_name }}

      - name: Generate Python SDK for all specifications
        shell: bash
        run: |
          SPECIFICATION_LIST=$(echo $SPECIFICATIONS | tr ',' '\n')
          for specification in $SPECIFICATION_LIST; do
            echo "Processing $specification"
            spec_file="$SPEC_DIR/${specification}.yaml"
            package_name="$PACKAGE_PREFIX.$(echo "$specification" | sed 's/-apis$//; s/-/_/g')"
            output_dir="$SDK_REPO_DIR/src/$package_name"
            spec_version=$(awk '/version:/ {gsub(/"| /, "", $2); print $2}' "$spec_file")
          
            mkdir -p $output_dir
            openapi-generator-cli generate \
              -i "$spec_file" \
              -g python \
              -t $PYTHON_DIR/templates \
              --package-name "$package_name" \
              -o "$output_dir" \
              --skip-validate-spec \
              --additional-properties=packageVersion="$spec_version"
          done

      # Pushing before tests to have the code available for debugging
      - name: Push Python SDK branch
        env:
          GITHUB_TOKEN: ${{ steps.create-token.outputs.token }}
        shell: bash
        run: |
          cd $SDK_REPO_DIR
          git config user.name "Visier-Build-Team"
          git config user.email "action@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/visier/python-sdk.git
          git add .
          git commit -m "Autogenerated Python SDK"
          git push origin ${{ github.ref_name }}

      - name: Run tox tests
        shell: bash
        run: |
          error_flag=0
          find "$SDK_REPO_DIR/src/" -type d -name "${PACKAGE_PREFIX}*" -print |
          while read -r dir; do
            (cd "$dir" && tox -p 3)
            if [ $? -ne 0 ]; then
              error_flag=1
            fi
          done
          exit $error_flag

      - name: Create Pull Request for python-sdk
        shell: bash
        env:
          GH_TOKEN: ${{ steps.create-token.outputs.token }}
        run: |
          cd $SDK_REPO_DIR
          gh pr create \
            --title "Auto-generated SDK" \
            --body "This PR includes the autogenerated SDKs." \
            --head "${{ github.ref_name }}" \
            --base "${{ inputs.python_sdk_pr_base_branch }}"